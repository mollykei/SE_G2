/** Generated by YAKINDU Statechart Tools code generator. */

#ifndef UART_H_
#define UART_H_

#include "../inc/sc_types.h"

#ifdef __cplusplus
extern "C" { 
#endif 

/*! \file Header of the state machine 'uart'.
*/

/*! Define number of states in the state enum */

#define UART_STATE_COUNT 2

/*! Define dimension of the state configuration vector for orthogonal states. */
#define UART_MAX_ORTHOGONAL_STATES 1


/*! Define indices of states in the StateConfVector */
#define SCVI_UART_MAIN_REGION_IDLE 0
#define SCVI_UART_MAIN_REGION_UART_RX 0

/*! Enumeration of all states */ 
typedef enum
{
	Uart_last_state,
	Uart_main_region_IDLE,
	Uart_main_region_UART_RX
} UartStates;

/*! Type definition of the data structure for the UartIface interface scope. */
typedef struct
{
	sc_boolean evUartRx_raised;
	sc_boolean evUartWait_raised;
	sc_integer viUartRx;
} UartIface;




/*! 
 * Type definition of the data structure for the Uart state machine.
 * This data structure has to be allocated by the client code. 
 */
typedef struct
{
	UartStates stateConfVector[UART_MAX_ORTHOGONAL_STATES];
	sc_ushort stateConfVectorPosition; 
	
	UartIface iface;
} Uart;



/*! Initializes the Uart state machine data structures. Must be called before first usage.*/
extern void uart_init(Uart* handle);

/*! Activates the state machine */
extern void uart_enter(Uart* handle);

/*! Deactivates the state machine */
extern void uart_exit(Uart* handle);

/*! Performs a 'run to completion' step. */
extern void uart_runCycle(Uart* handle);


/*! Raises the in event 'evUartRx' that is defined in the default interface scope. */ 
extern void uartIface_raise_evUartRx(Uart* handle);

/*! Raises the in event 'evUartWait' that is defined in the default interface scope. */ 
extern void uartIface_raise_evUartWait(Uart* handle);

/*! Gets the value of the variable 'viUartRx' that is defined in the default interface scope. */ 
extern sc_integer uartIface_get_viUartRx(const Uart* handle);
/*! Sets the value of the variable 'viUartRx' that is defined in the default interface scope. */ 
extern void uartIface_set_viUartRx(Uart* handle, sc_integer value);

/*!
 * Checks whether the state machine is active (until 2.4.1 this method was used for states).
 * A state machine is active if it was entered. It is inactive if it has not been entered at all or if it has been exited.
 */
extern sc_boolean uart_isActive(const Uart* handle);

/*!
 * Checks if all active states are final. 
 * If there are no active states then the state machine is considered being inactive. In this case this method returns false.
 */
extern sc_boolean uart_isFinal(const Uart* handle);

/*! Checks if the specified state is active (until 2.4.1 the used method for states was called isActive()). */
extern sc_boolean uart_isStateActive(const Uart* handle, UartStates state);


#ifdef __cplusplus
}
#endif 

#endif /* UART_H_ */
