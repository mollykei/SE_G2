/** Generated by YAKINDU Statechart Tools code generator. */

#ifndef UART_8_H_
#define UART_8_H_

#include "../inc/sc_types.h"

#ifdef __cplusplus
extern "C" { 
#endif 

/*! \file Header of the state machine 'uart_8'.
*/

/*! Define number of states in the state enum */

#define UART_8_STATE_COUNT 3

/*! Define dimension of the state configuration vector for orthogonal states. */
#define UART_8_MAX_ORTHOGONAL_STATES 1


/*! Define indices of states in the StateConfVector */
#define SCVI_UART_8_MAIN_REGION_IDLE 0
#define SCVI_UART_8_MAIN_REGION_UART_USB_RX 0
#define SCVI_UART_8_MAIN_REGION_UART3_RX 0

/*! Enumeration of all states */ 
typedef enum
{
	Uart_8_last_state,
	Uart_8_main_region_IDLE,
	Uart_8_main_region_UART_USB_RX,
	Uart_8_main_region_UART3_RX
} Uart_8States;

/*! Type definition of the data structure for the Uart_8Iface interface scope. */
typedef struct
{
	sc_boolean evUartUsbRx_raised;
	sc_boolean evUart3Rx_raised;
	sc_integer viRxChar;
} Uart_8Iface;


/* Declaration of constants for scope Uart_8Iface. */
extern const sc_integer UART_8_UART_8IFACE_UARTUSB;
extern const sc_integer UART_8_UART_8IFACE_UART3;



/*! 
 * Type definition of the data structure for the Uart_8 state machine.
 * This data structure has to be allocated by the client code. 
 */
typedef struct
{
	Uart_8States stateConfVector[UART_8_MAX_ORTHOGONAL_STATES];
	sc_ushort stateConfVectorPosition; 
	
	Uart_8Iface iface;
} Uart_8;



/*! Initializes the Uart_8 state machine data structures. Must be called before first usage.*/
extern void uart_8_init(Uart_8* handle);

/*! Activates the state machine */
extern void uart_8_enter(Uart_8* handle);

/*! Deactivates the state machine */
extern void uart_8_exit(Uart_8* handle);

/*! Performs a 'run to completion' step. */
extern void uart_8_runCycle(Uart_8* handle);


/*! Raises the in event 'evUartUsbRx' that is defined in the default interface scope. */ 
extern void uart_8Iface_raise_evUartUsbRx(Uart_8* handle);

/*! Raises the in event 'evUart3Rx' that is defined in the default interface scope. */ 
extern void uart_8Iface_raise_evUart3Rx(Uart_8* handle);

/*! Gets the value of the variable 'UARTUSB' that is defined in the default interface scope. */ 
extern sc_integer uart_8Iface_get_uARTUSB(const Uart_8* handle);
/*! Gets the value of the variable 'UART3' that is defined in the default interface scope. */ 
extern sc_integer uart_8Iface_get_uART3(const Uart_8* handle);
/*! Gets the value of the variable 'viRxChar' that is defined in the default interface scope. */ 
extern sc_integer uart_8Iface_get_viRxChar(const Uart_8* handle);
/*! Sets the value of the variable 'viRxChar' that is defined in the default interface scope. */ 
extern void uart_8Iface_set_viRxChar(Uart_8* handle, sc_integer value);

/*!
 * Checks whether the state machine is active (until 2.4.1 this method was used for states).
 * A state machine is active if it was entered. It is inactive if it has not been entered at all or if it has been exited.
 */
extern sc_boolean uart_8_isActive(const Uart_8* handle);

/*!
 * Checks if all active states are final. 
 * If there are no active states then the state machine is considered being inactive. In this case this method returns false.
 */
extern sc_boolean uart_8_isFinal(const Uart_8* handle);

/*! Checks if the specified state is active (until 2.4.1 the used method for states was called isActive()). */
extern sc_boolean uart_8_isStateActive(const Uart_8* handle, Uart_8States state);


#ifdef __cplusplus
}
#endif 

#endif /* UART_8_H_ */
