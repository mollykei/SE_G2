
examples/c/projects/TP3/punto7_button2Led/out/punto7_button2Led.elf:     file format elf32-littlearm
examples/c/projects/TP3/punto7_button2Led/out/punto7_button2Led.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a000585

Program Header:
0x70000001 off    0x00012b88 vaddr 0x1a002b88 paddr 0x1a002b88 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x00000190 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00002b90 memsz 0x00002b90 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a002b90 align 2**16
         filesz 0x00000134 memsz 0x00000134 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b84  1a000000  1a000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000134  10000000  1a002b90  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00020134  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00020134  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00020134  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00020134  2**2
                  CONTENTS
  6 .bss          00000058  10000138  10000138  00000138  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00020134  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00020134  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00020134  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00020134  2**2
                  CONTENTS
 11 .init_array   00000004  1a002b84  1a002b84  00012b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a002b88  1a002b88  00012b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  00020134  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  00020134  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  00020134  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  00020134  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  00020134  2**2
                  CONTENTS
 18 .noinit       00000000  10000190  10000190  00020134  2**2
                  CONTENTS
 19 .debug_info   00025fa8  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 000051d7  00000000  00000000  000460dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00009b78  00000000  00000000  0004b2b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00000b10  00000000  00000000  00054e2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 00000c48  00000000  00000000  0005593b  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  0000d73d  00000000  00000000  00056583  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   00013f9f  00000000  00000000  00063cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    00028abf  00000000  00000000  00077c5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      00000068  00000000  00000000  000a071e  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000032  00000000  00000000  000a0786  2**0
                  CONTENTS, READONLY
 29 .debug_frame  0000202c  00000000  00000000  000a07b8  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000138 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a002b84 l    d  .init_array	00000000 .init_array
1a002b88 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10000190 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 sapi_uart.c
1a00145c l     F .text	000000a4 uartProcessIRQ
10000144 l     O .bss	00000004 rxIsrCallbackUART0
10000148 l     O .bss	00000004 rxIsrCallbackUART2
1000014c l     O .bss	00000004 rxIsrCallbackUART3
10000150 l     O .bss	00000004 txIsrCallbackUART0
10000154 l     O .bss	00000004 txIsrCallbackUART2
10000158 l     O .bss	00000004 txIsrCallbackUART3
1a0029ec l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 my_gpio.c
1a000300 l     F .text	00000010 gpioGetPin
1a000310 l     F .text	0000000a checkRange
00000000 l    df *ABS*	00000000 button2led.c
00000000 l    df *ABS*	00000000 my_debounce.c
00000000 l    df *ABS*	00000000 system.c
10000138 l     O .bss	00000004 heap_end.5864
00000000 l    df *ABS*	00000000 board.c
1a0006d8 l     F .text	00000044 Board_LED_Init
1a00071c l     F .text	00000040 Board_TEC_Init
1a00075c l     F .text	00000040 Board_GPIO_Init
1a00079c l     F .text	00000030 Board_ADC_Init
1a0007cc l     F .text	00000038 Board_SPI_Init
1a000804 l     F .text	00000024 Board_I2C_Init
1a002878 l     O .text	00000008 GpioButtons
1a002880 l     O .text	0000000c GpioLeds
1a00288c l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a0028a4 l     O .text	00000004 InitClkStates
1a0028a8 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a000978 l     F .text	0000002c Chip_UART_GetIndex
1a00291c l     O .text	00000008 UART_BClock
1a002924 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a000b14 l     F .text	00000014 Chip_ADC_GetClockIndex
1a000b28 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a000bf0 l     F .text	000000a0 pll_calc_divs
1a000c90 l     F .text	0000010c pll_get_frac
1a000d9c l     F .text	0000004c Chip_Clock_FindBaseClock
1a001010 l     F .text	00000022 Chip_Clock_GetDivRate
1000013c l     O .bss	00000008 audio_usb_pll_freq
1a002938 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a0029a4 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a0012d8 l     F .text	00000014 Chip_SSP_GetClockIndex
1a0012ec l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000000 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000038 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_tick.c
1000015c l     O .bss	00000004 callBackFuncParams
10000160 l     O .bss	00000008 tickCounter
10000168 l     O .bss	00000004 tickHookFunction
00000000 l    df *ABS*	00000000 sapi_timer.c
1a0017d4 l     F .text	00000002 errorOcurred
1a0017d6 l     F .text	00000002 doNothing
10000048 l     O .data	00000040 timer_dd
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a0018e0 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
1000016c l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 sapi_ultrasonic_hcsr04.c
1a001bb0 l     F .text	00000010 clearInterrupt
1a001bc0 l     F .text	0000005c serveInterrupt
10000088 l     O .data	00000048 ultrasonicSensors
1a002b1c l     O .text	00000003 ultrasonicSensorsIrqMap
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1a0020c4 l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 impure.c
100000d4 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 
1a002b88 l       .init_array	00000000 __init_array_end
1a002b84 l       .bss_RAM5	00000000 __preinit_array_end
1a002b84 l       .init_array	00000000 __init_array_start
1a002b84 l       .bss_RAM5	00000000 __preinit_array_start
1a000e34 g     F .text	0000001c Chip_Clock_GetDividerSource
1a000624 g     F .text	00000012 _isatty_r
1a00245c g     F .text	000000dc _puts_r
1a001858 g     F .text	00000044 TIMER2_IRQHandler
1a001634 g     F .text	00000014 uartRxRead
1a000636 g     F .text	0000000a _lseek_r
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a0008be g     F .text	00000008 __stdio_init
10000184 g     O .bss	00000001 __lock___atexit_recursive_mutex
1a001b70 g     F .text	0000003e delayRead
1a0025a2 g     F .text	00000024 __sseek
1a002174 g     F .text	00000070 __sinit
1a0025d0 g     F .text	000000a4 __swbuf_r
1a00017a  w    F .text	00000002 HardFault_Handler
1a002118 g     F .text	0000002c __sfmoreglue
1a000000 g       *ABS*	00000000 __vectors_start__
1a000bce g     F .text	0000000c Chip_ADC_SetResolution
1a002824 g     F .text	0000000c __malloc_unlock
10000178 g     O .bss	00000001 buttonState
1a0017a8 g     F .text	0000002c SysTick_Handler
1a0009f8 g     F .text	00000040 Chip_UART_SetBaud
10000185 g     O .bss	00000001 __lock___arc4random_mutex
1a000580  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a000860 g     F .text	0000001c Board_UARTGetChar
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a000186  w    F .text	00000002 PendSV_Handler
1a000178  w    F .text	00000002 NMI_Handler
1a002b90 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0003a8 g     F .text	00000034 inicializar_plataforma
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
1a00061a g     F .text	0000000a _fstat_r
53ff730a g       *ABS*	00000000 __valid_user_code_checksum
1a002b90 g       .ARM.exidx	00000000 _etext
1a0003dc g     F .text	00000064 my_PrintChar
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a00189c g     F .text	00000044 TIMER3_IRQHandler
1a0010b2 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001bc g     F .text	0000000a UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a00210c g     F .text	0000000c _cleanup_r
1a001c3c g     F .text	00000000 .hidden __aeabi_uldivmod
10000190 g       .noinit	00000000 _noinit
1a002538 g     F .text	00000010 puts
1000017c g     O .bss	00000004 SystemCoreClock
1a00036a g     F .text	0000003e onRx
1a0009a4 g     F .text	00000054 Chip_UART_Init
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a000180  w    F .text	00000002 UsageFault_Handler
1a001130 g     F .text	0000004c Chip_Clock_GetRate
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a000900 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a001c6c g     F .text	000002d0 .hidden __udivmoddi4
1a0006b8 g     F .text	00000020 _sbrk_r
1a002874 g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a000640 g     F .text	0000004e _read_r
1a001c26 g     F .text	0000000a GPIO1_IRQHandler
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a002b88 g       .ARM.exidx	00000000 __exidx_start
10000186 g     O .bss	00000001 __lock___env_recursive_mutex
1a0002fc g     O .text	00000004 CRP_WORD
10000187 g     O .bss	00000001 __lock___sinit_recursive_mutex
1a002b80 g     O .text	00000004 _global_impure_ptr
1a0022ac g     F .text	00000048 __libc_init_array
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a00087c g     F .text	00000030 Board_Init
1a00060e  w    F .text	00000002 _init
1a000346 g     F .text	00000024 my_gpio_write
1a000114 g       .text	00000000 __data_section_table
1a0001ba  w    F .text	00000002 RTC_IRQHandler
10000190 g       .bss	00000000 _ebss
1a0017d8 g     F .text	00000040 TIMER0_IRQHandler
1a000584 g     F .text	00000088 Reset_Handler
1a00172c g     F .text	0000007c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a0013d0 g     F .text	00000038 Chip_I2C_SetClockRate
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a000de8 g     F .text	0000004c Chip_Clock_EnableCrystal
10000188 g     O .bss	00000001 __lock___malloc_recursive_mutex
10008000 g       *ABS*	00000000 __top_RamLoc32
1a00018a g     F .text	0000001e data_init
1a00031a g     F .text	0000002c my_gpio_read
1a001818 g     F .text	00000040 TIMER1_IRQHandler
1a002b20 g     O .text	00000020 __sf_fake_stderr
1a0013ac g     F .text	00000024 Chip_I2C_Init
1a0004f8 g     F .text	0000000c my_ButtonInit
1a0022f8 g     F .text	00000002 __retarget_lock_release_recursive
1a0016f2 g     F .text	0000000a UART2_IRQHandler
1a000fa4 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a002a34 g     O .text	000000e6 gpioPinsInit
1a001500 g     F .text	00000090 uartInterrupt
1a0016d8 g     F .text	0000001a uartWriteByte
1a001304 g     F .text	00000012 Chip_SSP_SetClockRate
1a001c30 g     F .text	0000000a GPIO2_IRQHandler
1a002144 g     F .text	0000000c __sfp_lock_acquire
1a00230c g     F .text	0000009c _free_r
1a00108c g     F .text	00000026 Chip_Clock_GetBaseClock
10000138 g       .bss	00000000 _bss
1a000b9c g     F .text	00000032 Chip_ADC_SetSampleRate
1a001b50 g     F .text	00000020 delayInit
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a001316 g     F .text	0000003e Chip_SSP_SetBitRate
1a0012d4 g     F .text	00000002 Chip_GPIO_Init
1a0028a0 g     O .text	00000004 OscRateIn
1a00165c g     F .text	0000007c uartInit
10000190 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a000178 g       .text	00000000 __bss_section_table_end
1a000610 g     F .text	0000000a _close_r
1a001914 g     F .text	000001ac gpioInit
1a002674 g     F .text	000000dc __swsetup_r
1a001f3c  w    F .text	00000002 .hidden __aeabi_ldiv0
1a002830 g     O .text	0000003c gpio_pins_init
1a0021e4 g     F .text	0000008c __sfp
1a002168 g     F .text	0000000c __sinit_lock_release
1a002548 g     F .text	00000022 __sread
1a001ac0 g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a002818 g     F .text	0000000c __malloc_lock
1a00084c g     F .text	00000014 Board_UARTPutChar
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a00204c g     F .text	00000078 _fflush_r
1a0004ec g     F .text	0000000c my_ButtonError
1a002b40 g     O .text	00000020 __sf_fake_stdin
1a000e50 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a0022f6 g     F .text	00000002 __retarget_lock_acquire_recursive
1a0022fa g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000440 g     F .text	000000aa main
1a0022f4 g     F .text	00000002 __retarget_lock_init_recursive
1a0001ba  w    F .text	00000002 WDT_IRQHandler
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000182  w    F .text	00000002 SVC_Handler
1a0025c6 g     F .text	00000008 __sclose
1a0023a8 g     F .text	000000b4 _malloc_r
1a00161c g     F .text	00000018 uartTxReady
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a0010c0 g     F .text	0000003c Chip_Clock_EnableOpts
1a0008b6 g     F .text	00000008 __stdio_getchar
1a000e6c g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a000f24 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a001408 g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a00060c  w    F .text	00000002 _fini
1a000b5c g     F .text	00000040 Chip_ADC_Init
10000180 g     O .bss	00000004 g_pUsbApi
1a0008c8 g     F .text	00000038 Board_SetupMuxing
1a000a38 g     F .text	000000dc Chip_UART_SetBaudFDR
1a001708 g     F .text	0000000c tickRead
1a00068e g     F .text	00000028 _write_r
10000040 g     O .data	00000008 tickRateMS
1a000504 g     F .text	0000007c my_ButtonUpdate
1a0001ba  w    F .text	00000002 ETH_IRQHandler
100000d0 g     O .data	00000004 _impure_ptr
1a001f40 g     F .text	0000010c __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a001648 g     F .text	00000014 uartTxWrite
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
10000190 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a001354 g     F .text	00000038 Chip_SSP_Init
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a002750 g     F .text	00000048 __swhatbuf_r
1a0001ba  w    F .text	00000002 DAC_IRQHandler
1a000828 g     F .text	00000024 Board_Debug_Init
1a0008ac g     F .text	0000000a __stdio_putchar
10000134 g       .data	00000000 _edata
1a00138c g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
10000189 g     O .bss	00000001 __lock___at_quick_exit_mutex
1a00117c g     F .text	00000158 Chip_SetupCoreClock
1a00256a g     F .text	00000038 __swrite
1a001c1c g     F .text	0000000a GPIO0_IRQHandler
1a000000 g     O .text	00000040 g_pfnVectors
1a002270 g     F .text	0000003c _fwalk_reent
1a000bdc g     F .text	00000014 SystemCoreClockUpdate
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a002150 g     F .text	0000000c __sfp_lock_release
1a002b60 g     O .text	00000020 __sf_fake_stdout
1a001f3c  w    F .text	00000002 .hidden __aeabi_idiv0
1a001590 g     F .text	0000008c uartCallbackSet
1a00017e  w    F .text	00000002 BusFault_Handler
1000018a g     O .bss	00000001 __lock___dd_hash_mutex
1a002798 g     F .text	00000080 __smakebuf_r
1000018b g     O .bss	00000001 __lock___tz_mutex
1a0010fc g     F .text	00000034 Chip_Clock_Enable
1a0016fc g     F .text	0000000a UART3_IRQHandler
10000174 g     O .bss	00000004 __malloc_sbrk_start
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a001adc g     F .text	00000074 boardInit
10000170 g     O .bss	00000004 __malloc_free_list
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a001714 g     F .text	00000018 tickPowerSet
1a001034 g     F .text	00000058 Chip_Clock_SetBaseClock
1a001440 g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
1000018c g     O .bss	00000001 __lock___sfp_recursive_mutex
1a00215c g     F .text	0000000c __sinit_lock_acquire
1a00096c g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 85 05 00 1a 79 01 00 1a 7b 01 00 1a     ........y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 0a 73 ff 53     }............s.S
	...
1a00002c:	83 01 00 1a 85 01 00 1a 00 00 00 00 87 01 00 1a     ................
1a00003c:	a9 17 00 1a                                         ....

1a000040 <g_pfnVendorVectors>:
1a000040:	bb 01 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     ................
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	c1 1a 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000070:	d9 17 00 1a 19 18 00 1a 59 18 00 1a 9d 18 00 1a     ........Y.......
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bd 01 00 1a bb 01 00 1a f3 16 00 1a fd 16 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	1d 1c 00 1a 27 1c 00 1a 31 1c 00 1a bb 01 00 1a     ....'...1.......
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a002b90 	.word	0x1a002b90
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000134 	.word	0x00000134
1a000120:	1a002b90 	.word	0x1a002b90
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a002b90 	.word	0x1a002b90
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a002b90 	.word	0x1a002b90
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a002b90 	.word	0x1a002b90
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000138 	.word	0x10000138
1a000154:	00000058 	.word	0x00000058
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>

1a000182 <SVC_Handler>:
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a000182:	e7fe      	b.n	1a000182 <SVC_Handler>

1a000184 <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>

1a000186 <PendSV_Handler>:
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a000186:	e7fe      	b.n	1a000186 <PendSV_Handler>
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <PendSV_Handler+0x2>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	f850 4b04 	ldr.w	r4, [r0], #4
1a000196:	f841 4b04 	str.w	r4, [r1], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019a:	3304      	adds	r3, #4
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	428b      	cmp	r3, r1
1a0001ac:	d204      	bcs.n	1a0001b8 <bss_init+0x10>
        *pulDest++ = 0;
1a0001ae:	2200      	movs	r2, #0
1a0001b0:	f840 2b04 	str.w	r2, [r0], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	3304      	adds	r3, #4
1a0001b6:	e7f8      	b.n	1a0001aa <bss_init+0x2>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>

1a0001bc <UART0_IRQHandler>:
__attribute__ ((section(".after_vectors")))

// UART0 (GPIO1 y GPIO2 or RS485/Profibus)
// 0x28 0x000000A0 - Handler for ISR UART0 (IRQ 24)
void UART0_IRQHandler(void)
{
1a0001bc:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_GPIO );
1a0001be:	2000      	movs	r0, #0
1a0001c0:	f001 f94c 	bl	1a00145c <uartProcessIRQ>
}
1a0001c4:	bd08      	pop	{r3, pc}
1a0001c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fe:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000202:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000206:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000212:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000216:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000222:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000226:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000232:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000236:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000242:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000246:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000252:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000256:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000262:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000266:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000272:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000276:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000282:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000286:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000292:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000296:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002aa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ae:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ba:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002be:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002fa:	Address 0x000000001a0002fa is out of bounds.


1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <gpioGetPin>:
		{ 6, 4, 3, 3, 0 },   //GPIO1
};

// Private functions
static my_gpio_pins_t gpioGetPin(my_gpio_map_t const pin) {
	return (my_gpio_pins_t) &(gpio_pins_init[pin]);
1a000300:	eb00 0080 	add.w	r0, r0, r0, lsl #2
}
1a000304:	4b01      	ldr	r3, [pc, #4]	; (1a00030c <gpioGetPin+0xc>)
1a000306:	4418      	add	r0, r3
1a000308:	4770      	bx	lr
1a00030a:	bf00      	nop
1a00030c:	1a002830 	.word	0x1a002830

1a000310 <checkRange>:

static bool checkRange(my_gpio_map_t const pin) {
	return pin < 0 || pin > MAX_GPIO_PINS;
}
1a000310:	280b      	cmp	r0, #11
1a000312:	bf94      	ite	ls
1a000314:	2000      	movls	r0, #0
1a000316:	2001      	movhi	r0, #1
1a000318:	4770      	bx	lr

1a00031a <my_gpio_read>:
	}

	return;
}

bool my_gpio_read(my_gpio_map_t const pin) {
1a00031a:	b510      	push	{r4, lr}
1a00031c:	4604      	mov	r4, r0

	if (checkRange(pin)) {
1a00031e:	f7ff fff7 	bl	1a000310 <checkRange>
1a000322:	b970      	cbnz	r0, 1a000342 <my_gpio_read+0x28>
		return false;
	}

	bool tmp_val;

	my_gpio_pins_t mcu_pin = gpioGetPin(pin);
1a000324:	4620      	mov	r0, r4
1a000326:	f7ff ffeb 	bl	1a000300 <gpioGetPin>
	tmp_val = Chip_GPIO_ReadPortBit(LPC_GPIO_PORT, mcu_pin->gpio_port,
1a00032a:	7883      	ldrb	r3, [r0, #2]
1a00032c:	78c2      	ldrb	r2, [r0, #3]
 * @return	true of the GPIO is high, false if low
 * @note	It is recommended to use the Chip_GPIO_GetPinState() function instead.
 */
STATIC INLINE bool Chip_GPIO_ReadPortBit(LPC_GPIO_T *pGPIO, uint32_t port, uint8_t pin)
{
	return (bool) pGPIO->B[port][pin];
1a00032e:	015b      	lsls	r3, r3, #5
1a000330:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a000334:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a000338:	5c98      	ldrb	r0, [r3, r2]
1a00033a:	3000      	adds	r0, #0
1a00033c:	bf18      	it	ne
1a00033e:	2001      	movne	r0, #1
			mcu_pin->gpio_pin);

	return tmp_val;

}
1a000340:	bd10      	pop	{r4, pc}
		return false;
1a000342:	2000      	movs	r0, #0
1a000344:	e7fc      	b.n	1a000340 <my_gpio_read+0x26>

1a000346 <my_gpio_write>:

void my_gpio_write(my_gpio_map_t const pin, bool const val) {
1a000346:	b538      	push	{r3, r4, r5, lr}
1a000348:	4605      	mov	r5, r0
1a00034a:	460c      	mov	r4, r1

	if (checkRange(pin)) {
1a00034c:	f7ff ffe0 	bl	1a000310 <checkRange>
1a000350:	b950      	cbnz	r0, 1a000368 <my_gpio_write+0x22>
		return;
	}
	my_gpio_pins_t mcu_pin = gpioGetPin(pin);
1a000352:	4628      	mov	r0, r5
1a000354:	f7ff ffd4 	bl	1a000300 <gpioGetPin>

	Chip_GPIO_SetPinState(LPC_GPIO_PORT, mcu_pin->gpio_port, mcu_pin->gpio_pin,
1a000358:	7883      	ldrb	r3, [r0, #2]
1a00035a:	78c2      	ldrb	r2, [r0, #3]
	pGPIO->B[port][pin] = setting;
1a00035c:	015b      	lsls	r3, r3, #5
1a00035e:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a000362:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a000366:	549c      	strb	r4, [r3, r2]
			val);

	return;
}
1a000368:	bd38      	pop	{r3, r4, r5, pc}

1a00036a <onRx>:
	uartCallbackSet(UART_232, UART_RECEIVE, onRx, NULL);
	uartInterrupt(UART_232, true);
}

// de examples/c/sapi/uart/rx_interrupt
void onRx(void* noUsado) {
1a00036a:	b508      	push	{r3, lr}
	char caracter_recibido = uartRxRead(UART_232);
1a00036c:	2005      	movs	r0, #5
1a00036e:	f001 f961 	bl	1a001634 <uartRxRead>
	switch(caracter_recibido) {
1a000372:	3831      	subs	r0, #49	; 0x31
1a000374:	2803      	cmp	r0, #3
1a000376:	d807      	bhi.n	1a000388 <onRx+0x1e>
1a000378:	e8df f000 	tbb	[pc, r0]
1a00037c:	110c0702 	.word	0x110c0702
		case '1':
			my_gpio_write(MY_GPIO_LEDR, 1);
1a000380:	2101      	movs	r1, #1
1a000382:	2003      	movs	r0, #3
1a000384:	f7ff ffdf 	bl	1a000346 <my_gpio_write>
			break;
		case '4':
			my_gpio_write(MY_GPIO_LED1, 0);
			break;
	}
}
1a000388:	bd08      	pop	{r3, pc}
			my_gpio_write(MY_GPIO_LEDG, 1);
1a00038a:	2101      	movs	r1, #1
1a00038c:	2004      	movs	r0, #4
1a00038e:	f7ff ffda 	bl	1a000346 <my_gpio_write>
			break;
1a000392:	e7f9      	b.n	1a000388 <onRx+0x1e>
			my_gpio_write(MY_GPIO_LEDB, 0);
1a000394:	2100      	movs	r1, #0
1a000396:	2005      	movs	r0, #5
1a000398:	f7ff ffd5 	bl	1a000346 <my_gpio_write>
			break;
1a00039c:	e7f4      	b.n	1a000388 <onRx+0x1e>
			my_gpio_write(MY_GPIO_LED1, 0);
1a00039e:	2100      	movs	r1, #0
1a0003a0:	4608      	mov	r0, r1
1a0003a2:	f7ff ffd0 	bl	1a000346 <my_gpio_write>
}
1a0003a6:	e7ef      	b.n	1a000388 <onRx+0x1e>

1a0003a8 <inicializar_plataforma>:
void inicializar_plataforma() {
1a0003a8:	b508      	push	{r3, lr}
	boardConfig();
1a0003aa:	f001 fb97 	bl	1a001adc <boardInit>
	Board_Init();
1a0003ae:	f000 fa65 	bl	1a00087c <Board_Init>
	SystemCoreClockUpdate();
1a0003b2:	f000 fc13 	bl	1a000bdc <SystemCoreClockUpdate>
	uartConfig(UART_232,115200);
1a0003b6:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a0003ba:	2005      	movs	r0, #5
1a0003bc:	f001 f94e 	bl	1a00165c <uartInit>
	uartCallbackSet(UART_232, UART_RECEIVE, onRx, NULL);
1a0003c0:	2300      	movs	r3, #0
1a0003c2:	4a05      	ldr	r2, [pc, #20]	; (1a0003d8 <inicializar_plataforma+0x30>)
1a0003c4:	4619      	mov	r1, r3
1a0003c6:	2005      	movs	r0, #5
1a0003c8:	f001 f8e2 	bl	1a001590 <uartCallbackSet>
	uartInterrupt(UART_232, true);
1a0003cc:	2101      	movs	r1, #1
1a0003ce:	2005      	movs	r0, #5
1a0003d0:	f001 f896 	bl	1a001500 <uartInterrupt>
}
1a0003d4:	bd08      	pop	{r3, pc}
1a0003d6:	bf00      	nop
1a0003d8:	1a00036b 	.word	0x1a00036b

1a0003dc <my_PrintChar>:

//de sapi_print.hc
void my_PrintChar(gpioMap_t tecla, my_ButtonState_t buttonState){
1a0003dc:	b508      	push	{r3, lr}

	switch (tecla){
1a0003de:	3806      	subs	r0, #6
1a0003e0:	2803      	cmp	r0, #3
1a0003e2:	d827      	bhi.n	1a000434 <my_PrintChar+0x58>
1a0003e4:	e8df f000 	tbb	[pc, r0]
1a0003e8:	1d140b02 	.word	0x1d140b02

		case MY_GPIO_TEC1:
			 my_gpio_write(MY_GPIO_LEDR, HIGH);
1a0003ec:	2101      	movs	r1, #1
1a0003ee:	2003      	movs	r0, #3
1a0003f0:	f7ff ffa9 	bl	1a000346 <my_gpio_write>
			 uartWriteByte( UART_232, '1' );
1a0003f4:	2131      	movs	r1, #49	; 0x31
1a0003f6:	2005      	movs	r0, #5
1a0003f8:	f001 f96e 	bl	1a0016d8 <uartWriteByte>

		default:
			printf("Error. \n");
			break;
	}
}
1a0003fc:	bd08      	pop	{r3, pc}
			my_gpio_write(MY_GPIO_LEDG,HIGH);
1a0003fe:	2101      	movs	r1, #1
1a000400:	2004      	movs	r0, #4
1a000402:	f7ff ffa0 	bl	1a000346 <my_gpio_write>
			uartWriteByte( UART_232, '2' );
1a000406:	2132      	movs	r1, #50	; 0x32
1a000408:	2005      	movs	r0, #5
1a00040a:	f001 f965 	bl	1a0016d8 <uartWriteByte>
			break;
1a00040e:	e7f5      	b.n	1a0003fc <my_PrintChar+0x20>
			my_gpio_write(MY_GPIO_LEDB,LOW);
1a000410:	2100      	movs	r1, #0
1a000412:	2005      	movs	r0, #5
1a000414:	f7ff ff97 	bl	1a000346 <my_gpio_write>
			uartWriteByte( UART_232, '3' );
1a000418:	2133      	movs	r1, #51	; 0x33
1a00041a:	2005      	movs	r0, #5
1a00041c:	f001 f95c 	bl	1a0016d8 <uartWriteByte>
			break;
1a000420:	e7ec      	b.n	1a0003fc <my_PrintChar+0x20>
			my_gpio_write(MY_GPIO_LED1, LOW);
1a000422:	2100      	movs	r1, #0
1a000424:	4608      	mov	r0, r1
1a000426:	f7ff ff8e 	bl	1a000346 <my_gpio_write>
			uartWriteByte(UART_232, '4');
1a00042a:	2134      	movs	r1, #52	; 0x34
1a00042c:	2005      	movs	r0, #5
1a00042e:	f001 f953 	bl	1a0016d8 <uartWriteByte>
			break;
1a000432:	e7e3      	b.n	1a0003fc <my_PrintChar+0x20>
			printf("Error. \n");
1a000434:	4801      	ldr	r0, [pc, #4]	; (1a00043c <my_PrintChar+0x60>)
1a000436:	f002 f87f 	bl	1a002538 <puts>
}
1a00043a:	e7df      	b.n	1a0003fc <my_PrintChar+0x20>
1a00043c:	1a00286c 	.word	0x1a00286c

1a000440 <main>:
int main( void ) {
1a000440:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000442:	b089      	sub	sp, #36	; 0x24
	inicializar_plataforma();
1a000444:	f7ff ffb0 	bl	1a0003a8 <inicializar_plataforma>
	delayInit(&actualizar_boton, 50);
1a000448:	2232      	movs	r2, #50	; 0x32
1a00044a:	2300      	movs	r3, #0
1a00044c:	a802      	add	r0, sp, #8
1a00044e:	f001 fb7f 	bl	1a001b50 <delayInit>
	bool_t transicion = FALSE;
1a000452:	2300      	movs	r3, #0
1a000454:	f88d 3007 	strb.w	r3, [sp, #7]
	button_state_tecla_1 = my_ButtonInit();
1a000458:	f000 f84e 	bl	1a0004f8 <my_ButtonInit>
1a00045c:	4607      	mov	r7, r0
	button_state_tecla_2 = my_ButtonInit();
1a00045e:	f000 f84b 	bl	1a0004f8 <my_ButtonInit>
1a000462:	4606      	mov	r6, r0
	button_state_tecla_3 = my_ButtonInit();
1a000464:	f000 f848 	bl	1a0004f8 <my_ButtonInit>
1a000468:	4605      	mov	r5, r0
	button_state_tecla_4 = my_ButtonInit();
1a00046a:	f000 f845 	bl	1a0004f8 <my_ButtonInit>
1a00046e:	4604      	mov	r4, r0
	      if( delayRead(&actualizar_boton) ) {
1a000470:	a802      	add	r0, sp, #8
1a000472:	f001 fb7d 	bl	1a001b70 <delayRead>
1a000476:	2800      	cmp	r0, #0
1a000478:	d0fa      	beq.n	1a000470 <main+0x30>
	         my_ButtonUpdate(MY_GPIO_TEC1, &transicion);
1a00047a:	f10d 0107 	add.w	r1, sp, #7
1a00047e:	2006      	movs	r0, #6
1a000480:	f000 f840 	bl	1a000504 <my_ButtonUpdate>
	         if(transicion == TRUE) {
1a000484:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a000488:	2b01      	cmp	r3, #1
1a00048a:	d01f      	beq.n	1a0004cc <main+0x8c>
	         my_ButtonUpdate(MY_GPIO_TEC2, &transicion);
1a00048c:	f10d 0107 	add.w	r1, sp, #7
1a000490:	2007      	movs	r0, #7
1a000492:	f000 f837 	bl	1a000504 <my_ButtonUpdate>
	         if(transicion == TRUE) {
1a000496:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a00049a:	2b01      	cmp	r3, #1
1a00049c:	d01b      	beq.n	1a0004d6 <main+0x96>
	         my_ButtonUpdate(MY_GPIO_TEC3, &transicion);
1a00049e:	f10d 0107 	add.w	r1, sp, #7
1a0004a2:	2008      	movs	r0, #8
1a0004a4:	f000 f82e 	bl	1a000504 <my_ButtonUpdate>
	         if(transicion == TRUE) {
1a0004a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a0004ac:	2b01      	cmp	r3, #1
1a0004ae:	d017      	beq.n	1a0004e0 <main+0xa0>
	         my_ButtonUpdate(MY_GPIO_TEC4, &transicion);
1a0004b0:	f10d 0107 	add.w	r1, sp, #7
1a0004b4:	2009      	movs	r0, #9
1a0004b6:	f000 f825 	bl	1a000504 <my_ButtonUpdate>
	         if(transicion == TRUE) {
1a0004ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a0004be:	2b01      	cmp	r3, #1
1a0004c0:	d1d6      	bne.n	1a000470 <main+0x30>
	        	my_PrintChar(MY_GPIO_TEC4, button_state_tecla_4);
1a0004c2:	4621      	mov	r1, r4
1a0004c4:	2009      	movs	r0, #9
1a0004c6:	f7ff ff89 	bl	1a0003dc <my_PrintChar>
1a0004ca:	e7d1      	b.n	1a000470 <main+0x30>
	        	my_PrintChar(MY_GPIO_TEC1, button_state_tecla_1);
1a0004cc:	4639      	mov	r1, r7
1a0004ce:	2006      	movs	r0, #6
1a0004d0:	f7ff ff84 	bl	1a0003dc <my_PrintChar>
1a0004d4:	e7da      	b.n	1a00048c <main+0x4c>
	        	my_PrintChar(MY_GPIO_TEC2, button_state_tecla_2);
1a0004d6:	4631      	mov	r1, r6
1a0004d8:	2007      	movs	r0, #7
1a0004da:	f7ff ff7f 	bl	1a0003dc <my_PrintChar>
1a0004de:	e7de      	b.n	1a00049e <main+0x5e>
	        	my_PrintChar(MY_GPIO_TEC3, button_state_tecla_3);
1a0004e0:	4629      	mov	r1, r5
1a0004e2:	2008      	movs	r0, #8
1a0004e4:	f7ff ff7a 	bl	1a0003dc <my_PrintChar>
1a0004e8:	e7e2      	b.n	1a0004b0 <main+0x70>
1a0004ea:	Address 0x000000001a0004ea is out of bounds.


1a0004ec <my_ButtonError>:

my_ButtonState_t buttonState;

my_ButtonState_t my_ButtonError( void )
{
	buttonState = BUTTON_UP;
1a0004ec:	4b01      	ldr	r3, [pc, #4]	; (1a0004f4 <my_ButtonError+0x8>)
1a0004ee:	2200      	movs	r2, #0
1a0004f0:	701a      	strb	r2, [r3, #0]
}
1a0004f2:	4770      	bx	lr
1a0004f4:	10000178 	.word	0x10000178

1a0004f8 <my_ButtonInit>:

my_ButtonState_t my_ButtonInit( void )
{
	buttonState = BUTTON_UP;
1a0004f8:	4b01      	ldr	r3, [pc, #4]	; (1a000500 <my_ButtonInit+0x8>)
1a0004fa:	2200      	movs	r2, #0
1a0004fc:	701a      	strb	r2, [r3, #0]
}
1a0004fe:	4770      	bx	lr
1a000500:	10000178 	.word	0x10000178

1a000504 <my_ButtonUpdate>:

void my_ButtonUpdate( my_gpio_map_t tecla, bool_t * transicion )
{
1a000504:	b510      	push	{r4, lr}
1a000506:	460c      	mov	r4, r1

   switch( buttonState )	{
1a000508:	4b1c      	ldr	r3, [pc, #112]	; (1a00057c <my_ButtonUpdate+0x78>)
1a00050a:	781b      	ldrb	r3, [r3, #0]
1a00050c:	2b03      	cmp	r3, #3
1a00050e:	d831      	bhi.n	1a000574 <my_ButtonUpdate+0x70>
1a000510:	e8df f003 	tbb	[pc, r3]
1a000514:	21140b02 	.word	0x21140b02

      case STATE_BUTTON_UP:
         /* CHECK TRANSITION CONDITIONS */
         if( !my_gpio_read(tecla) ){
1a000518:	f7ff feff 	bl	1a00031a <my_gpio_read>
1a00051c:	b910      	cbnz	r0, 1a000524 <my_ButtonUpdate+0x20>
            buttonState = STATE_BUTTON_FALLING;
1a00051e:	4b17      	ldr	r3, [pc, #92]	; (1a00057c <my_ButtonUpdate+0x78>)
1a000520:	2202      	movs	r2, #2
1a000522:	701a      	strb	r2, [r3, #0]
         }

         *transicion = FALSE;
1a000524:	2300      	movs	r3, #0
1a000526:	7023      	strb	r3, [r4, #0]

      default:
         my_ButtonError();
      break;
   }
}
1a000528:	bd10      	pop	{r4, pc}
         if( my_gpio_read(tecla) ){
1a00052a:	f7ff fef6 	bl	1a00031a <my_gpio_read>
1a00052e:	b110      	cbz	r0, 1a000536 <my_ButtonUpdate+0x32>
            buttonState = STATE_BUTTON_RISING;
1a000530:	4b12      	ldr	r3, [pc, #72]	; (1a00057c <my_ButtonUpdate+0x78>)
1a000532:	2203      	movs	r2, #3
1a000534:	701a      	strb	r2, [r3, #0]
         *transicion = FALSE;
1a000536:	2300      	movs	r3, #0
1a000538:	7023      	strb	r3, [r4, #0]
         break;
1a00053a:	e7f5      	b.n	1a000528 <my_ButtonUpdate+0x24>
    	  if( !my_gpio_read(tecla) ){
1a00053c:	f7ff feed 	bl	1a00031a <my_gpio_read>
1a000540:	b920      	cbnz	r0, 1a00054c <my_ButtonUpdate+0x48>
                buttonState = STATE_BUTTON_DOWN;
1a000542:	2301      	movs	r3, #1
1a000544:	4a0d      	ldr	r2, [pc, #52]	; (1a00057c <my_ButtonUpdate+0x78>)
1a000546:	7013      	strb	r3, [r2, #0]
                *transicion = TRUE;
1a000548:	7023      	strb	r3, [r4, #0]
1a00054a:	e7ed      	b.n	1a000528 <my_ButtonUpdate+0x24>
                buttonState =  STATE_BUTTON_UP;
1a00054c:	2300      	movs	r3, #0
1a00054e:	4a0b      	ldr	r2, [pc, #44]	; (1a00057c <my_ButtonUpdate+0x78>)
1a000550:	7013      	strb	r3, [r2, #0]
                *transicion = FALSE;
1a000552:	7023      	strb	r3, [r4, #0]
1a000554:	e7e8      	b.n	1a000528 <my_ButtonUpdate+0x24>
    	  if( my_gpio_read(tecla) ){
1a000556:	f7ff fee0 	bl	1a00031a <my_gpio_read>
1a00055a:	b128      	cbz	r0, 1a000568 <my_ButtonUpdate+0x64>
                buttonState = STATE_BUTTON_UP;
1a00055c:	4b07      	ldr	r3, [pc, #28]	; (1a00057c <my_ButtonUpdate+0x78>)
1a00055e:	2200      	movs	r2, #0
1a000560:	701a      	strb	r2, [r3, #0]
                *transicion = TRUE;
1a000562:	2301      	movs	r3, #1
1a000564:	7023      	strb	r3, [r4, #0]
1a000566:	e7df      	b.n	1a000528 <my_ButtonUpdate+0x24>
                buttonState = STATE_BUTTON_DOWN;
1a000568:	4b04      	ldr	r3, [pc, #16]	; (1a00057c <my_ButtonUpdate+0x78>)
1a00056a:	2201      	movs	r2, #1
1a00056c:	701a      	strb	r2, [r3, #0]
                *transicion = FALSE;
1a00056e:	2300      	movs	r3, #0
1a000570:	7023      	strb	r3, [r4, #0]
1a000572:	e7d9      	b.n	1a000528 <my_ButtonUpdate+0x24>
         my_ButtonError();
1a000574:	f7ff ffba 	bl	1a0004ec <my_ButtonError>
}
1a000578:	e7d6      	b.n	1a000528 <my_ButtonUpdate+0x24>
1a00057a:	bf00      	nop
1a00057c:	10000178 	.word	0x10000178

1a000580 <initialise_monitor_handles>:
}
1a000580:	4770      	bx	lr
1a000582:	Address 0x000000001a000582 is out of bounds.


1a000584 <Reset_Handler>:
void Reset_Handler(void) {
1a000584:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a000586:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a000588:	4b19      	ldr	r3, [pc, #100]	; (1a0005f0 <Reset_Handler+0x6c>)
1a00058a:	4a1a      	ldr	r2, [pc, #104]	; (1a0005f4 <Reset_Handler+0x70>)
1a00058c:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a00058e:	3304      	adds	r3, #4
1a000590:	4a19      	ldr	r2, [pc, #100]	; (1a0005f8 <Reset_Handler+0x74>)
1a000592:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000594:	2300      	movs	r3, #0
1a000596:	e005      	b.n	1a0005a4 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a000598:	4a18      	ldr	r2, [pc, #96]	; (1a0005fc <Reset_Handler+0x78>)
1a00059a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a00059e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0005a2:	3301      	adds	r3, #1
1a0005a4:	2b07      	cmp	r3, #7
1a0005a6:	d9f7      	bls.n	1a000598 <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a0005a8:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a0005aa:	4b15      	ldr	r3, [pc, #84]	; (1a000600 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a0005ac:	e007      	b.n	1a0005be <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a0005ae:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a0005b2:	689a      	ldr	r2, [r3, #8]
1a0005b4:	6859      	ldr	r1, [r3, #4]
1a0005b6:	6818      	ldr	r0, [r3, #0]
1a0005b8:	f7ff fde7 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a0005bc:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a0005be:	4a11      	ldr	r2, [pc, #68]	; (1a000604 <Reset_Handler+0x80>)
1a0005c0:	4293      	cmp	r3, r2
1a0005c2:	d3f4      	bcc.n	1a0005ae <Reset_Handler+0x2a>
1a0005c4:	e006      	b.n	1a0005d4 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a0005c6:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a0005c8:	6859      	ldr	r1, [r3, #4]
1a0005ca:	f854 0b08 	ldr.w	r0, [r4], #8
1a0005ce:	f7ff fdeb 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a0005d2:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a0005d4:	4a0c      	ldr	r2, [pc, #48]	; (1a000608 <Reset_Handler+0x84>)
1a0005d6:	4293      	cmp	r3, r2
1a0005d8:	d3f5      	bcc.n	1a0005c6 <Reset_Handler+0x42>
    SystemInit();
1a0005da:	f000 ff15 	bl	1a001408 <SystemInit>
    __libc_init_array();
1a0005de:	f001 fe65 	bl	1a0022ac <__libc_init_array>
    initialise_monitor_handles();
1a0005e2:	f7ff ffcd 	bl	1a000580 <initialise_monitor_handles>
    main();
1a0005e6:	f7ff ff2b 	bl	1a000440 <main>
        __asm__ volatile("wfi");
1a0005ea:	bf30      	wfi
1a0005ec:	e7fd      	b.n	1a0005ea <Reset_Handler+0x66>
1a0005ee:	bf00      	nop
1a0005f0:	40053100 	.word	0x40053100
1a0005f4:	10df1000 	.word	0x10df1000
1a0005f8:	01dff7ff 	.word	0x01dff7ff
1a0005fc:	e000e280 	.word	0xe000e280
1a000600:	1a000114 	.word	0x1a000114
1a000604:	1a000150 	.word	0x1a000150
1a000608:	1a000178 	.word	0x1a000178

1a00060c <_fini>:
void _fini(void) {}
1a00060c:	4770      	bx	lr

1a00060e <_init>:
void _init(void) {}
1a00060e:	4770      	bx	lr

1a000610 <_close_r>:
   (void) __params__;
}

USED int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a000610:	2309      	movs	r3, #9
1a000612:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000614:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000618:	4770      	bx	lr

1a00061a <_fstat_r>:
}

USED int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a00061a:	2358      	movs	r3, #88	; 0x58
1a00061c:	6003      	str	r3, [r0, #0]
   return -1;
}
1a00061e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000622:	4770      	bx	lr

1a000624 <_isatty_r>:
   UNUSED(r);
   return 1;
}

USED int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a000624:	2902      	cmp	r1, #2
1a000626:	d904      	bls.n	1a000632 <_isatty_r+0xe>
   case 0:
   case 1:
   case 2:
       return 1;
   default:
       SET_ERR(EBADF);
1a000628:	2309      	movs	r3, #9
1a00062a:	6003      	str	r3, [r0, #0]
       return -1;
1a00062c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000630:	4770      	bx	lr
       return 1;
1a000632:	2001      	movs	r0, #1
   }
}
1a000634:	4770      	bx	lr

1a000636 <_lseek_r>:

USED _off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a000636:	2358      	movs	r3, #88	; 0x58
1a000638:	6003      	str	r3, [r0, #0]
   return -1;
}
1a00063a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00063e:	4770      	bx	lr

1a000640 <_read_r>:
   }
}
*/
USED _ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
  size_t i = 0;
  switch (fd) {
1a000640:	2902      	cmp	r1, #2
1a000642:	d81f      	bhi.n	1a000684 <_read_r+0x44>
USED _ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a000644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000648:	461d      	mov	r5, r3
1a00064a:	4617      	mov	r7, r2
1a00064c:	4606      	mov	r6, r0
  size_t i = 0;
1a00064e:	2400      	movs	r4, #0
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a000650:	42ac      	cmp	r4, r5
1a000652:	d211      	bcs.n	1a000678 <_read_r+0x38>
         int c = __stdio_getchar();
1a000654:	f000 f92f 	bl	1a0008b6 <__stdio_getchar>
         if( c != -1 ){
1a000658:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a00065c:	d0f8      	beq.n	1a000650 <_read_r+0x10>
            ((char*) b)[i++] = (char) c;
1a00065e:	f104 0801 	add.w	r8, r4, #1
1a000662:	5538      	strb	r0, [r7, r4]
            if( c == '\r' || c == '\n' ){
1a000664:	280d      	cmp	r0, #13
1a000666:	d003      	beq.n	1a000670 <_read_r+0x30>
1a000668:	280a      	cmp	r0, #10
1a00066a:	d001      	beq.n	1a000670 <_read_r+0x30>
            ((char*) b)[i++] = (char) c;
1a00066c:	4644      	mov	r4, r8
1a00066e:	e7ef      	b.n	1a000650 <_read_r+0x10>
               // read anotherone to prevent \r\n
               (void) __stdio_getchar();
1a000670:	f000 f921 	bl	1a0008b6 <__stdio_getchar>
               return i;
1a000674:	4640      	mov	r0, r8
1a000676:	e003      	b.n	1a000680 <_read_r+0x40>
            }
         }
      }
      SET_ERR(ENODEV);
1a000678:	2313      	movs	r3, #19
1a00067a:	6033      	str	r3, [r6, #0]
      return -1;
1a00067c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  default:
      SET_ERR(ENODEV);
      return -1;
  }
}
1a000680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_ERR(ENODEV);
1a000684:	2313      	movs	r3, #19
1a000686:	6003      	str	r3, [r0, #0]
      return -1;
1a000688:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a00068c:	4770      	bx	lr

1a00068e <_write_r>:
   return -1;
}

USED _ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a00068e:	2902      	cmp	r1, #2
1a000690:	d80c      	bhi.n	1a0006ac <_write_r+0x1e>
USED _ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a000692:	b570      	push	{r4, r5, r6, lr}
1a000694:	461d      	mov	r5, r3
1a000696:	4616      	mov	r6, r2
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a000698:	2400      	movs	r4, #0
1a00069a:	42ac      	cmp	r4, r5
1a00069c:	d204      	bcs.n	1a0006a8 <_write_r+0x1a>
           __stdio_putchar(((char*) b)[i]);
1a00069e:	5d30      	ldrb	r0, [r6, r4]
1a0006a0:	f000 f904 	bl	1a0008ac <__stdio_putchar>
       for (i = 0; i < n; i++)
1a0006a4:	3401      	adds	r4, #1
1a0006a6:	e7f8      	b.n	1a00069a <_write_r+0xc>
       return n;
1a0006a8:	4628      	mov	r0, r5
   default:
       SET_ERR(ENODEV);
       return -1;
   }
}
1a0006aa:	bd70      	pop	{r4, r5, r6, pc}
       SET_ERR(ENODEV);
1a0006ac:	2313      	movs	r3, #19
1a0006ae:	6003      	str	r3, [r0, #0]
       return -1;
1a0006b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a0006b4:	4770      	bx	lr
1a0006b6:	Address 0x000000001a0006b6 is out of bounds.


1a0006b8 <_sbrk_r>:

USED void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a0006b8:	4b05      	ldr	r3, [pc, #20]	; (1a0006d0 <_sbrk_r+0x18>)
1a0006ba:	681b      	ldr	r3, [r3, #0]
1a0006bc:	b123      	cbz	r3, 1a0006c8 <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a0006be:	4b04      	ldr	r3, [pc, #16]	; (1a0006d0 <_sbrk_r+0x18>)
1a0006c0:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a0006c2:	4401      	add	r1, r0
1a0006c4:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a0006c6:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a0006c8:	4b01      	ldr	r3, [pc, #4]	; (1a0006d0 <_sbrk_r+0x18>)
1a0006ca:	4a02      	ldr	r2, [pc, #8]	; (1a0006d4 <_sbrk_r+0x1c>)
1a0006cc:	601a      	str	r2, [r3, #0]
1a0006ce:	e7f6      	b.n	1a0006be <_sbrk_r+0x6>
1a0006d0:	10000138 	.word	0x10000138
1a0006d4:	10000190 	.word	0x10000190

1a0006d8 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0006d8:	2200      	movs	r2, #0
1a0006da:	2a05      	cmp	r2, #5
1a0006dc:	d819      	bhi.n	1a000712 <Board_LED_Init+0x3a>
{
1a0006de:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a0006e0:	490c      	ldr	r1, [pc, #48]	; (1a000714 <Board_LED_Init+0x3c>)
1a0006e2:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a0006e6:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a0006ea:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a0006ec:	4b0a      	ldr	r3, [pc, #40]	; (1a000718 <Board_LED_Init+0x40>)
1a0006ee:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a0006f2:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a0006f6:	2001      	movs	r0, #1
1a0006f8:	40a0      	lsls	r0, r4
1a0006fa:	4301      	orrs	r1, r0
1a0006fc:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a000700:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a000704:	2100      	movs	r1, #0
1a000706:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a000708:	3201      	adds	r2, #1
1a00070a:	2a05      	cmp	r2, #5
1a00070c:	d9e8      	bls.n	1a0006e0 <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a00070e:	bc70      	pop	{r4, r5, r6}
1a000710:	4770      	bx	lr
1a000712:	4770      	bx	lr
1a000714:	1a002880 	.word	0x1a002880
1a000718:	400f4000 	.word	0x400f4000

1a00071c <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a00071c:	2300      	movs	r3, #0
1a00071e:	2b03      	cmp	r3, #3
1a000720:	d816      	bhi.n	1a000750 <Board_TEC_Init+0x34>
{
1a000722:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a000724:	490b      	ldr	r1, [pc, #44]	; (1a000754 <Board_TEC_Init+0x38>)
1a000726:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a00072a:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a00072e:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a000730:	4c09      	ldr	r4, [pc, #36]	; (1a000758 <Board_TEC_Init+0x3c>)
1a000732:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a000736:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a00073a:	2001      	movs	r0, #1
1a00073c:	40a8      	lsls	r0, r5
1a00073e:	ea21 0100 	bic.w	r1, r1, r0
1a000742:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a000746:	3301      	adds	r3, #1
1a000748:	2b03      	cmp	r3, #3
1a00074a:	d9eb      	bls.n	1a000724 <Board_TEC_Init+0x8>
   }
}
1a00074c:	bc30      	pop	{r4, r5}
1a00074e:	4770      	bx	lr
1a000750:	4770      	bx	lr
1a000752:	bf00      	nop
1a000754:	1a002878 	.word	0x1a002878
1a000758:	400f4000 	.word	0x400f4000

1a00075c <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a00075c:	2300      	movs	r3, #0
1a00075e:	2b08      	cmp	r3, #8
1a000760:	d816      	bhi.n	1a000790 <Board_GPIO_Init+0x34>
{
1a000762:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a000764:	490b      	ldr	r1, [pc, #44]	; (1a000794 <Board_GPIO_Init+0x38>)
1a000766:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a00076a:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a00076e:	784d      	ldrb	r5, [r1, #1]
1a000770:	4c09      	ldr	r4, [pc, #36]	; (1a000798 <Board_GPIO_Init+0x3c>)
1a000772:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a000776:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a00077a:	2001      	movs	r0, #1
1a00077c:	40a8      	lsls	r0, r5
1a00077e:	ea21 0100 	bic.w	r1, r1, r0
1a000782:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a000786:	3301      	adds	r3, #1
1a000788:	2b08      	cmp	r3, #8
1a00078a:	d9eb      	bls.n	1a000764 <Board_GPIO_Init+0x8>
   }
}
1a00078c:	bc30      	pop	{r4, r5}
1a00078e:	4770      	bx	lr
1a000790:	4770      	bx	lr
1a000792:	bf00      	nop
1a000794:	1a00288c 	.word	0x1a00288c
1a000798:	400f4000 	.word	0x400f4000

1a00079c <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a00079c:	b510      	push	{r4, lr}
1a00079e:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a0007a0:	4c08      	ldr	r4, [pc, #32]	; (1a0007c4 <Board_ADC_Init+0x28>)
1a0007a2:	4669      	mov	r1, sp
1a0007a4:	4620      	mov	r0, r4
1a0007a6:	f000 f9d9 	bl	1a000b5c <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a0007aa:	4a07      	ldr	r2, [pc, #28]	; (1a0007c8 <Board_ADC_Init+0x2c>)
1a0007ac:	4669      	mov	r1, sp
1a0007ae:	4620      	mov	r0, r4
1a0007b0:	f000 f9f4 	bl	1a000b9c <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a0007b4:	2200      	movs	r2, #0
1a0007b6:	4669      	mov	r1, sp
1a0007b8:	4620      	mov	r0, r4
1a0007ba:	f000 fa08 	bl	1a000bce <Chip_ADC_SetResolution>
}
1a0007be:	b002      	add	sp, #8
1a0007c0:	bd10      	pop	{r4, pc}
1a0007c2:	bf00      	nop
1a0007c4:	400e3000 	.word	0x400e3000
1a0007c8:	00061a80 	.word	0x00061a80

1a0007cc <Board_SPI_Init>:
{
1a0007cc:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a0007ce:	4c0b      	ldr	r4, [pc, #44]	; (1a0007fc <Board_SPI_Init+0x30>)
1a0007d0:	4620      	mov	r0, r4
1a0007d2:	f000 fdbf 	bl	1a001354 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a0007d6:	6863      	ldr	r3, [r4, #4]
1a0007d8:	f023 0304 	bic.w	r3, r3, #4
1a0007dc:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a0007de:	6823      	ldr	r3, [r4, #0]
1a0007e0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0007e4:	f043 0307 	orr.w	r3, r3, #7
1a0007e8:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a0007ea:	4905      	ldr	r1, [pc, #20]	; (1a000800 <Board_SPI_Init+0x34>)
1a0007ec:	4620      	mov	r0, r4
1a0007ee:	f000 fd92 	bl	1a001316 <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a0007f2:	6863      	ldr	r3, [r4, #4]
1a0007f4:	f043 0302 	orr.w	r3, r3, #2
1a0007f8:	6063      	str	r3, [r4, #4]
}
1a0007fa:	bd10      	pop	{r4, pc}
1a0007fc:	400c5000 	.word	0x400c5000
1a000800:	000186a0 	.word	0x000186a0

1a000804 <Board_I2C_Init>:
{
1a000804:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a000806:	2000      	movs	r0, #0
1a000808:	f000 fdd0 	bl	1a0013ac <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a00080c:	4b04      	ldr	r3, [pc, #16]	; (1a000820 <Board_I2C_Init+0x1c>)
1a00080e:	f640 0208 	movw	r2, #2056	; 0x808
1a000812:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a000816:	4903      	ldr	r1, [pc, #12]	; (1a000824 <Board_I2C_Init+0x20>)
1a000818:	2000      	movs	r0, #0
1a00081a:	f000 fdd9 	bl	1a0013d0 <Chip_I2C_SetClockRate>
}
1a00081e:	bd08      	pop	{r3, pc}
1a000820:	40086000 	.word	0x40086000
1a000824:	000f4240 	.word	0x000f4240

1a000828 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a000828:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a00082a:	4c07      	ldr	r4, [pc, #28]	; (1a000848 <Board_Debug_Init+0x20>)
1a00082c:	4620      	mov	r0, r4
1a00082e:	f000 f8b9 	bl	1a0009a4 <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a000832:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a000836:	4620      	mov	r0, r4
1a000838:	f000 f8fe 	bl	1a000a38 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a00083c:	2303      	movs	r3, #3
1a00083e:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a000840:	2301      	movs	r3, #1
1a000842:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a000844:	bd10      	pop	{r4, pc}
1a000846:	bf00      	nop
1a000848:	400c1000 	.word	0x400c1000

1a00084c <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a00084c:	4b03      	ldr	r3, [pc, #12]	; (1a00085c <Board_UARTPutChar+0x10>)
1a00084e:	695b      	ldr	r3, [r3, #20]


void Board_UARTPutChar(char ch)
{
   while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a000850:	f013 0f20 	tst.w	r3, #32
1a000854:	d0fa      	beq.n	1a00084c <Board_UARTPutChar>
	pUART->THR = (uint32_t) data;
1a000856:	4b01      	ldr	r3, [pc, #4]	; (1a00085c <Board_UARTPutChar+0x10>)
1a000858:	6018      	str	r0, [r3, #0]
   Chip_UART_SendByte(DEBUG_UART, (uint8_t) ch);
}
1a00085a:	4770      	bx	lr
1a00085c:	400c1000 	.word	0x400c1000

1a000860 <Board_UARTGetChar>:
	return pUART->LSR;
1a000860:	4b05      	ldr	r3, [pc, #20]	; (1a000878 <Board_UARTGetChar+0x18>)
1a000862:	695b      	ldr	r3, [r3, #20]


int Board_UARTGetChar(void)
{
   if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a000864:	f013 0f01 	tst.w	r3, #1
1a000868:	d003      	beq.n	1a000872 <Board_UARTGetChar+0x12>
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a00086a:	4b03      	ldr	r3, [pc, #12]	; (1a000878 <Board_UARTGetChar+0x18>)
1a00086c:	6818      	ldr	r0, [r3, #0]
      return (int) Chip_UART_ReadByte(DEBUG_UART);
1a00086e:	b2c0      	uxtb	r0, r0
1a000870:	4770      	bx	lr
   }
   return EOF;
1a000872:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a000876:	4770      	bx	lr
1a000878:	400c1000 	.word	0x400c1000

1a00087c <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a00087c:	b508      	push	{r3, lr}
   DEBUGINIT();
1a00087e:	f7ff ffd3 	bl	1a000828 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a000882:	4809      	ldr	r0, [pc, #36]	; (1a0008a8 <Board_Init+0x2c>)
1a000884:	f000 fd26 	bl	1a0012d4 <Chip_GPIO_Init>

   Board_GPIO_Init();
1a000888:	f7ff ff68 	bl	1a00075c <Board_GPIO_Init>
   Board_ADC_Init();
1a00088c:	f7ff ff86 	bl	1a00079c <Board_ADC_Init>
   Board_SPI_Init();
1a000890:	f7ff ff9c 	bl	1a0007cc <Board_SPI_Init>
   Board_I2C_Init();
1a000894:	f7ff ffb6 	bl	1a000804 <Board_I2C_Init>

   Board_LED_Init();
1a000898:	f7ff ff1e 	bl	1a0006d8 <Board_LED_Init>
   Board_TEC_Init();
1a00089c:	f7ff ff3e 	bl	1a00071c <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a0008a0:	f000 f99c 	bl	1a000bdc <SystemCoreClockUpdate>
}
1a0008a4:	bd08      	pop	{r3, pc}
1a0008a6:	bf00      	nop
1a0008a8:	400f4000 	.word	0x400f4000

1a0008ac <__stdio_putchar>:
   curADCChannel = 0xFF;
   return data;
}

void __stdio_putchar(int c)
{
1a0008ac:	b508      	push	{r3, lr}
   Board_UARTPutChar(c);
1a0008ae:	b2c0      	uxtb	r0, r0
1a0008b0:	f7ff ffcc 	bl	1a00084c <Board_UARTPutChar>
}
1a0008b4:	bd08      	pop	{r3, pc}

1a0008b6 <__stdio_getchar>:

int __stdio_getchar()
{
1a0008b6:	b508      	push	{r3, lr}
   return Board_UARTGetChar();;
1a0008b8:	f7ff ffd2 	bl	1a000860 <Board_UARTGetChar>
}
1a0008bc:	bd08      	pop	{r3, pc}

1a0008be <__stdio_init>:

void __stdio_init()
{
1a0008be:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a0008c0:	f7ff ffb2 	bl	1a000828 <Board_Debug_Init>
1a0008c4:	bd08      	pop	{r3, pc}
1a0008c6:	Address 0x000000001a0008c6 is out of bounds.


1a0008c8 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a0008c8:	2300      	movs	r3, #0
1a0008ca:	2b1c      	cmp	r3, #28
1a0008cc:	d812      	bhi.n	1a0008f4 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a0008ce:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a0008d0:	4a09      	ldr	r2, [pc, #36]	; (1a0008f8 <Board_SetupMuxing+0x30>)
1a0008d2:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a0008d6:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a0008da:	784a      	ldrb	r2, [r1, #1]
1a0008dc:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0008de:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a0008e2:	4906      	ldr	r1, [pc, #24]	; (1a0008fc <Board_SetupMuxing+0x34>)
1a0008e4:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a0008e8:	3301      	adds	r3, #1
1a0008ea:	2b1c      	cmp	r3, #28
1a0008ec:	d9f0      	bls.n	1a0008d0 <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a0008ee:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0008f2:	4770      	bx	lr
1a0008f4:	4770      	bx	lr
1a0008f6:	bf00      	nop
1a0008f8:	1a0028a8 	.word	0x1a0028a8
1a0008fc:	40086000 	.word	0x40086000

1a000900 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a000900:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a000902:	4a17      	ldr	r2, [pc, #92]	; (1a000960 <Board_SetupClocking+0x60>)
1a000904:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a000908:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a00090c:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000910:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a000914:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a000918:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a00091c:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000920:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a000924:	2201      	movs	r2, #1
1a000926:	490f      	ldr	r1, [pc, #60]	; (1a000964 <Board_SetupClocking+0x64>)
1a000928:	2006      	movs	r0, #6
1a00092a:	f000 fc27 	bl	1a00117c <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a00092e:	2400      	movs	r4, #0
1a000930:	b14c      	cbz	r4, 1a000946 <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a000932:	4b0b      	ldr	r3, [pc, #44]	; (1a000960 <Board_SetupClocking+0x60>)
1a000934:	685a      	ldr	r2, [r3, #4]
1a000936:	f022 020c 	bic.w	r2, r2, #12
1a00093a:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a00093c:	685a      	ldr	r2, [r3, #4]
1a00093e:	f042 0203 	orr.w	r2, r2, #3
1a000942:	605a      	str	r2, [r3, #4]
}
1a000944:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a000946:	4808      	ldr	r0, [pc, #32]	; (1a000968 <Board_SetupClocking+0x68>)
1a000948:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a00094c:	2301      	movs	r3, #1
1a00094e:	788a      	ldrb	r2, [r1, #2]
1a000950:	7849      	ldrb	r1, [r1, #1]
1a000952:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a000956:	f000 fb6d 	bl	1a001034 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a00095a:	3401      	adds	r4, #1
1a00095c:	e7e8      	b.n	1a000930 <Board_SetupClocking+0x30>
1a00095e:	bf00      	nop
1a000960:	40043000 	.word	0x40043000
1a000964:	0c28cb00 	.word	0x0c28cb00
1a000968:	1a0028a4 	.word	0x1a0028a4

1a00096c <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a00096c:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a00096e:	f7ff ffab 	bl	1a0008c8 <Board_SetupMuxing>
    Board_SetupClocking();
1a000972:	f7ff ffc5 	bl	1a000900 <Board_SetupClocking>
}
1a000976:	bd08      	pop	{r3, pc}

1a000978 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a000978:	4b09      	ldr	r3, [pc, #36]	; (1a0009a0 <Chip_UART_GetIndex+0x28>)
1a00097a:	4298      	cmp	r0, r3
1a00097c:	d009      	beq.n	1a000992 <Chip_UART_GetIndex+0x1a>
1a00097e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a000982:	4298      	cmp	r0, r3
1a000984:	d007      	beq.n	1a000996 <Chip_UART_GetIndex+0x1e>
1a000986:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a00098a:	4298      	cmp	r0, r3
1a00098c:	d005      	beq.n	1a00099a <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a00098e:	2000      	movs	r0, #0
1a000990:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a000992:	2002      	movs	r0, #2
1a000994:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a000996:	2003      	movs	r0, #3
1a000998:	4770      	bx	lr
			return 1;
1a00099a:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a00099c:	4770      	bx	lr
1a00099e:	bf00      	nop
1a0009a0:	400c1000 	.word	0x400c1000

1a0009a4 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a0009a4:	b530      	push	{r4, r5, lr}
1a0009a6:	b083      	sub	sp, #12
1a0009a8:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a0009aa:	f7ff ffe5 	bl	1a000978 <Chip_UART_GetIndex>
1a0009ae:	2301      	movs	r3, #1
1a0009b0:	461a      	mov	r2, r3
1a0009b2:	4619      	mov	r1, r3
1a0009b4:	4d0e      	ldr	r5, [pc, #56]	; (1a0009f0 <Chip_UART_Init+0x4c>)
1a0009b6:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a0009ba:	f000 fb81 	bl	1a0010c0 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a0009be:	2307      	movs	r3, #7
1a0009c0:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a0009c2:	2300      	movs	r3, #0
1a0009c4:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a0009c6:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a0009c8:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a0009ca:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a0009cc:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a0009ce:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a0009d0:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a0009d2:	4b08      	ldr	r3, [pc, #32]	; (1a0009f4 <Chip_UART_Init+0x50>)
1a0009d4:	429c      	cmp	r4, r3
1a0009d6:	d006      	beq.n	1a0009e6 <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a0009d8:	2303      	movs	r3, #3
1a0009da:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a0009dc:	2310      	movs	r3, #16
1a0009de:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a0009e0:	9b01      	ldr	r3, [sp, #4]
}
1a0009e2:	b003      	add	sp, #12
1a0009e4:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a0009e6:	2300      	movs	r3, #0
1a0009e8:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a0009ea:	69a3      	ldr	r3, [r4, #24]
1a0009ec:	9301      	str	r3, [sp, #4]
1a0009ee:	e7f3      	b.n	1a0009d8 <Chip_UART_Init+0x34>
1a0009f0:	1a002924 	.word	0x1a002924
1a0009f4:	40082000 	.word	0x40082000

1a0009f8 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a0009f8:	b538      	push	{r3, r4, r5, lr}
1a0009fa:	4605      	mov	r5, r0
1a0009fc:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a0009fe:	f7ff ffbb 	bl	1a000978 <Chip_UART_GetIndex>
1a000a02:	4b0c      	ldr	r3, [pc, #48]	; (1a000a34 <Chip_UART_SetBaud+0x3c>)
1a000a04:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a000a08:	f000 fb92 	bl	1a001130 <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a000a0c:	0123      	lsls	r3, r4, #4
1a000a0e:	fbb0 f3f3 	udiv	r3, r0, r3

	/* High and low halves of the divider */
	divh = div / 256;
	divl = div - (divh * 256);
1a000a12:	b2d9      	uxtb	r1, r3
	pUART->LCR |= UART_LCR_DLAB_EN;
1a000a14:	68ea      	ldr	r2, [r5, #12]
1a000a16:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a000a1a:	60ea      	str	r2, [r5, #12]
	pUART->DLL = (uint32_t) dll;
1a000a1c:	6029      	str	r1, [r5, #0]
	pUART->DLM = (uint32_t) dlm;
1a000a1e:	f3c3 2207 	ubfx	r2, r3, #8, #8
1a000a22:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a000a24:	68ea      	ldr	r2, [r5, #12]
1a000a26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a000a2a:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a000a2c:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a000a30:	0900      	lsrs	r0, r0, #4
1a000a32:	bd38      	pop	{r3, r4, r5, pc}
1a000a34:	1a00291c 	.word	0x1a00291c

1a000a38 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a000a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a000a3c:	b083      	sub	sp, #12
1a000a3e:	9001      	str	r0, [sp, #4]
1a000a40:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a000a42:	f7ff ff99 	bl	1a000978 <Chip_UART_GetIndex>
1a000a46:	4b32      	ldr	r3, [pc, #200]	; (1a000b10 <Chip_UART_SetBaudFDR+0xd8>)
1a000a48:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a000a4c:	f000 fb70 	bl	1a001130 <Chip_Clock_GetRate>
1a000a50:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a000a52:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a000a56:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a000a58:	f04f 0b00 	mov.w	fp, #0
1a000a5c:	46a2      	mov	sl, r4
1a000a5e:	46d9      	mov	r9, fp
	for (m = 1; odiff && m < 16; m++) {
1a000a60:	e02a      	b.n	1a000ab8 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a000a62:	4242      	negs	r2, r0
				div ++;
1a000a64:	1c4b      	adds	r3, r1, #1
1a000a66:	e017      	b.n	1a000a98 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a000a68:	b30a      	cbz	r2, 1a000aae <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a000a6a:	4617      	mov	r7, r2
			sd = d;
1a000a6c:	46ab      	mov	fp, r5
			sm = m;
1a000a6e:	46a2      	mov	sl, r4
			sdiv = div;
1a000a70:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a000a72:	3501      	adds	r5, #1
1a000a74:	42ac      	cmp	r4, r5
1a000a76:	d91e      	bls.n	1a000ab6 <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a000a78:	0933      	lsrs	r3, r6, #4
1a000a7a:	0730      	lsls	r0, r6, #28
1a000a7c:	fba4 0100 	umull	r0, r1, r4, r0
1a000a80:	fb04 1103 	mla	r1, r4, r3, r1
1a000a84:	1962      	adds	r2, r4, r5
1a000a86:	fb08 f202 	mul.w	r2, r8, r2
1a000a8a:	2300      	movs	r3, #0
1a000a8c:	f001 f8d6 	bl	1a001c3c <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a000a90:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a000a92:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a000a94:	2800      	cmp	r0, #0
1a000a96:	dbe4      	blt.n	1a000a62 <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a000a98:	4297      	cmp	r7, r2
1a000a9a:	d3ea      	bcc.n	1a000a72 <Chip_UART_SetBaudFDR+0x3a>
1a000a9c:	2b00      	cmp	r3, #0
1a000a9e:	d0e8      	beq.n	1a000a72 <Chip_UART_SetBaudFDR+0x3a>
1a000aa0:	0c19      	lsrs	r1, r3, #16
1a000aa2:	d1e6      	bne.n	1a000a72 <Chip_UART_SetBaudFDR+0x3a>
1a000aa4:	2b02      	cmp	r3, #2
1a000aa6:	d8df      	bhi.n	1a000a68 <Chip_UART_SetBaudFDR+0x30>
1a000aa8:	2d00      	cmp	r5, #0
1a000aaa:	d0dd      	beq.n	1a000a68 <Chip_UART_SetBaudFDR+0x30>
1a000aac:	e7e1      	b.n	1a000a72 <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a000aae:	4617      	mov	r7, r2
			sd = d;
1a000ab0:	46ab      	mov	fp, r5
			sm = m;
1a000ab2:	46a2      	mov	sl, r4
			sdiv = div;
1a000ab4:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a000ab6:	3401      	adds	r4, #1
1a000ab8:	b11f      	cbz	r7, 1a000ac2 <Chip_UART_SetBaudFDR+0x8a>
1a000aba:	2c0f      	cmp	r4, #15
1a000abc:	d801      	bhi.n	1a000ac2 <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a000abe:	2500      	movs	r5, #0
1a000ac0:	e7d8      	b.n	1a000a74 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a000ac2:	f1b9 0f00 	cmp.w	r9, #0
1a000ac6:	d01e      	beq.n	1a000b06 <Chip_UART_SetBaudFDR+0xce>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a000ac8:	9a01      	ldr	r2, [sp, #4]
1a000aca:	4611      	mov	r1, r2
1a000acc:	68d3      	ldr	r3, [r2, #12]
1a000ace:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a000ad2:	60d3      	str	r3, [r2, #12]
	pUART->DLL = (uint32_t) dll;
1a000ad4:	fa5f f389 	uxtb.w	r3, r9
1a000ad8:	6013      	str	r3, [r2, #0]
	pUART->DLM = (uint32_t) dlm;
1a000ada:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a000ade:	6053      	str	r3, [r2, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a000ae0:	68d3      	ldr	r3, [r2, #12]
1a000ae2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a000ae6:	60d3      	str	r3, [r2, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a000ae8:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a000aec:	b2db      	uxtb	r3, r3
1a000aee:	f00b 020f 	and.w	r2, fp, #15
1a000af2:	4313      	orrs	r3, r2
1a000af4:	628b      	str	r3, [r1, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a000af6:	0933      	lsrs	r3, r6, #4
1a000af8:	fb0a f303 	mul.w	r3, sl, r3
1a000afc:	44da      	add	sl, fp
1a000afe:	fb09 f90a 	mul.w	r9, r9, sl
1a000b02:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a000b06:	4648      	mov	r0, r9
1a000b08:	b003      	add	sp, #12
1a000b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a000b0e:	bf00      	nop
1a000b10:	1a00291c 	.word	0x1a00291c

1a000b14 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a000b14:	4b03      	ldr	r3, [pc, #12]	; (1a000b24 <Chip_ADC_GetClockIndex+0x10>)
1a000b16:	4298      	cmp	r0, r3
1a000b18:	d001      	beq.n	1a000b1e <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a000b1a:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a000b1c:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a000b1e:	2004      	movs	r0, #4
1a000b20:	4770      	bx	lr
1a000b22:	bf00      	nop
1a000b24:	400e4000 	.word	0x400e4000

1a000b28 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a000b28:	b570      	push	{r4, r5, r6, lr}
1a000b2a:	460d      	mov	r5, r1
1a000b2c:	4614      	mov	r4, r2
1a000b2e:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a000b30:	f7ff fff0 	bl	1a000b14 <Chip_ADC_GetClockIndex>
1a000b34:	f000 fafc 	bl	1a001130 <Chip_Clock_GetRate>
	if (burstMode) {
1a000b38:	b155      	cbz	r5, 1a000b50 <getClkDiv+0x28>
		fullAdcRate = adcRate * clks;
1a000b3a:	fb04 f406 	mul.w	r4, r4, r6
	else {
		fullAdcRate = adcRate * getFullConvClk();
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a000b3e:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a000b42:	0064      	lsls	r4, r4, #1
1a000b44:	fbb0 f0f4 	udiv	r0, r0, r4
1a000b48:	b2c0      	uxtb	r0, r0
1a000b4a:	3801      	subs	r0, #1
	return div;
}
1a000b4c:	b2c0      	uxtb	r0, r0
1a000b4e:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * getFullConvClk();
1a000b50:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a000b54:	eb04 0443 	add.w	r4, r4, r3, lsl #1
1a000b58:	e7f1      	b.n	1a000b3e <getClkDiv+0x16>
1a000b5a:	Address 0x000000001a000b5a is out of bounds.


1a000b5c <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a000b5c:	b538      	push	{r3, r4, r5, lr}
1a000b5e:	4605      	mov	r5, r0
1a000b60:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a000b62:	f7ff ffd7 	bl	1a000b14 <Chip_ADC_GetClockIndex>
1a000b66:	2301      	movs	r3, #1
1a000b68:	461a      	mov	r2, r3
1a000b6a:	4619      	mov	r1, r3
1a000b6c:	f000 faa8 	bl	1a0010c0 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a000b70:	2100      	movs	r1, #0
1a000b72:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a000b74:	4a08      	ldr	r2, [pc, #32]	; (1a000b98 <Chip_ADC_Init+0x3c>)
1a000b76:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a000b78:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a000b7a:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a000b7c:	230b      	movs	r3, #11
1a000b7e:	4628      	mov	r0, r5
1a000b80:	f7ff ffd2 	bl	1a000b28 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a000b84:	0200      	lsls	r0, r0, #8
1a000b86:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a000b8a:	7920      	ldrb	r0, [r4, #4]
1a000b8c:	0440      	lsls	r0, r0, #17
1a000b8e:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a000b92:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a000b94:	6028      	str	r0, [r5, #0]
}
1a000b96:	bd38      	pop	{r3, r4, r5, pc}
1a000b98:	00061a80 	.word	0x00061a80

1a000b9c <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a000b9c:	b570      	push	{r4, r5, r6, lr}
1a000b9e:	4605      	mov	r5, r0
1a000ba0:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a000ba2:	6804      	ldr	r4, [r0, #0]
1a000ba4:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a000ba8:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a000bac:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a000bae:	790b      	ldrb	r3, [r1, #4]
1a000bb0:	f1c3 030b 	rsb	r3, r3, #11
1a000bb4:	b2db      	uxtb	r3, r3
1a000bb6:	7949      	ldrb	r1, [r1, #5]
1a000bb8:	f7ff ffb6 	bl	1a000b28 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a000bbc:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a000bc0:	7933      	ldrb	r3, [r6, #4]
1a000bc2:	045b      	lsls	r3, r3, #17
1a000bc4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a000bc8:	4303      	orrs	r3, r0
	pADC->CR = cr;
1a000bca:	602b      	str	r3, [r5, #0]
}
1a000bcc:	bd70      	pop	{r4, r5, r6, pc}

1a000bce <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a000bce:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a000bd0:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a000bd2:	680a      	ldr	r2, [r1, #0]
1a000bd4:	f7ff ffe2 	bl	1a000b9c <Chip_ADC_SetSampleRate>
}
1a000bd8:	bd08      	pop	{r3, pc}
1a000bda:	Address 0x000000001a000bda is out of bounds.


1a000bdc <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a000bdc:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a000bde:	2069      	movs	r0, #105	; 0x69
1a000be0:	f000 faa6 	bl	1a001130 <Chip_Clock_GetRate>
1a000be4:	4b01      	ldr	r3, [pc, #4]	; (1a000bec <SystemCoreClockUpdate+0x10>)
1a000be6:	6018      	str	r0, [r3, #0]
}
1a000be8:	bd08      	pop	{r3, pc}
1a000bea:	bf00      	nop
1a000bec:	1000017c 	.word	0x1000017c

1a000bf0 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000bf0:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a000bf2:	680b      	ldr	r3, [r1, #0]
1a000bf4:	f013 0f80 	tst.w	r3, #128	; 0x80
1a000bf8:	d002      	beq.n	1a000c00 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a000bfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000bfe:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a000c00:	4607      	mov	r7, r0
1a000c02:	2501      	movs	r5, #1
1a000c04:	e03a      	b.n	1a000c7c <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a000c06:	694b      	ldr	r3, [r1, #20]
1a000c08:	fb03 f302 	mul.w	r3, r3, r2
1a000c0c:	fbb3 f3f5 	udiv	r3, r3, r5
1a000c10:	e01c      	b.n	1a000c4c <pll_calc_divs+0x5c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a000c12:	461c      	mov	r4, r3
	if (val < 0)
1a000c14:	ebb0 0c04 	subs.w	ip, r0, r4
1a000c18:	d427      	bmi.n	1a000c6a <pll_calc_divs+0x7a>
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a000c1a:	4567      	cmp	r7, ip
1a000c1c:	d906      	bls.n	1a000c2c <pll_calc_divs+0x3c>
					ppll->nsel = n;
1a000c1e:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a000c20:	1c77      	adds	r7, r6, #1
1a000c22:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a000c24:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a000c26:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a000c28:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a000c2a:	4667      	mov	r7, ip
			for (m = 1; m <= 256; m++) {
1a000c2c:	3201      	adds	r2, #1
1a000c2e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a000c32:	dc1d      	bgt.n	1a000c70 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 6)) {
1a000c34:	680c      	ldr	r4, [r1, #0]
1a000c36:	f014 0f40 	tst.w	r4, #64	; 0x40
1a000c3a:	d0e4      	beq.n	1a000c06 <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a000c3c:	1c73      	adds	r3, r6, #1
1a000c3e:	fa02 fc03 	lsl.w	ip, r2, r3
1a000c42:	694b      	ldr	r3, [r1, #20]
1a000c44:	fb03 f30c 	mul.w	r3, r3, ip
1a000c48:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a000c4c:	f8df c038 	ldr.w	ip, [pc, #56]	; 1a000c88 <pll_calc_divs+0x98>
1a000c50:	4563      	cmp	r3, ip
1a000c52:	d9eb      	bls.n	1a000c2c <pll_calc_divs+0x3c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a000c54:	f8df c034 	ldr.w	ip, [pc, #52]	; 1a000c8c <pll_calc_divs+0x9c>
1a000c58:	4563      	cmp	r3, ip
1a000c5a:	d809      	bhi.n	1a000c70 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 7)) {
1a000c5c:	f014 0f80 	tst.w	r4, #128	; 0x80
1a000c60:	d1d7      	bne.n	1a000c12 <pll_calc_divs+0x22>
					fout = fcco >> (p + 1);
1a000c62:	1c74      	adds	r4, r6, #1
1a000c64:	fa23 f404 	lsr.w	r4, r3, r4
1a000c68:	e7d4      	b.n	1a000c14 <pll_calc_divs+0x24>
		return -val;
1a000c6a:	f1cc 0c00 	rsb	ip, ip, #0
1a000c6e:	e7d4      	b.n	1a000c1a <pll_calc_divs+0x2a>
		for (p = 0; p < 4; p ++) {
1a000c70:	3601      	adds	r6, #1
1a000c72:	2e03      	cmp	r6, #3
1a000c74:	dc01      	bgt.n	1a000c7a <pll_calc_divs+0x8a>
			for (m = 1; m <= 256; m++) {
1a000c76:	2201      	movs	r2, #1
1a000c78:	e7d9      	b.n	1a000c2e <pll_calc_divs+0x3e>
	for (n = 1; n <= 4; n++) {
1a000c7a:	3501      	adds	r5, #1
1a000c7c:	2d04      	cmp	r5, #4
1a000c7e:	dc01      	bgt.n	1a000c84 <pll_calc_divs+0x94>
		for (p = 0; p < 4; p ++) {
1a000c80:	2600      	movs	r6, #0
1a000c82:	e7f6      	b.n	1a000c72 <pll_calc_divs+0x82>
				}
			}
		}
	}
}
1a000c84:	bcf0      	pop	{r4, r5, r6, r7}
1a000c86:	4770      	bx	lr
1a000c88:	094c5eff 	.word	0x094c5eff
1a000c8c:	1312d000 	.word	0x1312d000

1a000c90 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000c90:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000c92:	b099      	sub	sp, #100	; 0x64
1a000c94:	4605      	mov	r5, r0
1a000c96:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a000c98:	225c      	movs	r2, #92	; 0x5c
1a000c9a:	2100      	movs	r1, #0
1a000c9c:	a801      	add	r0, sp, #4
1a000c9e:	f001 fb2c 	bl	1a0022fa <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a000ca2:	2380      	movs	r3, #128	; 0x80
1a000ca4:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a000ca6:	6963      	ldr	r3, [r4, #20]
1a000ca8:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a000caa:	7923      	ldrb	r3, [r4, #4]
1a000cac:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a000cb0:	4669      	mov	r1, sp
1a000cb2:	4628      	mov	r0, r5
1a000cb4:	f7ff ff9c 	bl	1a000bf0 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a000cb8:	9b06      	ldr	r3, [sp, #24]
1a000cba:	42ab      	cmp	r3, r5
1a000cbc:	d027      	beq.n	1a000d0e <pll_get_frac+0x7e>
	if (val < 0)
1a000cbe:	1aeb      	subs	r3, r5, r3
1a000cc0:	d42e      	bmi.n	1a000d20 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a000cc2:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a000cc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a000cc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000cca:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a000ccc:	6963      	ldr	r3, [r4, #20]
1a000cce:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a000cd0:	7923      	ldrb	r3, [r4, #4]
1a000cd2:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a000cd6:	a910      	add	r1, sp, #64	; 0x40
1a000cd8:	4628      	mov	r0, r5
1a000cda:	f7ff ff89 	bl	1a000bf0 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a000cde:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a000ce0:	42ab      	cmp	r3, r5
1a000ce2:	d01f      	beq.n	1a000d24 <pll_get_frac+0x94>
	if (val < 0)
1a000ce4:	1aeb      	subs	r3, r5, r3
1a000ce6:	d425      	bmi.n	1a000d34 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a000ce8:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a000cea:	4b2b      	ldr	r3, [pc, #172]	; (1a000d98 <pll_get_frac+0x108>)
1a000cec:	429d      	cmp	r5, r3
1a000cee:	d923      	bls.n	1a000d38 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a000cf0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a000cf2:	1aed      	subs	r5, r5, r3
1a000cf4:	d433      	bmi.n	1a000d5e <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a000cf6:	42ae      	cmp	r6, r5
1a000cf8:	dc3b      	bgt.n	1a000d72 <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a000cfa:	42be      	cmp	r6, r7
1a000cfc:	dc31      	bgt.n	1a000d62 <pll_get_frac+0xd2>
			*ppll = pll[0];
1a000cfe:	466d      	mov	r5, sp
1a000d00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000d02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000d04:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000d08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000d0c:	e006      	b.n	1a000d1c <pll_get_frac+0x8c>
		*ppll = pll[0];
1a000d0e:	466d      	mov	r5, sp
1a000d10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000d12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000d14:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000d18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a000d1c:	b019      	add	sp, #100	; 0x64
1a000d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a000d20:	425b      	negs	r3, r3
1a000d22:	e7ce      	b.n	1a000cc2 <pll_get_frac+0x32>
		*ppll = pll[2];
1a000d24:	ad10      	add	r5, sp, #64	; 0x40
1a000d26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000d28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000d2a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000d2e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a000d32:	e7f3      	b.n	1a000d1c <pll_get_frac+0x8c>
		return -val;
1a000d34:	425b      	negs	r3, r3
1a000d36:	e7d7      	b.n	1a000ce8 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a000d38:	2340      	movs	r3, #64	; 0x40
1a000d3a:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a000d3c:	6963      	ldr	r3, [r4, #20]
1a000d3e:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a000d40:	a908      	add	r1, sp, #32
1a000d42:	4628      	mov	r0, r5
1a000d44:	f7ff ff54 	bl	1a000bf0 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a000d48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a000d4a:	42ab      	cmp	r3, r5
1a000d4c:	d1d0      	bne.n	1a000cf0 <pll_get_frac+0x60>
			*ppll = pll[1];
1a000d4e:	ad08      	add	r5, sp, #32
1a000d50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000d52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000d54:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000d58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a000d5c:	e7de      	b.n	1a000d1c <pll_get_frac+0x8c>
		return -val;
1a000d5e:	426d      	negs	r5, r5
1a000d60:	e7c9      	b.n	1a000cf6 <pll_get_frac+0x66>
			*ppll = pll[2];
1a000d62:	ad10      	add	r5, sp, #64	; 0x40
1a000d64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000d66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000d68:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000d6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000d70:	e7d4      	b.n	1a000d1c <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a000d72:	42af      	cmp	r7, r5
1a000d74:	db07      	blt.n	1a000d86 <pll_get_frac+0xf6>
			*ppll = pll[1];
1a000d76:	ad08      	add	r5, sp, #32
1a000d78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000d7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000d7c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000d80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000d84:	e7ca      	b.n	1a000d1c <pll_get_frac+0x8c>
			*ppll = pll[2];
1a000d86:	ad10      	add	r5, sp, #64	; 0x40
1a000d88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000d8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000d8c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000d90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000d94:	e7c2      	b.n	1a000d1c <pll_get_frac+0x8c>
1a000d96:	bf00      	nop
1a000d98:	068e7780 	.word	0x068e7780

1a000d9c <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a000d9c:	b430      	push	{r4, r5}
1a000d9e:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a000da0:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a000da2:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000da4:	e000      	b.n	1a000da8 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a000da6:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000da8:	281c      	cmp	r0, #28
1a000daa:	d118      	bne.n	1a000dde <Chip_Clock_FindBaseClock+0x42>
1a000dac:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000db0:	0051      	lsls	r1, r2, #1
1a000db2:	4a0c      	ldr	r2, [pc, #48]	; (1a000de4 <Chip_Clock_FindBaseClock+0x48>)
1a000db4:	440a      	add	r2, r1
1a000db6:	7914      	ldrb	r4, [r2, #4]
1a000db8:	4284      	cmp	r4, r0
1a000dba:	d010      	beq.n	1a000dde <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a000dbc:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a000dc0:	004a      	lsls	r2, r1, #1
1a000dc2:	4908      	ldr	r1, [pc, #32]	; (1a000de4 <Chip_Clock_FindBaseClock+0x48>)
1a000dc4:	5a8a      	ldrh	r2, [r1, r2]
1a000dc6:	42aa      	cmp	r2, r5
1a000dc8:	d8ed      	bhi.n	1a000da6 <Chip_Clock_FindBaseClock+0xa>
1a000dca:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000dce:	0051      	lsls	r1, r2, #1
1a000dd0:	4a04      	ldr	r2, [pc, #16]	; (1a000de4 <Chip_Clock_FindBaseClock+0x48>)
1a000dd2:	440a      	add	r2, r1
1a000dd4:	8852      	ldrh	r2, [r2, #2]
1a000dd6:	42aa      	cmp	r2, r5
1a000dd8:	d3e5      	bcc.n	1a000da6 <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a000dda:	4620      	mov	r0, r4
1a000ddc:	e7e4      	b.n	1a000da8 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a000dde:	bc30      	pop	{r4, r5}
1a000de0:	4770      	bx	lr
1a000de2:	bf00      	nop
1a000de4:	1a002938 	.word	0x1a002938

1a000de8 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a000de8:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a000dea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a000dee:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a000df0:	4a0d      	ldr	r2, [pc, #52]	; (1a000e28 <Chip_Clock_EnableCrystal+0x40>)
1a000df2:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a000df4:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a000df8:	6992      	ldr	r2, [r2, #24]
1a000dfa:	428a      	cmp	r2, r1
1a000dfc:	d001      	beq.n	1a000e02 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000dfe:	4a0a      	ldr	r2, [pc, #40]	; (1a000e28 <Chip_Clock_EnableCrystal+0x40>)
1a000e00:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a000e02:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a000e06:	4a09      	ldr	r2, [pc, #36]	; (1a000e2c <Chip_Clock_EnableCrystal+0x44>)
1a000e08:	6811      	ldr	r1, [r2, #0]
1a000e0a:	4a09      	ldr	r2, [pc, #36]	; (1a000e30 <Chip_Clock_EnableCrystal+0x48>)
1a000e0c:	4291      	cmp	r1, r2
1a000e0e:	d901      	bls.n	1a000e14 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a000e10:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000e14:	4a04      	ldr	r2, [pc, #16]	; (1a000e28 <Chip_Clock_EnableCrystal+0x40>)
1a000e16:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a000e18:	9b01      	ldr	r3, [sp, #4]
1a000e1a:	1e5a      	subs	r2, r3, #1
1a000e1c:	9201      	str	r2, [sp, #4]
1a000e1e:	2b00      	cmp	r3, #0
1a000e20:	d1fa      	bne.n	1a000e18 <Chip_Clock_EnableCrystal+0x30>
}
1a000e22:	b002      	add	sp, #8
1a000e24:	4770      	bx	lr
1a000e26:	bf00      	nop
1a000e28:	40050000 	.word	0x40050000
1a000e2c:	1a0028a0 	.word	0x1a0028a0
1a000e30:	01312cff 	.word	0x01312cff

1a000e34 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a000e34:	3012      	adds	r0, #18
1a000e36:	4b05      	ldr	r3, [pc, #20]	; (1a000e4c <Chip_Clock_GetDividerSource+0x18>)
1a000e38:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a000e3c:	f010 0f01 	tst.w	r0, #1
1a000e40:	d102      	bne.n	1a000e48 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a000e42:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a000e46:	4770      	bx	lr
		return CLKINPUT_PD;
1a000e48:	2011      	movs	r0, #17
}
1a000e4a:	4770      	bx	lr
1a000e4c:	40050000 	.word	0x40050000

1a000e50 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a000e50:	f100 0212 	add.w	r2, r0, #18
1a000e54:	4b03      	ldr	r3, [pc, #12]	; (1a000e64 <Chip_Clock_GetDividerDivisor+0x14>)
1a000e56:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a000e5a:	4b03      	ldr	r3, [pc, #12]	; (1a000e68 <Chip_Clock_GetDividerDivisor+0x18>)
1a000e5c:	5c18      	ldrb	r0, [r3, r0]
}
1a000e5e:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a000e62:	4770      	bx	lr
1a000e64:	40050000 	.word	0x40050000
1a000e68:	1a002930 	.word	0x1a002930

1a000e6c <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a000e6c:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a000e6e:	2810      	cmp	r0, #16
1a000e70:	d80a      	bhi.n	1a000e88 <Chip_Clock_GetClockInputHz+0x1c>
1a000e72:	e8df f000 	tbb	[pc, r0]
1a000e76:	0b44      	.short	0x0b44
1a000e78:	0921180d 	.word	0x0921180d
1a000e7c:	2d2a2724 	.word	0x2d2a2724
1a000e80:	34300909 	.word	0x34300909
1a000e84:	3c38      	.short	0x3c38
1a000e86:	40          	.byte	0x40
1a000e87:	00          	.byte	0x00
	uint32_t rate = 0;
1a000e88:	2000      	movs	r0, #0
1a000e8a:	e03a      	b.n	1a000f02 <Chip_Clock_GetClockInputHz+0x96>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a000e8c:	481e      	ldr	r0, [pc, #120]	; (1a000f08 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a000e8e:	e038      	b.n	1a000f02 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a000e90:	4b1e      	ldr	r3, [pc, #120]	; (1a000f0c <Chip_Clock_GetClockInputHz+0xa0>)
1a000e92:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a000e96:	f003 0307 	and.w	r3, r3, #7
1a000e9a:	2b04      	cmp	r3, #4
1a000e9c:	d001      	beq.n	1a000ea2 <Chip_Clock_GetClockInputHz+0x36>
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a000e9e:	481c      	ldr	r0, [pc, #112]	; (1a000f10 <Chip_Clock_GetClockInputHz+0xa4>)
1a000ea0:	e02f      	b.n	1a000f02 <Chip_Clock_GetClockInputHz+0x96>
	uint32_t rate = 0;
1a000ea2:	2000      	movs	r0, #0
1a000ea4:	e02d      	b.n	1a000f02 <Chip_Clock_GetClockInputHz+0x96>
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a000ea6:	4b19      	ldr	r3, [pc, #100]	; (1a000f0c <Chip_Clock_GetClockInputHz+0xa0>)
1a000ea8:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a000eac:	f003 0307 	and.w	r3, r3, #7
1a000eb0:	2b04      	cmp	r3, #4
1a000eb2:	d027      	beq.n	1a000f04 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a000eb4:	4816      	ldr	r0, [pc, #88]	; (1a000f10 <Chip_Clock_GetClockInputHz+0xa4>)
1a000eb6:	e024      	b.n	1a000f02 <Chip_Clock_GetClockInputHz+0x96>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a000eb8:	4b16      	ldr	r3, [pc, #88]	; (1a000f14 <Chip_Clock_GetClockInputHz+0xa8>)
1a000eba:	6818      	ldr	r0, [r3, #0]
		break;
1a000ebc:	e021      	b.n	1a000f02 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a000ebe:	4b16      	ldr	r3, [pc, #88]	; (1a000f18 <Chip_Clock_GetClockInputHz+0xac>)
1a000ec0:	6818      	ldr	r0, [r3, #0]
		break;
1a000ec2:	e01e      	b.n	1a000f02 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a000ec4:	4b15      	ldr	r3, [pc, #84]	; (1a000f1c <Chip_Clock_GetClockInputHz+0xb0>)
1a000ec6:	6818      	ldr	r0, [r3, #0]
		break;
1a000ec8:	e01b      	b.n	1a000f02 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a000eca:	4b14      	ldr	r3, [pc, #80]	; (1a000f1c <Chip_Clock_GetClockInputHz+0xb0>)
1a000ecc:	6858      	ldr	r0, [r3, #4]
		break;
1a000ece:	e018      	b.n	1a000f02 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a000ed0:	f000 f868 	bl	1a000fa4 <Chip_Clock_GetMainPLLHz>
		break;
1a000ed4:	e015      	b.n	1a000f02 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a000ed6:	2100      	movs	r1, #0
1a000ed8:	f000 f89a 	bl	1a001010 <Chip_Clock_GetDivRate>
		break;
1a000edc:	e011      	b.n	1a000f02 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a000ede:	2101      	movs	r1, #1
1a000ee0:	f000 f896 	bl	1a001010 <Chip_Clock_GetDivRate>
		break;
1a000ee4:	e00d      	b.n	1a000f02 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a000ee6:	2102      	movs	r1, #2
1a000ee8:	f000 f892 	bl	1a001010 <Chip_Clock_GetDivRate>
		break;
1a000eec:	e009      	b.n	1a000f02 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a000eee:	2103      	movs	r1, #3
1a000ef0:	f000 f88e 	bl	1a001010 <Chip_Clock_GetDivRate>
		break;
1a000ef4:	e005      	b.n	1a000f02 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a000ef6:	2104      	movs	r1, #4
1a000ef8:	f000 f88a 	bl	1a001010 <Chip_Clock_GetDivRate>
		break;
1a000efc:	e001      	b.n	1a000f02 <Chip_Clock_GetClockInputHz+0x96>
		rate = CRYSTAL_32K_FREQ_IN;
1a000efe:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a000f02:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
1a000f04:	4806      	ldr	r0, [pc, #24]	; (1a000f20 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a000f06:	e7fc      	b.n	1a000f02 <Chip_Clock_GetClockInputHz+0x96>
1a000f08:	00b71b00 	.word	0x00b71b00
1a000f0c:	40043000 	.word	0x40043000
1a000f10:	017d7840 	.word	0x017d7840
1a000f14:	1a002874 	.word	0x1a002874
1a000f18:	1a0028a0 	.word	0x1a0028a0
1a000f1c:	1000013c 	.word	0x1000013c
1a000f20:	02faf080 	.word	0x02faf080

1a000f24 <Chip_Clock_CalcMainPLLValue>:
{
1a000f24:	b538      	push	{r3, r4, r5, lr}
1a000f26:	4605      	mov	r5, r0
1a000f28:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a000f2a:	7908      	ldrb	r0, [r1, #4]
1a000f2c:	f7ff ff9e 	bl	1a000e6c <Chip_Clock_GetClockInputHz>
1a000f30:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a000f32:	4b19      	ldr	r3, [pc, #100]	; (1a000f98 <Chip_Clock_CalcMainPLLValue+0x74>)
1a000f34:	442b      	add	r3, r5
1a000f36:	4a19      	ldr	r2, [pc, #100]	; (1a000f9c <Chip_Clock_CalcMainPLLValue+0x78>)
1a000f38:	4293      	cmp	r3, r2
1a000f3a:	d821      	bhi.n	1a000f80 <Chip_Clock_CalcMainPLLValue+0x5c>
1a000f3c:	b318      	cbz	r0, 1a000f86 <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a000f3e:	2380      	movs	r3, #128	; 0x80
1a000f40:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a000f42:	2300      	movs	r3, #0
1a000f44:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a000f46:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a000f48:	fbb5 f3f0 	udiv	r3, r5, r0
1a000f4c:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a000f4e:	4a14      	ldr	r2, [pc, #80]	; (1a000fa0 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a000f50:	4295      	cmp	r5, r2
1a000f52:	d903      	bls.n	1a000f5c <Chip_Clock_CalcMainPLLValue+0x38>
1a000f54:	fb03 f000 	mul.w	r0, r3, r0
1a000f58:	42a8      	cmp	r0, r5
1a000f5a:	d007      	beq.n	1a000f6c <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a000f5c:	4621      	mov	r1, r4
1a000f5e:	4628      	mov	r0, r5
1a000f60:	f7ff fe96 	bl	1a000c90 <pll_get_frac>
		if (!ppll->nsel) {
1a000f64:	68a3      	ldr	r3, [r4, #8]
1a000f66:	b18b      	cbz	r3, 1a000f8c <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a000f68:	3b01      	subs	r3, #1
1a000f6a:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a000f6c:	6923      	ldr	r3, [r4, #16]
1a000f6e:	b183      	cbz	r3, 1a000f92 <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a000f70:	68e2      	ldr	r2, [r4, #12]
1a000f72:	b10a      	cbz	r2, 1a000f78 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a000f74:	3a01      	subs	r2, #1
1a000f76:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a000f78:	3b01      	subs	r3, #1
1a000f7a:	6123      	str	r3, [r4, #16]
	return 0;
1a000f7c:	2000      	movs	r0, #0
}
1a000f7e:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a000f80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000f84:	e7fb      	b.n	1a000f7e <Chip_Clock_CalcMainPLLValue+0x5a>
1a000f86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000f8a:	e7f8      	b.n	1a000f7e <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a000f8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000f90:	e7f5      	b.n	1a000f7e <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a000f92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000f96:	e7f2      	b.n	1a000f7e <Chip_Clock_CalcMainPLLValue+0x5a>
1a000f98:	ff6b3a10 	.word	0xff6b3a10
1a000f9c:	0b940510 	.word	0x0b940510
1a000fa0:	094c5eff 	.word	0x094c5eff

1a000fa4 <Chip_Clock_GetMainPLLHz>:
{
1a000fa4:	b530      	push	{r4, r5, lr}
1a000fa6:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a000fa8:	4d17      	ldr	r5, [pc, #92]	; (1a001008 <Chip_Clock_GetMainPLLHz+0x64>)
1a000faa:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a000fac:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a000fb0:	f7ff ff5c 	bl	1a000e6c <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a000fb4:	4b15      	ldr	r3, [pc, #84]	; (1a00100c <Chip_Clock_GetMainPLLHz+0x68>)
1a000fb6:	681b      	ldr	r3, [r3, #0]
1a000fb8:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a000fba:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a000fbc:	f013 0f01 	tst.w	r3, #1
1a000fc0:	d020      	beq.n	1a001004 <Chip_Clock_GetMainPLLHz+0x60>
	msel = (PLLReg >> 16) & 0xFF;
1a000fc2:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a000fc6:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a000fca:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a000fce:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a000fd2:	3301      	adds	r3, #1
	n = nsel + 1;
1a000fd4:	3201      	adds	r2, #1
	p = ptab[psel];
1a000fd6:	f10d 0c08 	add.w	ip, sp, #8
1a000fda:	4461      	add	r1, ip
1a000fdc:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a000fe0:	f014 0f80 	tst.w	r4, #128	; 0x80
1a000fe4:	d108      	bne.n	1a000ff8 <Chip_Clock_GetMainPLLHz+0x54>
1a000fe6:	b93d      	cbnz	r5, 1a000ff8 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a000fe8:	0049      	lsls	r1, r1, #1
1a000fea:	fbb3 f3f1 	udiv	r3, r3, r1
1a000fee:	fbb0 f0f2 	udiv	r0, r0, r2
1a000ff2:	fb00 f003 	mul.w	r0, r0, r3
1a000ff6:	e003      	b.n	1a001000 <Chip_Clock_GetMainPLLHz+0x5c>
		return m * (freq / n);
1a000ff8:	fbb0 f0f2 	udiv	r0, r0, r2
1a000ffc:	fb03 f000 	mul.w	r0, r3, r0
}
1a001000:	b003      	add	sp, #12
1a001002:	bd30      	pop	{r4, r5, pc}
		return 0;
1a001004:	2000      	movs	r0, #0
1a001006:	e7fb      	b.n	1a001000 <Chip_Clock_GetMainPLLHz+0x5c>
1a001008:	40050000 	.word	0x40050000
1a00100c:	1a00292c 	.word	0x1a00292c

1a001010 <Chip_Clock_GetDivRate>:
{
1a001010:	b538      	push	{r3, r4, r5, lr}
1a001012:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a001014:	4608      	mov	r0, r1
1a001016:	f7ff ff0d 	bl	1a000e34 <Chip_Clock_GetDividerSource>
1a00101a:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a00101c:	4620      	mov	r0, r4
1a00101e:	f7ff ff17 	bl	1a000e50 <Chip_Clock_GetDividerDivisor>
1a001022:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a001024:	4628      	mov	r0, r5
1a001026:	f7ff ff21 	bl	1a000e6c <Chip_Clock_GetClockInputHz>
1a00102a:	3401      	adds	r4, #1
}
1a00102c:	fbb0 f0f4 	udiv	r0, r0, r4
1a001030:	bd38      	pop	{r3, r4, r5, pc}
1a001032:	Address 0x000000001a001032 is out of bounds.


1a001034 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a001034:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a001036:	f100 0416 	add.w	r4, r0, #22
1a00103a:	00a4      	lsls	r4, r4, #2
1a00103c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a001040:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a001044:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a001046:	281b      	cmp	r0, #27
1a001048:	d813      	bhi.n	1a001072 <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a00104a:	2911      	cmp	r1, #17
1a00104c:	d01a      	beq.n	1a001084 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a00104e:	4d0e      	ldr	r5, [pc, #56]	; (1a001088 <Chip_Clock_SetBaseClock+0x54>)
1a001050:	4025      	ands	r5, r4

			if (autoblocken) {
1a001052:	b10a      	cbz	r2, 1a001058 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a001054:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a001058:	b10b      	cbz	r3, 1a00105e <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a00105a:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a00105e:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a001062:	3016      	adds	r0, #22
1a001064:	0080      	lsls	r0, r0, #2
1a001066:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a00106a:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a00106e:	6045      	str	r5, [r0, #4]
1a001070:	e008      	b.n	1a001084 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a001072:	f044 0401 	orr.w	r4, r4, #1
1a001076:	3016      	adds	r0, #22
1a001078:	0080      	lsls	r0, r0, #2
1a00107a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a00107e:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a001082:	6044      	str	r4, [r0, #4]
	}
}
1a001084:	bc30      	pop	{r4, r5}
1a001086:	4770      	bx	lr
1a001088:	e0fff7fe 	.word	0xe0fff7fe

1a00108c <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a00108c:	281b      	cmp	r0, #27
1a00108e:	d80c      	bhi.n	1a0010aa <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a001090:	3016      	adds	r0, #22
1a001092:	0080      	lsls	r0, r0, #2
1a001094:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a001098:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a00109c:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a00109e:	f010 0f01 	tst.w	r0, #1
1a0010a2:	d104      	bne.n	1a0010ae <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a0010a4:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a0010a8:	4770      	bx	lr
		return CLKINPUT_PD;
1a0010aa:	2011      	movs	r0, #17
1a0010ac:	4770      	bx	lr
		return CLKINPUT_PD;
1a0010ae:	2011      	movs	r0, #17
}
1a0010b0:	4770      	bx	lr

1a0010b2 <Chip_Clock_GetBaseClocktHz>:
{
1a0010b2:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a0010b4:	f7ff ffea 	bl	1a00108c <Chip_Clock_GetBaseClock>
1a0010b8:	f7ff fed8 	bl	1a000e6c <Chip_Clock_GetClockInputHz>
}
1a0010bc:	bd08      	pop	{r3, pc}
1a0010be:	Address 0x000000001a0010be is out of bounds.


1a0010c0 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a0010c0:	b971      	cbnz	r1, 1a0010e0 <Chip_Clock_EnableOpts+0x20>
	uint32_t reg = 1;
1a0010c2:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a0010c4:	b10a      	cbz	r2, 1a0010ca <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a0010c6:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a0010ca:	2b02      	cmp	r3, #2
1a0010cc:	d00a      	beq.n	1a0010e4 <Chip_Clock_EnableOpts+0x24>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a0010ce:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0010d2:	d30a      	bcc.n	1a0010ea <Chip_Clock_EnableOpts+0x2a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a0010d4:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0010d8:	4b06      	ldr	r3, [pc, #24]	; (1a0010f4 <Chip_Clock_EnableOpts+0x34>)
1a0010da:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a0010de:	4770      	bx	lr
		reg |= (1 << 1);
1a0010e0:	2103      	movs	r1, #3
1a0010e2:	e7ef      	b.n	1a0010c4 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a0010e4:	f041 0120 	orr.w	r1, r1, #32
1a0010e8:	e7f1      	b.n	1a0010ce <Chip_Clock_EnableOpts+0xe>
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a0010ea:	3020      	adds	r0, #32
1a0010ec:	4b02      	ldr	r3, [pc, #8]	; (1a0010f8 <Chip_Clock_EnableOpts+0x38>)
1a0010ee:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a0010f2:	4770      	bx	lr
1a0010f4:	40052000 	.word	0x40052000
1a0010f8:	40051000 	.word	0x40051000

1a0010fc <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a0010fc:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001100:	d309      	bcc.n	1a001116 <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a001102:	4a09      	ldr	r2, [pc, #36]	; (1a001128 <Chip_Clock_Enable+0x2c>)
1a001104:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a001108:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a00110c:	f043 0301 	orr.w	r3, r3, #1
1a001110:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a001114:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a001116:	4a05      	ldr	r2, [pc, #20]	; (1a00112c <Chip_Clock_Enable+0x30>)
1a001118:	3020      	adds	r0, #32
1a00111a:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a00111e:	f043 0301 	orr.w	r3, r3, #1
1a001122:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a001126:	4770      	bx	lr
1a001128:	40052000 	.word	0x40052000
1a00112c:	40051000 	.word	0x40051000

1a001130 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a001130:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a001132:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001136:	d309      	bcc.n	1a00114c <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a001138:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a00113c:	4a0d      	ldr	r2, [pc, #52]	; (1a001174 <Chip_Clock_GetRate+0x44>)
1a00113e:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a001142:	f014 0f01 	tst.w	r4, #1
1a001146:	d107      	bne.n	1a001158 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a001148:	2000      	movs	r0, #0
	}

	return rate;
}
1a00114a:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a00114c:	f100 0320 	add.w	r3, r0, #32
1a001150:	4a09      	ldr	r2, [pc, #36]	; (1a001178 <Chip_Clock_GetRate+0x48>)
1a001152:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a001156:	e7f4      	b.n	1a001142 <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a001158:	f7ff fe20 	bl	1a000d9c <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a00115c:	f7ff ffa9 	bl	1a0010b2 <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a001160:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a001164:	d103      	bne.n	1a00116e <Chip_Clock_GetRate+0x3e>
			div = 1;
1a001166:	2301      	movs	r3, #1
		rate = rate / div;
1a001168:	fbb0 f0f3 	udiv	r0, r0, r3
1a00116c:	e7ed      	b.n	1a00114a <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a00116e:	2302      	movs	r3, #2
1a001170:	e7fa      	b.n	1a001168 <Chip_Clock_GetRate+0x38>
1a001172:	bf00      	nop
1a001174:	40052000 	.word	0x40052000
1a001178:	40051000 	.word	0x40051000

1a00117c <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a00117c:	b570      	push	{r4, r5, r6, lr}
1a00117e:	b08a      	sub	sp, #40	; 0x28
1a001180:	4605      	mov	r5, r0
1a001182:	460e      	mov	r6, r1
1a001184:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a001186:	f24c 3350 	movw	r3, #50000	; 0xc350
1a00118a:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a00118c:	2806      	cmp	r0, #6
1a00118e:	d018      	beq.n	1a0011c2 <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a001190:	2300      	movs	r3, #0
1a001192:	2201      	movs	r2, #1
1a001194:	4629      	mov	r1, r5
1a001196:	2004      	movs	r0, #4
1a001198:	f7ff ff4c 	bl	1a001034 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a00119c:	4a4a      	ldr	r2, [pc, #296]	; (1a0012c8 <Chip_SetupCoreClock+0x14c>)
1a00119e:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a0011a0:	f043 0301 	orr.w	r3, r3, #1
1a0011a4:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a0011a6:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a0011aa:	a901      	add	r1, sp, #4
1a0011ac:	4630      	mov	r0, r6
1a0011ae:	f7ff feb9 	bl	1a000f24 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a0011b2:	4b46      	ldr	r3, [pc, #280]	; (1a0012cc <Chip_SetupCoreClock+0x150>)
1a0011b4:	429e      	cmp	r6, r3
1a0011b6:	d916      	bls.n	1a0011e6 <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a0011b8:	9b01      	ldr	r3, [sp, #4]
1a0011ba:	f013 0f40 	tst.w	r3, #64	; 0x40
1a0011be:	d003      	beq.n	1a0011c8 <Chip_SetupCoreClock+0x4c>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a0011c0:	e7fe      	b.n	1a0011c0 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a0011c2:	f7ff fe11 	bl	1a000de8 <Chip_Clock_EnableCrystal>
1a0011c6:	e7e3      	b.n	1a001190 <Chip_SetupCoreClock+0x14>
		} else if (ppll.ctrl & (1 << 7)){
1a0011c8:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0011cc:	d005      	beq.n	1a0011da <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a0011ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0011d2:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a0011d4:	2500      	movs	r5, #0
			direct = 1;
1a0011d6:	2601      	movs	r6, #1
1a0011d8:	e007      	b.n	1a0011ea <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a0011da:	9b04      	ldr	r3, [sp, #16]
1a0011dc:	3301      	adds	r3, #1
1a0011de:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a0011e0:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a0011e2:	2600      	movs	r6, #0
1a0011e4:	e001      	b.n	1a0011ea <Chip_SetupCoreClock+0x6e>
1a0011e6:	2500      	movs	r5, #0
1a0011e8:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a0011ea:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0011ee:	9b01      	ldr	r3, [sp, #4]
1a0011f0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0011f4:	9a05      	ldr	r2, [sp, #20]
1a0011f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0011fa:	9a03      	ldr	r2, [sp, #12]
1a0011fc:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a001200:	9a04      	ldr	r2, [sp, #16]
1a001202:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001206:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00120a:	4a2f      	ldr	r2, [pc, #188]	; (1a0012c8 <Chip_SetupCoreClock+0x14c>)
1a00120c:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a00120e:	4b2e      	ldr	r3, [pc, #184]	; (1a0012c8 <Chip_SetupCoreClock+0x14c>)
1a001210:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a001212:	f013 0f01 	tst.w	r3, #1
1a001216:	d0fa      	beq.n	1a00120e <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a001218:	2300      	movs	r3, #0
1a00121a:	2201      	movs	r2, #1
1a00121c:	2109      	movs	r1, #9
1a00121e:	2004      	movs	r0, #4
1a001220:	f7ff ff08 	bl	1a001034 <Chip_Clock_SetBaseClock>

	if (direct) {
1a001224:	b306      	cbz	r6, 1a001268 <Chip_SetupCoreClock+0xec>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a001226:	f24c 3350 	movw	r3, #50000	; 0xc350
1a00122a:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a00122c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00122e:	1e5a      	subs	r2, r3, #1
1a001230:	9209      	str	r2, [sp, #36]	; 0x24
1a001232:	2b00      	cmp	r3, #0
1a001234:	d1fa      	bne.n	1a00122c <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a001236:	9b01      	ldr	r3, [sp, #4]
1a001238:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00123c:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a00123e:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a001242:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a001246:	9a05      	ldr	r2, [sp, #20]
1a001248:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00124c:	9a03      	ldr	r2, [sp, #12]
1a00124e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a001252:	9a04      	ldr	r2, [sp, #16]
1a001254:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001258:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00125c:	4a1a      	ldr	r2, [pc, #104]	; (1a0012c8 <Chip_SetupCoreClock+0x14c>)
1a00125e:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a001260:	2c00      	cmp	r4, #0
1a001262:	d12e      	bne.n	1a0012c2 <Chip_SetupCoreClock+0x146>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a001264:	b00a      	add	sp, #40	; 0x28
1a001266:	bd70      	pop	{r4, r5, r6, pc}
	} else if (pdivide) {
1a001268:	2d00      	cmp	r5, #0
1a00126a:	d0f9      	beq.n	1a001260 <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a00126c:	f24c 3350 	movw	r3, #50000	; 0xc350
1a001270:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a001272:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a001274:	1e5a      	subs	r2, r3, #1
1a001276:	9209      	str	r2, [sp, #36]	; 0x24
1a001278:	2b00      	cmp	r3, #0
1a00127a:	d1fa      	bne.n	1a001272 <Chip_SetupCoreClock+0xf6>
		ppll.psel--;
1a00127c:	9b04      	ldr	r3, [sp, #16]
1a00127e:	1e5a      	subs	r2, r3, #1
1a001280:	9204      	str	r2, [sp, #16]
1a001282:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a001286:	9b01      	ldr	r3, [sp, #4]
1a001288:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a00128c:	9905      	ldr	r1, [sp, #20]
1a00128e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a001292:	9903      	ldr	r1, [sp, #12]
1a001294:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a001298:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00129c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0012a0:	4a09      	ldr	r2, [pc, #36]	; (1a0012c8 <Chip_SetupCoreClock+0x14c>)
1a0012a2:	6453      	str	r3, [r2, #68]	; 0x44
1a0012a4:	e7dc      	b.n	1a001260 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a0012a6:	480a      	ldr	r0, [pc, #40]	; (1a0012d0 <Chip_SetupCoreClock+0x154>)
1a0012a8:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a0012ac:	78cb      	ldrb	r3, [r1, #3]
1a0012ae:	788a      	ldrb	r2, [r1, #2]
1a0012b0:	7849      	ldrb	r1, [r1, #1]
1a0012b2:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0012b6:	f7ff febd 	bl	1a001034 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a0012ba:	3401      	adds	r4, #1
1a0012bc:	2c11      	cmp	r4, #17
1a0012be:	d9f2      	bls.n	1a0012a6 <Chip_SetupCoreClock+0x12a>
1a0012c0:	e7d0      	b.n	1a001264 <Chip_SetupCoreClock+0xe8>
1a0012c2:	2400      	movs	r4, #0
1a0012c4:	e7fa      	b.n	1a0012bc <Chip_SetupCoreClock+0x140>
1a0012c6:	bf00      	nop
1a0012c8:	40050000 	.word	0x40050000
1a0012cc:	068e7780 	.word	0x068e7780
1a0012d0:	1a0029a4 	.word	0x1a0029a4

1a0012d4 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a0012d4:	4770      	bx	lr
1a0012d6:	Address 0x000000001a0012d6 is out of bounds.


1a0012d8 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0012d8:	4b03      	ldr	r3, [pc, #12]	; (1a0012e8 <Chip_SSP_GetClockIndex+0x10>)
1a0012da:	4298      	cmp	r0, r3
1a0012dc:	d001      	beq.n	1a0012e2 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a0012de:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a0012e0:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a0012e2:	20a5      	movs	r0, #165	; 0xa5
1a0012e4:	4770      	bx	lr
1a0012e6:	bf00      	nop
1a0012e8:	400c5000 	.word	0x400c5000

1a0012ec <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0012ec:	4b04      	ldr	r3, [pc, #16]	; (1a001300 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a0012ee:	4298      	cmp	r0, r3
1a0012f0:	d002      	beq.n	1a0012f8 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a0012f2:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a0012f6:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a0012f8:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a0012fc:	4770      	bx	lr
1a0012fe:	bf00      	nop
1a001300:	400c5000 	.word	0x400c5000

1a001304 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a001304:	6803      	ldr	r3, [r0, #0]
1a001306:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a00130a:	0209      	lsls	r1, r1, #8
1a00130c:	b289      	uxth	r1, r1
1a00130e:	4319      	orrs	r1, r3
1a001310:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a001312:	6102      	str	r2, [r0, #16]
}
1a001314:	4770      	bx	lr

1a001316 <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a001316:	b570      	push	{r4, r5, r6, lr}
1a001318:	4606      	mov	r6, r0
1a00131a:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a00131c:	f7ff ffe6 	bl	1a0012ec <Chip_SSP_GetPeriphClockIndex>
1a001320:	f7ff ff06 	bl	1a001130 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a001324:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a001326:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a00132a:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a00132c:	e000      	b.n	1a001330 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a00132e:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a001330:	42ab      	cmp	r3, r5
1a001332:	d90b      	bls.n	1a00134c <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a001334:	1c4c      	adds	r4, r1, #1
1a001336:	fb02 f304 	mul.w	r3, r2, r4
1a00133a:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a00133e:	429d      	cmp	r5, r3
1a001340:	d2f6      	bcs.n	1a001330 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a001342:	2cff      	cmp	r4, #255	; 0xff
1a001344:	d9f3      	bls.n	1a00132e <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a001346:	3202      	adds	r2, #2
				cr0_div = 0;
1a001348:	2100      	movs	r1, #0
1a00134a:	e7f1      	b.n	1a001330 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a00134c:	4630      	mov	r0, r6
1a00134e:	f7ff ffd9 	bl	1a001304 <Chip_SSP_SetClockRate>
}
1a001352:	bd70      	pop	{r4, r5, r6, pc}

1a001354 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a001354:	b510      	push	{r4, lr}
1a001356:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a001358:	f7ff ffbe 	bl	1a0012d8 <Chip_SSP_GetClockIndex>
1a00135c:	f7ff fece 	bl	1a0010fc <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a001360:	4620      	mov	r0, r4
1a001362:	f7ff ffc3 	bl	1a0012ec <Chip_SSP_GetPeriphClockIndex>
1a001366:	f7ff fec9 	bl	1a0010fc <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a00136a:	6863      	ldr	r3, [r4, #4]
1a00136c:	f023 0304 	bic.w	r3, r3, #4
1a001370:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a001372:	6823      	ldr	r3, [r4, #0]
1a001374:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a001378:	f043 0307 	orr.w	r3, r3, #7
1a00137c:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a00137e:	4902      	ldr	r1, [pc, #8]	; (1a001388 <Chip_SSP_Init+0x34>)
1a001380:	4620      	mov	r0, r4
1a001382:	f7ff ffc8 	bl	1a001316 <Chip_SSP_SetBitRate>
}
1a001386:	bd10      	pop	{r4, pc}
1a001388:	000186a0 	.word	0x000186a0

1a00138c <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a00138c:	2901      	cmp	r1, #1
1a00138e:	d109      	bne.n	1a0013a4 <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a001390:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a001394:	0082      	lsls	r2, r0, #2
1a001396:	4b04      	ldr	r3, [pc, #16]	; (1a0013a8 <Chip_I2C_EventHandler+0x1c>)
1a001398:	4413      	add	r3, r2
1a00139a:	691a      	ldr	r2, [r3, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a00139c:	7d13      	ldrb	r3, [r2, #20]
1a00139e:	b2db      	uxtb	r3, r3
1a0013a0:	2b04      	cmp	r3, #4
1a0013a2:	d0fb      	beq.n	1a00139c <Chip_I2C_EventHandler+0x10>
}
1a0013a4:	4770      	bx	lr
1a0013a6:	bf00      	nop
1a0013a8:	10000000 	.word	0x10000000

1a0013ac <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a0013ac:	b570      	push	{r4, r5, r6, lr}
1a0013ae:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a0013b0:	4e06      	ldr	r6, [pc, #24]	; (1a0013cc <Chip_I2C_Init+0x20>)
1a0013b2:	00c4      	lsls	r4, r0, #3
1a0013b4:	1a22      	subs	r2, r4, r0
1a0013b6:	0093      	lsls	r3, r2, #2
1a0013b8:	4433      	add	r3, r6
1a0013ba:	8898      	ldrh	r0, [r3, #4]
1a0013bc:	f7ff fe9e 	bl	1a0010fc <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a0013c0:	1b64      	subs	r4, r4, r5
1a0013c2:	00a3      	lsls	r3, r4, #2
1a0013c4:	58f3      	ldr	r3, [r6, r3]
1a0013c6:	226c      	movs	r2, #108	; 0x6c
1a0013c8:	619a      	str	r2, [r3, #24]
}
1a0013ca:	bd70      	pop	{r4, r5, r6, pc}
1a0013cc:	10000000 	.word	0x10000000

1a0013d0 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a0013d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0013d4:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a0013d6:	4e0b      	ldr	r6, [pc, #44]	; (1a001404 <Chip_I2C_SetClockRate+0x34>)
1a0013d8:	00c5      	lsls	r5, r0, #3
1a0013da:	1a2b      	subs	r3, r5, r0
1a0013dc:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a0013e0:	eb06 0308 	add.w	r3, r6, r8
1a0013e4:	8898      	ldrh	r0, [r3, #4]
1a0013e6:	f7ff fea3 	bl	1a001130 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a0013ea:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a0013ee:	f856 3008 	ldr.w	r3, [r6, r8]
1a0013f2:	0842      	lsrs	r2, r0, #1
1a0013f4:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a0013f6:	f856 3008 	ldr.w	r3, [r6, r8]
1a0013fa:	691a      	ldr	r2, [r3, #16]
1a0013fc:	1a80      	subs	r0, r0, r2
1a0013fe:	6158      	str	r0, [r3, #20]
}
1a001400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a001404:	10000000 	.word	0x10000000

1a001408 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a001408:	b508      	push	{r3, lr}
   extern void * const g_pfnVectors[];
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a00140a:	4a0b      	ldr	r2, [pc, #44]	; (1a001438 <SystemInit+0x30>)
1a00140c:	4b0b      	ldr	r3, [pc, #44]	; (1a00143c <SystemInit+0x34>)
1a00140e:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a001410:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a001414:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a001416:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a00141a:	2b20      	cmp	r3, #32
1a00141c:	d004      	beq.n	1a001428 <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a00141e:	f7ff faa5 	bl	1a00096c <Board_SystemInit>
   Board_Init();
1a001422:	f7ff fa2b 	bl	1a00087c <Board_Init>
}
1a001426:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a001428:	4a04      	ldr	r2, [pc, #16]	; (1a00143c <SystemInit+0x34>)
1a00142a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a00142e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a001432:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a001436:	e7f2      	b.n	1a00141e <SystemInit+0x16>
1a001438:	1a000000 	.word	0x1a000000
1a00143c:	e000ed00 	.word	0xe000ed00

1a001440 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a001440:	4b04      	ldr	r3, [pc, #16]	; (1a001454 <cyclesCounterInit+0x14>)
1a001442:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a001444:	4a04      	ldr	r2, [pc, #16]	; (1a001458 <cyclesCounterInit+0x18>)
1a001446:	6813      	ldr	r3, [r2, #0]
1a001448:	f043 0301 	orr.w	r3, r3, #1
1a00144c:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a00144e:	2001      	movs	r0, #1
1a001450:	4770      	bx	lr
1a001452:	bf00      	nop
1a001454:	10000038 	.word	0x10000038
1a001458:	e0001000 	.word	0xe0001000

1a00145c <uartProcessIRQ>:
{
1a00145c:	b570      	push	{r4, r5, r6, lr}
1a00145e:	4604      	mov	r4, r0
   uint8_t status = Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr );
1a001460:	eb00 0240 	add.w	r2, r0, r0, lsl #1
1a001464:	0093      	lsls	r3, r2, #2
1a001466:	4a1f      	ldr	r2, [pc, #124]	; (1a0014e4 <uartProcessIRQ+0x88>)
1a001468:	58d6      	ldr	r6, [r2, r3]
	return pUART->LSR;
1a00146a:	6975      	ldr	r5, [r6, #20]
   if(status & UART_LSR_RDR) { // uartRxReady
1a00146c:	b2ed      	uxtb	r5, r5
1a00146e:	f015 0f01 	tst.w	r5, #1
1a001472:	d009      	beq.n	1a001488 <uartProcessIRQ+0x2c>
      if( ( uart == UART_GPIO ) && (rxIsrCallbackUART0 != 0) )
1a001474:	b920      	cbnz	r0, 1a001480 <uartProcessIRQ+0x24>
1a001476:	4b1c      	ldr	r3, [pc, #112]	; (1a0014e8 <uartProcessIRQ+0x8c>)
1a001478:	681b      	ldr	r3, [r3, #0]
1a00147a:	b10b      	cbz	r3, 1a001480 <uartProcessIRQ+0x24>
         (*rxIsrCallbackUART0)(0);
1a00147c:	2000      	movs	r0, #0
1a00147e:	4798      	blx	r3
      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a001480:	2c03      	cmp	r4, #3
1a001482:	d013      	beq.n	1a0014ac <uartProcessIRQ+0x50>
      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a001484:	2c05      	cmp	r4, #5
1a001486:	d018      	beq.n	1a0014ba <uartProcessIRQ+0x5e>
   if( ( status & UART_LSR_THRE ) && // uartTxReady
1a001488:	f015 0f20 	tst.w	r5, #32
1a00148c:	d00d      	beq.n	1a0014aa <uartProcessIRQ+0x4e>
	return pUART->IER;
1a00148e:	6873      	ldr	r3, [r6, #4]
1a001490:	f013 0f02 	tst.w	r3, #2
1a001494:	d009      	beq.n	1a0014aa <uartProcessIRQ+0x4e>
      if( ( uart == UART_GPIO ) && (txIsrCallbackUART0 != 0) )
1a001496:	b924      	cbnz	r4, 1a0014a2 <uartProcessIRQ+0x46>
1a001498:	4b14      	ldr	r3, [pc, #80]	; (1a0014ec <uartProcessIRQ+0x90>)
1a00149a:	681b      	ldr	r3, [r3, #0]
1a00149c:	b10b      	cbz	r3, 1a0014a2 <uartProcessIRQ+0x46>
         (*txIsrCallbackUART0)(0);
1a00149e:	2000      	movs	r0, #0
1a0014a0:	4798      	blx	r3
      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a0014a2:	2c03      	cmp	r4, #3
1a0014a4:	d010      	beq.n	1a0014c8 <uartProcessIRQ+0x6c>
      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a0014a6:	2c05      	cmp	r4, #5
1a0014a8:	d015      	beq.n	1a0014d6 <uartProcessIRQ+0x7a>
}
1a0014aa:	bd70      	pop	{r4, r5, r6, pc}
      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a0014ac:	4b10      	ldr	r3, [pc, #64]	; (1a0014f0 <uartProcessIRQ+0x94>)
1a0014ae:	681b      	ldr	r3, [r3, #0]
1a0014b0:	2b00      	cmp	r3, #0
1a0014b2:	d0e7      	beq.n	1a001484 <uartProcessIRQ+0x28>
         (*rxIsrCallbackUART2)(0);
1a0014b4:	2000      	movs	r0, #0
1a0014b6:	4798      	blx	r3
1a0014b8:	e7e4      	b.n	1a001484 <uartProcessIRQ+0x28>
      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a0014ba:	4b0e      	ldr	r3, [pc, #56]	; (1a0014f4 <uartProcessIRQ+0x98>)
1a0014bc:	681b      	ldr	r3, [r3, #0]
1a0014be:	2b00      	cmp	r3, #0
1a0014c0:	d0e2      	beq.n	1a001488 <uartProcessIRQ+0x2c>
         (*rxIsrCallbackUART3)(0);
1a0014c2:	2000      	movs	r0, #0
1a0014c4:	4798      	blx	r3
1a0014c6:	e7df      	b.n	1a001488 <uartProcessIRQ+0x2c>
      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a0014c8:	4b0b      	ldr	r3, [pc, #44]	; (1a0014f8 <uartProcessIRQ+0x9c>)
1a0014ca:	681b      	ldr	r3, [r3, #0]
1a0014cc:	2b00      	cmp	r3, #0
1a0014ce:	d0ea      	beq.n	1a0014a6 <uartProcessIRQ+0x4a>
         (*txIsrCallbackUART2)(0);
1a0014d0:	2000      	movs	r0, #0
1a0014d2:	4798      	blx	r3
1a0014d4:	e7e7      	b.n	1a0014a6 <uartProcessIRQ+0x4a>
      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a0014d6:	4b09      	ldr	r3, [pc, #36]	; (1a0014fc <uartProcessIRQ+0xa0>)
1a0014d8:	681b      	ldr	r3, [r3, #0]
1a0014da:	2b00      	cmp	r3, #0
1a0014dc:	d0e5      	beq.n	1a0014aa <uartProcessIRQ+0x4e>
         (*txIsrCallbackUART3)(0);
1a0014de:	2000      	movs	r0, #0
1a0014e0:	4798      	blx	r3
}
1a0014e2:	e7e2      	b.n	1a0014aa <uartProcessIRQ+0x4e>
1a0014e4:	1a0029ec 	.word	0x1a0029ec
1a0014e8:	10000144 	.word	0x10000144
1a0014ec:	10000150 	.word	0x10000150
1a0014f0:	10000148 	.word	0x10000148
1a0014f4:	1000014c 	.word	0x1000014c
1a0014f8:	10000154 	.word	0x10000154
1a0014fc:	10000158 	.word	0x10000158

1a001500 <uartInterrupt>:
   if( enable ) {
1a001500:	b341      	cbz	r1, 1a001554 <uartInterrupt+0x54>
      NVIC_SetPriority( lpcUarts[uart].uartIrqAddr, 5 ); // FreeRTOS Requiere prioridad >= 5 (numero mas alto, mas baja prioridad)
1a001502:	eb00 0340 	add.w	r3, r0, r0, lsl #1
1a001506:	009a      	lsls	r2, r3, #2
1a001508:	4b1e      	ldr	r3, [pc, #120]	; (1a001584 <uartInterrupt+0x84>)
1a00150a:	4413      	add	r3, r2
1a00150c:	f993 300a 	ldrsb.w	r3, [r3, #10]
  if ((int32_t)(IRQn) >= 0)
1a001510:	2b00      	cmp	r3, #0
1a001512:	db18      	blt.n	1a001546 <uartInterrupt+0x46>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a001514:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
1a001518:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
1a00151c:	22a0      	movs	r2, #160	; 0xa0
1a00151e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
      NVIC_EnableIRQ( lpcUarts[uart].uartIrqAddr );
1a001522:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a001526:	0082      	lsls	r2, r0, #2
1a001528:	4b16      	ldr	r3, [pc, #88]	; (1a001584 <uartInterrupt+0x84>)
1a00152a:	4413      	add	r3, r2
1a00152c:	f993 300a 	ldrsb.w	r3, [r3, #10]
  if ((int32_t)(IRQn) >= 0)
1a001530:	2b00      	cmp	r3, #0
1a001532:	db25      	blt.n	1a001580 <uartInterrupt+0x80>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a001534:	f003 011f 	and.w	r1, r3, #31
1a001538:	095b      	lsrs	r3, r3, #5
1a00153a:	2201      	movs	r2, #1
1a00153c:	408a      	lsls	r2, r1
1a00153e:	4912      	ldr	r1, [pc, #72]	; (1a001588 <uartInterrupt+0x88>)
1a001540:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a001544:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a001546:	f003 030f 	and.w	r3, r3, #15
1a00154a:	4a10      	ldr	r2, [pc, #64]	; (1a00158c <uartInterrupt+0x8c>)
1a00154c:	441a      	add	r2, r3
1a00154e:	23a0      	movs	r3, #160	; 0xa0
1a001550:	7613      	strb	r3, [r2, #24]
1a001552:	e7e6      	b.n	1a001522 <uartInterrupt+0x22>
      NVIC_DisableIRQ( lpcUarts[uart].uartIrqAddr );
1a001554:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a001558:	0082      	lsls	r2, r0, #2
1a00155a:	4b0a      	ldr	r3, [pc, #40]	; (1a001584 <uartInterrupt+0x84>)
1a00155c:	4413      	add	r3, r2
1a00155e:	f993 300a 	ldrsb.w	r3, [r3, #10]
  if ((int32_t)(IRQn) >= 0)
1a001562:	2b00      	cmp	r3, #0
1a001564:	db0c      	blt.n	1a001580 <uartInterrupt+0x80>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a001566:	f003 011f 	and.w	r1, r3, #31
1a00156a:	095b      	lsrs	r3, r3, #5
1a00156c:	2201      	movs	r2, #1
1a00156e:	408a      	lsls	r2, r1
1a001570:	3320      	adds	r3, #32
1a001572:	4905      	ldr	r1, [pc, #20]	; (1a001588 <uartInterrupt+0x88>)
1a001574:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
1a001578:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
1a00157c:	f3bf 8f6f 	isb	sy
}
1a001580:	4770      	bx	lr
1a001582:	bf00      	nop
1a001584:	1a0029ec 	.word	0x1a0029ec
1a001588:	e000e100 	.word	0xe000e100
1a00158c:	e000ecfc 	.word	0xe000ecfc

1a001590 <uartCallbackSet>:
   switch(event){
1a001590:	b111      	cbz	r1, 1a001598 <uartCallbackSet+0x8>
1a001592:	2901      	cmp	r1, #1
1a001594:	d01d      	beq.n	1a0015d2 <uartCallbackSet+0x42>
1a001596:	4770      	bx	lr
         if( callbackFunc != 0 ) {
1a001598:	b182      	cbz	r2, 1a0015bc <uartCallbackSet+0x2c>
            if( (uart == UART_GPIO) || (uart == UART_485) ){
1a00159a:	2801      	cmp	r0, #1
1a00159c:	d90f      	bls.n	1a0015be <uartCallbackSet+0x2e>
            if( (uart == UART_USB) || (uart == UART_ENET) ){
1a00159e:	1ec3      	subs	r3, r0, #3
1a0015a0:	b2db      	uxtb	r3, r3
1a0015a2:	2b01      	cmp	r3, #1
1a0015a4:	d90e      	bls.n	1a0015c4 <uartCallbackSet+0x34>
            if( uart == UART_232 ){
1a0015a6:	2805      	cmp	r0, #5
1a0015a8:	d00f      	beq.n	1a0015ca <uartCallbackSet+0x3a>
         intMask = UART_IER_RBRINT | UART_IER_RLSINT;
1a0015aa:	2305      	movs	r3, #5
   Chip_UART_IntEnable(lpcUarts[uart].uartAddr, intMask);
1a0015ac:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0015b0:	0082      	lsls	r2, r0, #2
1a0015b2:	4913      	ldr	r1, [pc, #76]	; (1a001600 <uartCallbackSet+0x70>)
1a0015b4:	588a      	ldr	r2, [r1, r2]
	pUART->IER |= intMask;
1a0015b6:	6851      	ldr	r1, [r2, #4]
1a0015b8:	430b      	orrs	r3, r1
1a0015ba:	6053      	str	r3, [r2, #4]
}
1a0015bc:	4770      	bx	lr
               rxIsrCallbackUART0 = callbackFunc;
1a0015be:	4b11      	ldr	r3, [pc, #68]	; (1a001604 <uartCallbackSet+0x74>)
1a0015c0:	601a      	str	r2, [r3, #0]
               rxIsrCallbackUART0Params = callbackParam;
1a0015c2:	e7ec      	b.n	1a00159e <uartCallbackSet+0xe>
               rxIsrCallbackUART2 = callbackFunc;
1a0015c4:	4b10      	ldr	r3, [pc, #64]	; (1a001608 <uartCallbackSet+0x78>)
1a0015c6:	601a      	str	r2, [r3, #0]
               rxIsrCallbackUART2Params = callbackParam;
1a0015c8:	e7ed      	b.n	1a0015a6 <uartCallbackSet+0x16>
               rxIsrCallbackUART3 = callbackFunc;
1a0015ca:	4b10      	ldr	r3, [pc, #64]	; (1a00160c <uartCallbackSet+0x7c>)
1a0015cc:	601a      	str	r2, [r3, #0]
         intMask = UART_IER_RBRINT | UART_IER_RLSINT;
1a0015ce:	2305      	movs	r3, #5
1a0015d0:	e7ec      	b.n	1a0015ac <uartCallbackSet+0x1c>
         if( callbackFunc != 0 ) {
1a0015d2:	2a00      	cmp	r2, #0
1a0015d4:	d0f2      	beq.n	1a0015bc <uartCallbackSet+0x2c>
            if( (uart == UART_GPIO) || (uart == UART_485) ){
1a0015d6:	2801      	cmp	r0, #1
1a0015d8:	d907      	bls.n	1a0015ea <uartCallbackSet+0x5a>
            if( (uart == UART_USB) || (uart == UART_ENET) ){
1a0015da:	1ec3      	subs	r3, r0, #3
1a0015dc:	b2db      	uxtb	r3, r3
1a0015de:	2b01      	cmp	r3, #1
1a0015e0:	d906      	bls.n	1a0015f0 <uartCallbackSet+0x60>
            if( uart == UART_232 ){
1a0015e2:	2805      	cmp	r0, #5
1a0015e4:	d007      	beq.n	1a0015f6 <uartCallbackSet+0x66>
         intMask = UART_IER_THREINT;
1a0015e6:	2302      	movs	r3, #2
1a0015e8:	e7e0      	b.n	1a0015ac <uartCallbackSet+0x1c>
               txIsrCallbackUART0 = callbackFunc;
1a0015ea:	4b09      	ldr	r3, [pc, #36]	; (1a001610 <uartCallbackSet+0x80>)
1a0015ec:	601a      	str	r2, [r3, #0]
               txIsrCallbackUART0Params = callbackParam;
1a0015ee:	e7f4      	b.n	1a0015da <uartCallbackSet+0x4a>
               txIsrCallbackUART2 = callbackFunc;
1a0015f0:	4b08      	ldr	r3, [pc, #32]	; (1a001614 <uartCallbackSet+0x84>)
1a0015f2:	601a      	str	r2, [r3, #0]
               txIsrCallbackUART2Params = callbackParam;
1a0015f4:	e7f5      	b.n	1a0015e2 <uartCallbackSet+0x52>
               txIsrCallbackUART3 = callbackFunc;
1a0015f6:	4b08      	ldr	r3, [pc, #32]	; (1a001618 <uartCallbackSet+0x88>)
1a0015f8:	601a      	str	r2, [r3, #0]
         intMask = UART_IER_THREINT;
1a0015fa:	2302      	movs	r3, #2
1a0015fc:	e7d6      	b.n	1a0015ac <uartCallbackSet+0x1c>
1a0015fe:	bf00      	nop
1a001600:	1a0029ec 	.word	0x1a0029ec
1a001604:	10000144 	.word	0x10000144
1a001608:	10000148 	.word	0x10000148
1a00160c:	1000014c 	.word	0x1000014c
1a001610:	10000150 	.word	0x10000150
1a001614:	10000154 	.word	0x10000154
1a001618:	10000158 	.word	0x10000158

1a00161c <uartTxReady>:
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a00161c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a001620:	0083      	lsls	r3, r0, #2
1a001622:	4a03      	ldr	r2, [pc, #12]	; (1a001630 <uartTxReady+0x14>)
1a001624:	58d3      	ldr	r3, [r2, r3]
	return pUART->LSR;
1a001626:	6958      	ldr	r0, [r3, #20]
}
1a001628:	f000 0020 	and.w	r0, r0, #32
1a00162c:	4770      	bx	lr
1a00162e:	bf00      	nop
1a001630:	1a0029ec 	.word	0x1a0029ec

1a001634 <uartRxRead>:
   return Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
1a001634:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a001638:	0083      	lsls	r3, r0, #2
1a00163a:	4a02      	ldr	r2, [pc, #8]	; (1a001644 <uartRxRead+0x10>)
1a00163c:	58d3      	ldr	r3, [r2, r3]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a00163e:	6818      	ldr	r0, [r3, #0]
}
1a001640:	b2c0      	uxtb	r0, r0
1a001642:	4770      	bx	lr
1a001644:	1a0029ec 	.word	0x1a0029ec

1a001648 <uartTxWrite>:
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a001648:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a00164c:	0083      	lsls	r3, r0, #2
1a00164e:	4a02      	ldr	r2, [pc, #8]	; (1a001658 <uartTxWrite+0x10>)
1a001650:	58d3      	ldr	r3, [r2, r3]
	pUART->THR = (uint32_t) data;
1a001652:	6019      	str	r1, [r3, #0]
}
1a001654:	4770      	bx	lr
1a001656:	bf00      	nop
1a001658:	1a0029ec 	.word	0x1a0029ec

1a00165c <uartInit>:
{
1a00165c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a001660:	4680      	mov	r8, r0
1a001662:	4689      	mov	r9, r1
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a001664:	4c19      	ldr	r4, [pc, #100]	; (1a0016cc <uartInit+0x70>)
1a001666:	0045      	lsls	r5, r0, #1
1a001668:	182a      	adds	r2, r5, r0
1a00166a:	0093      	lsls	r3, r2, #2
1a00166c:	18e6      	adds	r6, r4, r3
1a00166e:	58e7      	ldr	r7, [r4, r3]
1a001670:	4638      	mov	r0, r7
1a001672:	f7ff f997 	bl	1a0009a4 <Chip_UART_Init>
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a001676:	4649      	mov	r1, r9
1a001678:	4638      	mov	r0, r7
1a00167a:	f7ff f9bd 	bl	1a0009f8 <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a00167e:	2307      	movs	r3, #7
1a001680:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a001682:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a001684:	2301      	movs	r3, #1
1a001686:	65fb      	str	r3, [r7, #92]	; 0x5c
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a001688:	7930      	ldrb	r0, [r6, #4]
1a00168a:	7973      	ldrb	r3, [r6, #5]
1a00168c:	79b2      	ldrb	r2, [r6, #6]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00168e:	f042 0218 	orr.w	r2, r2, #24
1a001692:	490f      	ldr	r1, [pc, #60]	; (1a0016d0 <uartInit+0x74>)
1a001694:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a001698:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a00169c:	79f0      	ldrb	r0, [r6, #7]
1a00169e:	7a33      	ldrb	r3, [r6, #8]
1a0016a0:	7a72      	ldrb	r2, [r6, #9]
1a0016a2:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0016a6:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a0016aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   if( uart == UART_485 ) {
1a0016ae:	f1b8 0f01 	cmp.w	r8, #1
1a0016b2:	d001      	beq.n	1a0016b8 <uartInit+0x5c>
}
1a0016b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a0016b8:	4a06      	ldr	r2, [pc, #24]	; (1a0016d4 <uartInit+0x78>)
1a0016ba:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a0016bc:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a0016c0:	64d3      	str	r3, [r2, #76]	; 0x4c
1a0016c2:	221a      	movs	r2, #26
1a0016c4:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a0016c8:	e7f4      	b.n	1a0016b4 <uartInit+0x58>
1a0016ca:	bf00      	nop
1a0016cc:	1a0029ec 	.word	0x1a0029ec
1a0016d0:	40086000 	.word	0x40086000
1a0016d4:	40081000 	.word	0x40081000

1a0016d8 <uartWriteByte>:
{
1a0016d8:	b538      	push	{r3, r4, r5, lr}
1a0016da:	4604      	mov	r4, r0
1a0016dc:	460d      	mov	r5, r1
   while( uartTxReady( uart ) == FALSE );
1a0016de:	4620      	mov	r0, r4
1a0016e0:	f7ff ff9c 	bl	1a00161c <uartTxReady>
1a0016e4:	2800      	cmp	r0, #0
1a0016e6:	d0fa      	beq.n	1a0016de <uartWriteByte+0x6>
   uartTxWrite( uart, value );
1a0016e8:	4629      	mov	r1, r5
1a0016ea:	4620      	mov	r0, r4
1a0016ec:	f7ff ffac 	bl	1a001648 <uartTxWrite>
}
1a0016f0:	bd38      	pop	{r3, r4, r5, pc}

1a0016f2 <UART2_IRQHandler>:

// UART2 (USB-UART) or UART_ENET
// 0x2a 0x000000A8 - Handler for ISR UART2 (IRQ 26)
void UART2_IRQHandler(void)
{
1a0016f2:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_USB );
1a0016f4:	2003      	movs	r0, #3
1a0016f6:	f7ff feb1 	bl	1a00145c <uartProcessIRQ>
}
1a0016fa:	bd08      	pop	{r3, pc}

1a0016fc <UART3_IRQHandler>:

// UART3 (RS232)
// 0x2b 0x000000AC - Handler for ISR UART3 (IRQ 27)
void UART3_IRQHandler(void)
{
1a0016fc:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_232 );
1a0016fe:	2005      	movs	r0, #5
1a001700:	f7ff feac 	bl	1a00145c <uartProcessIRQ>
}
1a001704:	bd08      	pop	{r3, pc}
1a001706:	Address 0x000000001a001706 is out of bounds.


1a001708 <tickRead>:
   #ifdef USE_FREERTOS
      return xTaskGetTickCount();
   #else
      return tickCounter;
   #endif
}
1a001708:	4b01      	ldr	r3, [pc, #4]	; (1a001710 <tickRead+0x8>)
1a00170a:	e9d3 0100 	ldrd	r0, r1, [r3]
1a00170e:	4770      	bx	lr
1a001710:	10000160 	.word	0x10000160

1a001714 <tickPowerSet>:
void tickPowerSet( bool_t power )
{
   #ifdef USE_FREERTOS
      uartWriteString( UART_USB, "Use of tickPowerSet() in a program with freeRTOS has no effect\r\n" );
   #else
      if( power ) {
1a001714:	b118      	cbz	r0, 1a00171e <tickPowerSet+0xa>
         // Enable SysTick IRQ and SysTick Timer
         SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
1a001716:	4b04      	ldr	r3, [pc, #16]	; (1a001728 <tickPowerSet+0x14>)
1a001718:	2207      	movs	r2, #7
1a00171a:	601a      	str	r2, [r3, #0]
1a00171c:	4770      	bx	lr
                         SysTick_CTRL_TICKINT_Msk   |
                         SysTick_CTRL_ENABLE_Msk;
      } else {
         // Disable SysTick IRQ and SysTick Timer
         SysTick->CTRL = 0x0000000;
1a00171e:	4b02      	ldr	r3, [pc, #8]	; (1a001728 <tickPowerSet+0x14>)
1a001720:	2200      	movs	r2, #0
1a001722:	601a      	str	r2, [r3, #0]
      }
   #endif
}
1a001724:	4770      	bx	lr
1a001726:	bf00      	nop
1a001728:	e000e010 	.word	0xe000e010

1a00172c <tickInit>:
{
1a00172c:	b538      	push	{r3, r4, r5, lr}
      if( tickRateMSvalue == 0 ) {
1a00172e:	ea50 0401 	orrs.w	r4, r0, r1
1a001732:	d02a      	beq.n	1a00178a <tickInit+0x5e>
         if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ) {
1a001734:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
1a001738:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
1a00173c:	2b00      	cmp	r3, #0
1a00173e:	bf08      	it	eq
1a001740:	2a32      	cmpeq	r2, #50	; 0x32
1a001742:	d227      	bcs.n	1a001794 <tickInit+0x68>
            tickRateMS = tickRateMSvalue;
1a001744:	4b14      	ldr	r3, [pc, #80]	; (1a001798 <tickInit+0x6c>)
1a001746:	e9c3 0100 	strd	r0, r1, [r3]
            SysTick_Config( SystemCoreClock * tickRateMSvalue / 1000 );
1a00174a:	4b14      	ldr	r3, [pc, #80]	; (1a00179c <tickInit+0x70>)
1a00174c:	681b      	ldr	r3, [r3, #0]
1a00174e:	fba3 4500 	umull	r4, r5, r3, r0
1a001752:	fb03 5501 	mla	r5, r3, r1, r5
1a001756:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a00175a:	2300      	movs	r3, #0
1a00175c:	4620      	mov	r0, r4
1a00175e:	4629      	mov	r1, r5
1a001760:	f000 fa6c 	bl	1a001c3c <__aeabi_uldivmod>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
1a001764:	3801      	subs	r0, #1
1a001766:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a00176a:	d209      	bcs.n	1a001780 <tickInit+0x54>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1a00176c:	4b0c      	ldr	r3, [pc, #48]	; (1a0017a0 <tickInit+0x74>)
1a00176e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a001770:	4a0c      	ldr	r2, [pc, #48]	; (1a0017a4 <tickInit+0x78>)
1a001772:	21e0      	movs	r1, #224	; 0xe0
1a001774:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
1a001778:	2200      	movs	r2, #0
1a00177a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a00177c:	2207      	movs	r2, #7
1a00177e:	601a      	str	r2, [r3, #0]
            tickPowerSet( ON );
1a001780:	2001      	movs	r0, #1
1a001782:	f7ff ffc7 	bl	1a001714 <tickPowerSet>
      bool_t ret_val = 1;
1a001786:	2001      	movs	r0, #1
}
1a001788:	bd38      	pop	{r3, r4, r5, pc}
         tickPowerSet( OFF );
1a00178a:	2000      	movs	r0, #0
1a00178c:	f7ff ffc2 	bl	1a001714 <tickPowerSet>
         ret_val = 0;
1a001790:	2000      	movs	r0, #0
1a001792:	e7f9      	b.n	1a001788 <tickInit+0x5c>
            ret_val = 0;
1a001794:	2000      	movs	r0, #0
1a001796:	e7f7      	b.n	1a001788 <tickInit+0x5c>
1a001798:	10000040 	.word	0x10000040
1a00179c:	1000017c 	.word	0x1000017c
1a0017a0:	e000e010 	.word	0xe000e010
1a0017a4:	e000ed00 	.word	0xe000ed00

1a0017a8 <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a0017a8:	b508      	push	{r3, lr}
   // Increment Tick counters
   tickCounter++;
1a0017aa:	4a07      	ldr	r2, [pc, #28]	; (1a0017c8 <SysTick_Handler+0x20>)
1a0017ac:	6813      	ldr	r3, [r2, #0]
1a0017ae:	6851      	ldr	r1, [r2, #4]
1a0017b0:	3301      	adds	r3, #1
1a0017b2:	f141 0100 	adc.w	r1, r1, #0
1a0017b6:	6013      	str	r3, [r2, #0]
1a0017b8:	6051      	str	r1, [r2, #4]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a0017ba:	4b04      	ldr	r3, [pc, #16]	; (1a0017cc <SysTick_Handler+0x24>)
1a0017bc:	681b      	ldr	r3, [r3, #0]
1a0017be:	b113      	cbz	r3, 1a0017c6 <SysTick_Handler+0x1e>
      (* tickHookFunction )( callBackFuncParams );
1a0017c0:	4a03      	ldr	r2, [pc, #12]	; (1a0017d0 <SysTick_Handler+0x28>)
1a0017c2:	6810      	ldr	r0, [r2, #0]
1a0017c4:	4798      	blx	r3
   }
}
1a0017c6:	bd08      	pop	{r3, pc}
1a0017c8:	10000160 	.word	0x10000160
1a0017cc:	10000168 	.word	0x10000168
1a0017d0:	1000015c 	.word	0x1000015c

1a0017d4 <errorOcurred>:
/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred( void* ptr )
{
   while(1);
1a0017d4:	e7fe      	b.n	1a0017d4 <errorOcurred>

1a0017d6 <doNothing>:
}

static void doNothing( void* ptr )
{
}
1a0017d6:	4770      	bx	lr

1a0017d8 <TIMER0_IRQHandler>:
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void)
{
1a0017d8:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0017da:	2400      	movs	r4, #0
1a0017dc:	e001      	b.n	1a0017e2 <TIMER0_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0017de:	3401      	adds	r4, #1
1a0017e0:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0017e2:	2c03      	cmp	r4, #3
1a0017e4:	d812      	bhi.n	1a00180c <TIMER0_IRQHandler+0x34>
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ) {
1a0017e6:	b265      	sxtb	r5, r4
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0017e8:	4b09      	ldr	r3, [pc, #36]	; (1a001810 <TIMER0_IRQHandler+0x38>)
1a0017ea:	681a      	ldr	r2, [r3, #0]
1a0017ec:	f004 010f 	and.w	r1, r4, #15
1a0017f0:	2301      	movs	r3, #1
1a0017f2:	408b      	lsls	r3, r1
1a0017f4:	421a      	tst	r2, r3
1a0017f6:	d0f2      	beq.n	1a0017de <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0017f8:	4b06      	ldr	r3, [pc, #24]	; (1a001814 <TIMER0_IRQHandler+0x3c>)
1a0017fa:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a0017fe:	2000      	movs	r0, #0
1a001800:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a001802:	2301      	movs	r3, #1
1a001804:	40ab      	lsls	r3, r5
1a001806:	4a02      	ldr	r2, [pc, #8]	; (1a001810 <TIMER0_IRQHandler+0x38>)
1a001808:	6013      	str	r3, [r2, #0]
1a00180a:	e7e8      	b.n	1a0017de <TIMER0_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a00180c:	bd38      	pop	{r3, r4, r5, pc}
1a00180e:	bf00      	nop
1a001810:	40084000 	.word	0x40084000
1a001814:	10000048 	.word	0x10000048

1a001818 <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void )
{
1a001818:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00181a:	2400      	movs	r4, #0
1a00181c:	e001      	b.n	1a001822 <TIMER1_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a00181e:	3401      	adds	r4, #1
1a001820:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a001822:	2c03      	cmp	r4, #3
1a001824:	d813      	bhi.n	1a00184e <TIMER1_IRQHandler+0x36>
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ) {
1a001826:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a001828:	4b09      	ldr	r3, [pc, #36]	; (1a001850 <TIMER1_IRQHandler+0x38>)
1a00182a:	681a      	ldr	r2, [r3, #0]
1a00182c:	f004 010f 	and.w	r1, r4, #15
1a001830:	2301      	movs	r3, #1
1a001832:	408b      	lsls	r3, r1
1a001834:	421a      	tst	r2, r3
1a001836:	d0f2      	beq.n	1a00181e <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a001838:	1d23      	adds	r3, r4, #4
1a00183a:	4a06      	ldr	r2, [pc, #24]	; (1a001854 <TIMER1_IRQHandler+0x3c>)
1a00183c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a001840:	2000      	movs	r0, #0
1a001842:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a001844:	2301      	movs	r3, #1
1a001846:	40ab      	lsls	r3, r5
1a001848:	4a01      	ldr	r2, [pc, #4]	; (1a001850 <TIMER1_IRQHandler+0x38>)
1a00184a:	6013      	str	r3, [r2, #0]
1a00184c:	e7e7      	b.n	1a00181e <TIMER1_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a00184e:	bd38      	pop	{r3, r4, r5, pc}
1a001850:	40085000 	.word	0x40085000
1a001854:	10000048 	.word	0x10000048

1a001858 <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void )
{
1a001858:	b538      	push	{r3, r4, r5, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00185a:	2400      	movs	r4, #0
1a00185c:	e001      	b.n	1a001862 <TIMER2_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a00185e:	3401      	adds	r4, #1
1a001860:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a001862:	2c03      	cmp	r4, #3
1a001864:	d814      	bhi.n	1a001890 <TIMER2_IRQHandler+0x38>
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ) {
1a001866:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a001868:	4b0a      	ldr	r3, [pc, #40]	; (1a001894 <TIMER2_IRQHandler+0x3c>)
1a00186a:	681a      	ldr	r2, [r3, #0]
1a00186c:	f004 010f 	and.w	r1, r4, #15
1a001870:	2301      	movs	r3, #1
1a001872:	408b      	lsls	r3, r1
1a001874:	421a      	tst	r2, r3
1a001876:	d0f2      	beq.n	1a00185e <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a001878:	f104 0308 	add.w	r3, r4, #8
1a00187c:	4a06      	ldr	r2, [pc, #24]	; (1a001898 <TIMER2_IRQHandler+0x40>)
1a00187e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a001882:	2000      	movs	r0, #0
1a001884:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a001886:	2301      	movs	r3, #1
1a001888:	40ab      	lsls	r3, r5
1a00188a:	4a02      	ldr	r2, [pc, #8]	; (1a001894 <TIMER2_IRQHandler+0x3c>)
1a00188c:	6013      	str	r3, [r2, #0]
1a00188e:	e7e6      	b.n	1a00185e <TIMER2_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a001890:	bd38      	pop	{r3, r4, r5, pc}
1a001892:	bf00      	nop
1a001894:	400c3000 	.word	0x400c3000
1a001898:	10000048 	.word	0x10000048

1a00189c <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void )
{
1a00189c:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00189e:	2400      	movs	r4, #0
1a0018a0:	e001      	b.n	1a0018a6 <TIMER3_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0018a2:	3401      	adds	r4, #1
1a0018a4:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0018a6:	2c03      	cmp	r4, #3
1a0018a8:	d814      	bhi.n	1a0018d4 <TIMER3_IRQHandler+0x38>
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)) {
1a0018aa:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0018ac:	4b0a      	ldr	r3, [pc, #40]	; (1a0018d8 <TIMER3_IRQHandler+0x3c>)
1a0018ae:	681a      	ldr	r2, [r3, #0]
1a0018b0:	f004 010f 	and.w	r1, r4, #15
1a0018b4:	2301      	movs	r3, #1
1a0018b6:	408b      	lsls	r3, r1
1a0018b8:	421a      	tst	r2, r3
1a0018ba:	d0f2      	beq.n	1a0018a2 <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0018bc:	f104 030c 	add.w	r3, r4, #12
1a0018c0:	4a06      	ldr	r2, [pc, #24]	; (1a0018dc <TIMER3_IRQHandler+0x40>)
1a0018c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0018c6:	2000      	movs	r0, #0
1a0018c8:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a0018ca:	2301      	movs	r3, #1
1a0018cc:	40ab      	lsls	r3, r5
1a0018ce:	4a02      	ldr	r2, [pc, #8]	; (1a0018d8 <TIMER3_IRQHandler+0x3c>)
1a0018d0:	6013      	str	r3, [r2, #0]
1a0018d2:	e7e6      	b.n	1a0018a2 <TIMER3_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a0018d4:	bd38      	pop	{r3, r4, r5, pc}
1a0018d6:	bf00      	nop
1a0018d8:	400c4000 	.word	0x400c4000
1a0018dc:	10000048 	.word	0x10000048

1a0018e0 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a0018e0:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a0018e2:	4d0b      	ldr	r5, [pc, #44]	; (1a001910 <gpioObtainPinInit+0x30>)
1a0018e4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a0018e8:	182c      	adds	r4, r5, r0
1a0018ea:	5628      	ldrsb	r0, [r5, r0]
1a0018ec:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a0018ee:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a0018f2:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a0018f4:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a0018f8:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a0018fa:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a0018fe:	9b02      	ldr	r3, [sp, #8]
1a001900:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a001902:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a001906:	9b03      	ldr	r3, [sp, #12]
1a001908:	701a      	strb	r2, [r3, #0]
}
1a00190a:	bc30      	pop	{r4, r5}
1a00190c:	4770      	bx	lr
1a00190e:	bf00      	nop
1a001910:	1a002a34 	.word	0x1a002a34

1a001914 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
   if( pin == VCC ){
1a001914:	f110 0f02 	cmn.w	r0, #2
1a001918:	f000 80c7 	beq.w	1a001aaa <gpioInit+0x196>
	  return FALSE;
   }
   if( pin == GND ){
1a00191c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001920:	f000 80c5 	beq.w	1a001aae <gpioInit+0x19a>
{
1a001924:	b570      	push	{r4, r5, r6, lr}
1a001926:	b084      	sub	sp, #16
1a001928:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a00192a:	2300      	movs	r3, #0
1a00192c:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001930:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a001934:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001938:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a00193c:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a001940:	f10d 030b 	add.w	r3, sp, #11
1a001944:	9301      	str	r3, [sp, #4]
1a001946:	ab03      	add	r3, sp, #12
1a001948:	9300      	str	r3, [sp, #0]
1a00194a:	f10d 030d 	add.w	r3, sp, #13
1a00194e:	f10d 020e 	add.w	r2, sp, #14
1a001952:	f10d 010f 	add.w	r1, sp, #15
1a001956:	f7ff ffc3 	bl	1a0018e0 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a00195a:	2c05      	cmp	r4, #5
1a00195c:	f200 80a9 	bhi.w	1a001ab2 <gpioInit+0x19e>
1a001960:	e8df f004 	tbb	[pc, r4]
1a001964:	45278109 	.word	0x45278109
1a001968:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a00196a:	4853      	ldr	r0, [pc, #332]	; (1a001ab8 <gpioInit+0x1a4>)
1a00196c:	f7ff fcb2 	bl	1a0012d4 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a001970:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a001972:	b004      	add	sp, #16
1a001974:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a001976:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00197a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00197e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001982:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a001986:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00198a:	494c      	ldr	r1, [pc, #304]	; (1a001abc <gpioInit+0x1a8>)
1a00198c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001990:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001994:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001998:	2001      	movs	r0, #1
1a00199a:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a00199e:	4c46      	ldr	r4, [pc, #280]	; (1a001ab8 <gpioInit+0x1a4>)
1a0019a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0019a4:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0019a8:	ea22 0201 	bic.w	r2, r2, r1
1a0019ac:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0019b0:	e7df      	b.n	1a001972 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a0019b2:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0019b6:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0019ba:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0019be:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a0019c2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0019c6:	493d      	ldr	r1, [pc, #244]	; (1a001abc <gpioInit+0x1a8>)
1a0019c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0019cc:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0019d0:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0019d4:	2001      	movs	r0, #1
1a0019d6:	fa00 f102 	lsl.w	r1, r0, r2
1a0019da:	4c37      	ldr	r4, [pc, #220]	; (1a001ab8 <gpioInit+0x1a4>)
1a0019dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0019e0:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0019e4:	ea22 0201 	bic.w	r2, r2, r1
1a0019e8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0019ec:	e7c1      	b.n	1a001972 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a0019ee:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0019f2:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0019f6:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0019fa:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a0019fe:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001a02:	492e      	ldr	r1, [pc, #184]	; (1a001abc <gpioInit+0x1a8>)
1a001a04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001a08:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001a0c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001a10:	2001      	movs	r0, #1
1a001a12:	fa00 f102 	lsl.w	r1, r0, r2
1a001a16:	4c28      	ldr	r4, [pc, #160]	; (1a001ab8 <gpioInit+0x1a4>)
1a001a18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001a1c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001a20:	ea22 0201 	bic.w	r2, r2, r1
1a001a24:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001a28:	e7a3      	b.n	1a001972 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a001a2a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001a2e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001a32:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001a36:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a001a3a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001a3e:	491f      	ldr	r1, [pc, #124]	; (1a001abc <gpioInit+0x1a8>)
1a001a40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001a44:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001a48:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001a4c:	2001      	movs	r0, #1
1a001a4e:	fa00 f102 	lsl.w	r1, r0, r2
1a001a52:	4c19      	ldr	r4, [pc, #100]	; (1a001ab8 <gpioInit+0x1a4>)
1a001a54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001a58:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001a5c:	ea22 0201 	bic.w	r2, r2, r1
1a001a60:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001a64:	e785      	b.n	1a001972 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a001a66:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001a6a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001a6e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001a72:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a001a76:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001a7a:	4910      	ldr	r1, [pc, #64]	; (1a001abc <gpioInit+0x1a8>)
1a001a7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a001a80:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a001a84:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001a88:	2001      	movs	r0, #1
1a001a8a:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a001a8e:	4b0a      	ldr	r3, [pc, #40]	; (1a001ab8 <gpioInit+0x1a4>)
1a001a90:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a001a94:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a001a98:	4331      	orrs	r1, r6
1a001a9a:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a001a9e:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a001aa0:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a001aa4:	2100      	movs	r1, #0
1a001aa6:	5499      	strb	r1, [r3, r2]
1a001aa8:	e763      	b.n	1a001972 <gpioInit+0x5e>
	  return FALSE;
1a001aaa:	2000      	movs	r0, #0
1a001aac:	4770      	bx	lr
	  return FALSE;
1a001aae:	2000      	movs	r0, #0
}
1a001ab0:	4770      	bx	lr
      ret_val = 0;
1a001ab2:	2000      	movs	r0, #0
1a001ab4:	e75d      	b.n	1a001972 <gpioInit+0x5e>
1a001ab6:	bf00      	nop
1a001ab8:	400f4000 	.word	0x400f4000
1a001abc:	40086000 	.word	0x40086000

1a001ac0 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a001ac0:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a001ac2:	4b04      	ldr	r3, [pc, #16]	; (1a001ad4 <USB0_IRQHandler+0x14>)
1a001ac4:	681b      	ldr	r3, [r3, #0]
1a001ac6:	681b      	ldr	r3, [r3, #0]
1a001ac8:	68db      	ldr	r3, [r3, #12]
1a001aca:	4a03      	ldr	r2, [pc, #12]	; (1a001ad8 <USB0_IRQHandler+0x18>)
1a001acc:	6810      	ldr	r0, [r2, #0]
1a001ace:	4798      	blx	r3
}
1a001ad0:	bd08      	pop	{r3, pc}
1a001ad2:	bf00      	nop
1a001ad4:	10000180 	.word	0x10000180
1a001ad8:	1000016c 	.word	0x1000016c

1a001adc <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a001adc:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a001ade:	f7ff f87d 	bl	1a000bdc <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a001ae2:	4b1a      	ldr	r3, [pc, #104]	; (1a001b4c <boardInit+0x70>)
1a001ae4:	6818      	ldr	r0, [r3, #0]
1a001ae6:	f7ff fcab 	bl	1a001440 <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms (si no se usa freeRTOS)
   #ifndef USE_FREERTOS
      tickInit( 1 );
1a001aea:	2001      	movs	r0, #1
1a001aec:	2100      	movs	r1, #0
1a001aee:	f7ff fe1d 	bl	1a00172c <tickInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a001af2:	2105      	movs	r1, #5
1a001af4:	2000      	movs	r0, #0
1a001af6:	f7ff ff0d 	bl	1a001914 <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a001afa:	2100      	movs	r1, #0
1a001afc:	2024      	movs	r0, #36	; 0x24
1a001afe:	f7ff ff09 	bl	1a001914 <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a001b02:	2100      	movs	r1, #0
1a001b04:	2025      	movs	r0, #37	; 0x25
1a001b06:	f7ff ff05 	bl	1a001914 <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a001b0a:	2100      	movs	r1, #0
1a001b0c:	2026      	movs	r0, #38	; 0x26
1a001b0e:	f7ff ff01 	bl	1a001914 <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a001b12:	2100      	movs	r1, #0
1a001b14:	2027      	movs	r0, #39	; 0x27
1a001b16:	f7ff fefd 	bl	1a001914 <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a001b1a:	2101      	movs	r1, #1
1a001b1c:	2028      	movs	r0, #40	; 0x28
1a001b1e:	f7ff fef9 	bl	1a001914 <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a001b22:	2101      	movs	r1, #1
1a001b24:	2029      	movs	r0, #41	; 0x29
1a001b26:	f7ff fef5 	bl	1a001914 <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a001b2a:	2101      	movs	r1, #1
1a001b2c:	202a      	movs	r0, #42	; 0x2a
1a001b2e:	f7ff fef1 	bl	1a001914 <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a001b32:	2101      	movs	r1, #1
1a001b34:	202b      	movs	r0, #43	; 0x2b
1a001b36:	f7ff feed 	bl	1a001914 <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a001b3a:	2101      	movs	r1, #1
1a001b3c:	202c      	movs	r0, #44	; 0x2c
1a001b3e:	f7ff fee9 	bl	1a001914 <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a001b42:	2101      	movs	r1, #1
1a001b44:	202d      	movs	r0, #45	; 0x2d
1a001b46:	f7ff fee5 	bl	1a001914 <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a001b4a:	bd08      	pop	{r3, pc}
1a001b4c:	1000017c 	.word	0x1000017c

1a001b50 <delayInit>:


/* ---- Non Blocking Delay ---- */

void delayInit( delay_t * delay, tick_t duration )
{
1a001b50:	b510      	push	{r4, lr}
1a001b52:	4604      	mov	r4, r0
1a001b54:	4610      	mov	r0, r2
1a001b56:	4619      	mov	r1, r3
   delay->duration = duration/tickRateMS;
1a001b58:	4b04      	ldr	r3, [pc, #16]	; (1a001b6c <delayInit+0x1c>)
1a001b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
1a001b5e:	f000 f86d 	bl	1a001c3c <__aeabi_uldivmod>
1a001b62:	e9c4 0102 	strd	r0, r1, [r4, #8]
   delay->running = 0;
1a001b66:	2300      	movs	r3, #0
1a001b68:	7423      	strb	r3, [r4, #16]
}
1a001b6a:	bd10      	pop	{r4, pc}
1a001b6c:	10000040 	.word	0x10000040

1a001b70 <delayRead>:

bool_t delayRead( delay_t * delay )
{
1a001b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a001b72:	4604      	mov	r4, r0
   bool_t timeArrived = 0;

   if( !delay->running ) {
1a001b74:	7c05      	ldrb	r5, [r0, #16]
1a001b76:	b93d      	cbnz	r5, 1a001b88 <delayRead+0x18>
      delay->startTime = tickRead();
1a001b78:	f7ff fdc6 	bl	1a001708 <tickRead>
1a001b7c:	e9c4 0100 	strd	r0, r1, [r4]
      delay->running = 1;
1a001b80:	2301      	movs	r3, #1
1a001b82:	7423      	strb	r3, [r4, #16]
         delay->running = 0;
      }
   }

   return timeArrived;
}
1a001b84:	4628      	mov	r0, r5
1a001b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ( (tick_t)(tickRead() - delay->startTime) >= delay->duration ) {
1a001b88:	f7ff fdbe 	bl	1a001708 <tickRead>
1a001b8c:	6823      	ldr	r3, [r4, #0]
1a001b8e:	6862      	ldr	r2, [r4, #4]
1a001b90:	1ac6      	subs	r6, r0, r3
1a001b92:	eb61 0702 	sbc.w	r7, r1, r2
1a001b96:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
1a001b9a:	429f      	cmp	r7, r3
1a001b9c:	bf08      	it	eq
1a001b9e:	4296      	cmpeq	r6, r2
1a001ba0:	d303      	bcc.n	1a001baa <delayRead+0x3a>
         delay->running = 0;
1a001ba2:	2300      	movs	r3, #0
1a001ba4:	7423      	strb	r3, [r4, #16]
         timeArrived = 1;
1a001ba6:	2501      	movs	r5, #1
1a001ba8:	e7ec      	b.n	1a001b84 <delayRead+0x14>
   bool_t timeArrived = 0;
1a001baa:	2500      	movs	r5, #0
1a001bac:	e7ea      	b.n	1a001b84 <delayRead+0x14>
1a001bae:	Address 0x000000001a001bae is out of bounds.


1a001bb0 <clearInterrupt>:
}

static void clearInterrupt(uint8_t irqChannel)
{
   /* Clear interrupt flag for irqChannel */
   Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
1a001bb0:	2301      	movs	r3, #1
1a001bb2:	fa03 f000 	lsl.w	r0, r3, r0
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a001bb6:	4b01      	ldr	r3, [pc, #4]	; (1a001bbc <clearInterrupt+0xc>)
1a001bb8:	6258      	str	r0, [r3, #36]	; 0x24
}
1a001bba:	4770      	bx	lr
1a001bbc:	40087000 	.word	0x40087000

1a001bc0 <serveInterrupt>:

static void serveInterrupt(uint8_t irqChannel)
{
1a001bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ultrasonicSensorMap_t aSensor = ultrasonicSensorsIrqMap[irqChannel];
1a001bc2:	4b12      	ldr	r3, [pc, #72]	; (1a001c0c <serveInterrupt+0x4c>)
1a001bc4:	5c1a      	ldrb	r2, [r3, r0]
	return pPININT->RISE;
1a001bc6:	4b12      	ldr	r3, [pc, #72]	; (1a001c10 <serveInterrupt+0x50>)
1a001bc8:	69d9      	ldr	r1, [r3, #28]
   /* If interrupt was because a rising edge */
   if ( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH(irqChannel) ) {
1a001bca:	2301      	movs	r3, #1
1a001bcc:	4083      	lsls	r3, r0
1a001bce:	420b      	tst	r3, r1
1a001bd0:	d00c      	beq.n	1a001bec <serveInterrupt+0x2c>
 * @return	Current timer terminal count value
 * @note	Returns the current timer terminal count.
 */
STATIC INLINE uint32_t Chip_TIMER_ReadCount(LPC_TIMER_T *pTMR)
{
	return pTMR->TC;
1a001bd2:	4910      	ldr	r1, [pc, #64]	; (1a001c14 <serveInterrupt+0x54>)
1a001bd4:	688c      	ldr	r4, [r1, #8]
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly

      /* Save actual timer count in echoRiseTime */
      ultrasonicSensors[aSensor].echoRiseTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a001bd6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
1a001bda:	00d1      	lsls	r1, r2, #3
1a001bdc:	4a0e      	ldr	r2, [pc, #56]	; (1a001c18 <serveInterrupt+0x58>)
1a001bde:	440a      	add	r2, r1
1a001be0:	6054      	str	r4, [r2, #4]
	pPININT->RISE = pins;
1a001be2:	4a0b      	ldr	r2, [pc, #44]	; (1a001c10 <serveInterrupt+0x50>)
1a001be4:	61d3      	str	r3, [r2, #28]
      /* Clear falling edge irq */
      Chip_PININT_ClearFallStates(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
   }

   /* Clear IRQ status */
   clearInterrupt(irqChannel);
1a001be6:	f7ff ffe3 	bl	1a001bb0 <clearInterrupt>
}
1a001bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a001bec:	4909      	ldr	r1, [pc, #36]	; (1a001c14 <serveInterrupt+0x54>)
1a001bee:	688e      	ldr	r6, [r1, #8]
      ultrasonicSensors[aSensor].echoFallTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a001bf0:	4d09      	ldr	r5, [pc, #36]	; (1a001c18 <serveInterrupt+0x58>)
1a001bf2:	0051      	lsls	r1, r2, #1
1a001bf4:	188f      	adds	r7, r1, r2
1a001bf6:	00fc      	lsls	r4, r7, #3
1a001bf8:	4627      	mov	r7, r4
1a001bfa:	442c      	add	r4, r5
1a001bfc:	60a6      	str	r6, [r4, #8]
      ultrasonicSensors[aSensor].lastEchoWidth = ultrasonicSensors[aSensor].echoFallTime - ultrasonicSensors[aSensor].echoRiseTime;
1a001bfe:	6864      	ldr	r4, [r4, #4]
1a001c00:	1b36      	subs	r6, r6, r4
1a001c02:	443d      	add	r5, r7
1a001c04:	60ee      	str	r6, [r5, #12]
	pPININT->FALL = pins;
1a001c06:	4a02      	ldr	r2, [pc, #8]	; (1a001c10 <serveInterrupt+0x50>)
1a001c08:	6213      	str	r3, [r2, #32]
1a001c0a:	e7ec      	b.n	1a001be6 <serveInterrupt+0x26>
1a001c0c:	1a002b1c 	.word	0x1a002b1c
1a001c10:	40087000 	.word	0x40087000
1a001c14:	40084000 	.word	0x40084000
1a001c18:	10000088 	.word	0x10000088

1a001c1c <GPIO0_IRQHandler>:
 * @Brief:   GPIO Echo interrupt handler for each sensor
 */
#ifdef SAPI_USE_INTERRUPTS
#ifndef OVERRIDE_SAPI_HCSR04_GPIO_IRQ
void GPIO0_IRQHandler(void)
{
1a001c1c:	b508      	push	{r3, lr}
   serveInterrupt(0);
1a001c1e:	2000      	movs	r0, #0
1a001c20:	f7ff ffce 	bl	1a001bc0 <serveInterrupt>
}
1a001c24:	bd08      	pop	{r3, pc}

1a001c26 <GPIO1_IRQHandler>:

void GPIO1_IRQHandler(void)
{
1a001c26:	b508      	push	{r3, lr}
   serveInterrupt(1);
1a001c28:	2001      	movs	r0, #1
1a001c2a:	f7ff ffc9 	bl	1a001bc0 <serveInterrupt>
}
1a001c2e:	bd08      	pop	{r3, pc}

1a001c30 <GPIO2_IRQHandler>:

void GPIO2_IRQHandler(void)
{
1a001c30:	b508      	push	{r3, lr}
   serveInterrupt(2);
1a001c32:	2002      	movs	r0, #2
1a001c34:	f7ff ffc4 	bl	1a001bc0 <serveInterrupt>
}
1a001c38:	bd08      	pop	{r3, pc}
1a001c3a:	Address 0x000000001a001c3a is out of bounds.


1a001c3c <__aeabi_uldivmod>:
1a001c3c:	b953      	cbnz	r3, 1a001c54 <__aeabi_uldivmod+0x18>
1a001c3e:	b94a      	cbnz	r2, 1a001c54 <__aeabi_uldivmod+0x18>
1a001c40:	2900      	cmp	r1, #0
1a001c42:	bf08      	it	eq
1a001c44:	2800      	cmpeq	r0, #0
1a001c46:	bf1c      	itt	ne
1a001c48:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a001c4c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a001c50:	f000 b974 	b.w	1a001f3c <__aeabi_idiv0>
1a001c54:	f1ad 0c08 	sub.w	ip, sp, #8
1a001c58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a001c5c:	f000 f806 	bl	1a001c6c <__udivmoddi4>
1a001c60:	f8dd e004 	ldr.w	lr, [sp, #4]
1a001c64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a001c68:	b004      	add	sp, #16
1a001c6a:	4770      	bx	lr

1a001c6c <__udivmoddi4>:
1a001c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a001c70:	9e08      	ldr	r6, [sp, #32]
1a001c72:	4604      	mov	r4, r0
1a001c74:	4688      	mov	r8, r1
1a001c76:	2b00      	cmp	r3, #0
1a001c78:	f040 8085 	bne.w	1a001d86 <__udivmoddi4+0x11a>
1a001c7c:	428a      	cmp	r2, r1
1a001c7e:	4615      	mov	r5, r2
1a001c80:	d948      	bls.n	1a001d14 <__udivmoddi4+0xa8>
1a001c82:	fab2 f282 	clz	r2, r2
1a001c86:	b14a      	cbz	r2, 1a001c9c <__udivmoddi4+0x30>
1a001c88:	f1c2 0720 	rsb	r7, r2, #32
1a001c8c:	fa01 f302 	lsl.w	r3, r1, r2
1a001c90:	fa20 f707 	lsr.w	r7, r0, r7
1a001c94:	4095      	lsls	r5, r2
1a001c96:	ea47 0803 	orr.w	r8, r7, r3
1a001c9a:	4094      	lsls	r4, r2
1a001c9c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001ca0:	0c23      	lsrs	r3, r4, #16
1a001ca2:	fbb8 f7fe 	udiv	r7, r8, lr
1a001ca6:	fa1f fc85 	uxth.w	ip, r5
1a001caa:	fb0e 8817 	mls	r8, lr, r7, r8
1a001cae:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a001cb2:	fb07 f10c 	mul.w	r1, r7, ip
1a001cb6:	4299      	cmp	r1, r3
1a001cb8:	d909      	bls.n	1a001cce <__udivmoddi4+0x62>
1a001cba:	18eb      	adds	r3, r5, r3
1a001cbc:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a001cc0:	f080 80e3 	bcs.w	1a001e8a <__udivmoddi4+0x21e>
1a001cc4:	4299      	cmp	r1, r3
1a001cc6:	f240 80e0 	bls.w	1a001e8a <__udivmoddi4+0x21e>
1a001cca:	3f02      	subs	r7, #2
1a001ccc:	442b      	add	r3, r5
1a001cce:	1a5b      	subs	r3, r3, r1
1a001cd0:	b2a4      	uxth	r4, r4
1a001cd2:	fbb3 f0fe 	udiv	r0, r3, lr
1a001cd6:	fb0e 3310 	mls	r3, lr, r0, r3
1a001cda:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a001cde:	fb00 fc0c 	mul.w	ip, r0, ip
1a001ce2:	45a4      	cmp	ip, r4
1a001ce4:	d909      	bls.n	1a001cfa <__udivmoddi4+0x8e>
1a001ce6:	192c      	adds	r4, r5, r4
1a001ce8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a001cec:	f080 80cb 	bcs.w	1a001e86 <__udivmoddi4+0x21a>
1a001cf0:	45a4      	cmp	ip, r4
1a001cf2:	f240 80c8 	bls.w	1a001e86 <__udivmoddi4+0x21a>
1a001cf6:	3802      	subs	r0, #2
1a001cf8:	442c      	add	r4, r5
1a001cfa:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a001cfe:	eba4 040c 	sub.w	r4, r4, ip
1a001d02:	2700      	movs	r7, #0
1a001d04:	b11e      	cbz	r6, 1a001d0e <__udivmoddi4+0xa2>
1a001d06:	40d4      	lsrs	r4, r2
1a001d08:	2300      	movs	r3, #0
1a001d0a:	e9c6 4300 	strd	r4, r3, [r6]
1a001d0e:	4639      	mov	r1, r7
1a001d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001d14:	2a00      	cmp	r2, #0
1a001d16:	d053      	beq.n	1a001dc0 <__udivmoddi4+0x154>
1a001d18:	fab2 f282 	clz	r2, r2
1a001d1c:	2a00      	cmp	r2, #0
1a001d1e:	f040 80b6 	bne.w	1a001e8e <__udivmoddi4+0x222>
1a001d22:	1b49      	subs	r1, r1, r5
1a001d24:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001d28:	fa1f f885 	uxth.w	r8, r5
1a001d2c:	2701      	movs	r7, #1
1a001d2e:	fbb1 fcfe 	udiv	ip, r1, lr
1a001d32:	0c23      	lsrs	r3, r4, #16
1a001d34:	fb0e 111c 	mls	r1, lr, ip, r1
1a001d38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a001d3c:	fb08 f10c 	mul.w	r1, r8, ip
1a001d40:	4299      	cmp	r1, r3
1a001d42:	d907      	bls.n	1a001d54 <__udivmoddi4+0xe8>
1a001d44:	18eb      	adds	r3, r5, r3
1a001d46:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a001d4a:	d202      	bcs.n	1a001d52 <__udivmoddi4+0xe6>
1a001d4c:	4299      	cmp	r1, r3
1a001d4e:	f200 80ec 	bhi.w	1a001f2a <__udivmoddi4+0x2be>
1a001d52:	4684      	mov	ip, r0
1a001d54:	1a59      	subs	r1, r3, r1
1a001d56:	b2a3      	uxth	r3, r4
1a001d58:	fbb1 f0fe 	udiv	r0, r1, lr
1a001d5c:	fb0e 1410 	mls	r4, lr, r0, r1
1a001d60:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a001d64:	fb08 f800 	mul.w	r8, r8, r0
1a001d68:	45a0      	cmp	r8, r4
1a001d6a:	d907      	bls.n	1a001d7c <__udivmoddi4+0x110>
1a001d6c:	192c      	adds	r4, r5, r4
1a001d6e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a001d72:	d202      	bcs.n	1a001d7a <__udivmoddi4+0x10e>
1a001d74:	45a0      	cmp	r8, r4
1a001d76:	f200 80dc 	bhi.w	1a001f32 <__udivmoddi4+0x2c6>
1a001d7a:	4618      	mov	r0, r3
1a001d7c:	eba4 0408 	sub.w	r4, r4, r8
1a001d80:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a001d84:	e7be      	b.n	1a001d04 <__udivmoddi4+0x98>
1a001d86:	428b      	cmp	r3, r1
1a001d88:	d908      	bls.n	1a001d9c <__udivmoddi4+0x130>
1a001d8a:	2e00      	cmp	r6, #0
1a001d8c:	d078      	beq.n	1a001e80 <__udivmoddi4+0x214>
1a001d8e:	2700      	movs	r7, #0
1a001d90:	e9c6 0100 	strd	r0, r1, [r6]
1a001d94:	4638      	mov	r0, r7
1a001d96:	4639      	mov	r1, r7
1a001d98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001d9c:	fab3 f783 	clz	r7, r3
1a001da0:	b97f      	cbnz	r7, 1a001dc2 <__udivmoddi4+0x156>
1a001da2:	428b      	cmp	r3, r1
1a001da4:	d302      	bcc.n	1a001dac <__udivmoddi4+0x140>
1a001da6:	4282      	cmp	r2, r0
1a001da8:	f200 80bd 	bhi.w	1a001f26 <__udivmoddi4+0x2ba>
1a001dac:	1a84      	subs	r4, r0, r2
1a001dae:	eb61 0303 	sbc.w	r3, r1, r3
1a001db2:	2001      	movs	r0, #1
1a001db4:	4698      	mov	r8, r3
1a001db6:	2e00      	cmp	r6, #0
1a001db8:	d0a9      	beq.n	1a001d0e <__udivmoddi4+0xa2>
1a001dba:	e9c6 4800 	strd	r4, r8, [r6]
1a001dbe:	e7a6      	b.n	1a001d0e <__udivmoddi4+0xa2>
1a001dc0:	deff      	udf	#255	; 0xff
1a001dc2:	f1c7 0520 	rsb	r5, r7, #32
1a001dc6:	40bb      	lsls	r3, r7
1a001dc8:	fa22 fc05 	lsr.w	ip, r2, r5
1a001dcc:	ea4c 0c03 	orr.w	ip, ip, r3
1a001dd0:	fa01 f407 	lsl.w	r4, r1, r7
1a001dd4:	fa20 f805 	lsr.w	r8, r0, r5
1a001dd8:	fa21 f305 	lsr.w	r3, r1, r5
1a001ddc:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
1a001de0:	ea48 0404 	orr.w	r4, r8, r4
1a001de4:	fbb3 f9fe 	udiv	r9, r3, lr
1a001de8:	0c21      	lsrs	r1, r4, #16
1a001dea:	fb0e 3319 	mls	r3, lr, r9, r3
1a001dee:	fa1f f88c 	uxth.w	r8, ip
1a001df2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a001df6:	fb09 fa08 	mul.w	sl, r9, r8
1a001dfa:	459a      	cmp	sl, r3
1a001dfc:	fa02 f207 	lsl.w	r2, r2, r7
1a001e00:	fa00 f107 	lsl.w	r1, r0, r7
1a001e04:	d90b      	bls.n	1a001e1e <__udivmoddi4+0x1b2>
1a001e06:	eb1c 0303 	adds.w	r3, ip, r3
1a001e0a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a001e0e:	f080 8088 	bcs.w	1a001f22 <__udivmoddi4+0x2b6>
1a001e12:	459a      	cmp	sl, r3
1a001e14:	f240 8085 	bls.w	1a001f22 <__udivmoddi4+0x2b6>
1a001e18:	f1a9 0902 	sub.w	r9, r9, #2
1a001e1c:	4463      	add	r3, ip
1a001e1e:	eba3 030a 	sub.w	r3, r3, sl
1a001e22:	b2a4      	uxth	r4, r4
1a001e24:	fbb3 f0fe 	udiv	r0, r3, lr
1a001e28:	fb0e 3310 	mls	r3, lr, r0, r3
1a001e2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a001e30:	fb00 f808 	mul.w	r8, r0, r8
1a001e34:	45a0      	cmp	r8, r4
1a001e36:	d908      	bls.n	1a001e4a <__udivmoddi4+0x1de>
1a001e38:	eb1c 0404 	adds.w	r4, ip, r4
1a001e3c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a001e40:	d26b      	bcs.n	1a001f1a <__udivmoddi4+0x2ae>
1a001e42:	45a0      	cmp	r8, r4
1a001e44:	d969      	bls.n	1a001f1a <__udivmoddi4+0x2ae>
1a001e46:	3802      	subs	r0, #2
1a001e48:	4464      	add	r4, ip
1a001e4a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a001e4e:	eba4 0408 	sub.w	r4, r4, r8
1a001e52:	fba0 8902 	umull	r8, r9, r0, r2
1a001e56:	454c      	cmp	r4, r9
1a001e58:	46c6      	mov	lr, r8
1a001e5a:	464b      	mov	r3, r9
1a001e5c:	d354      	bcc.n	1a001f08 <__udivmoddi4+0x29c>
1a001e5e:	d051      	beq.n	1a001f04 <__udivmoddi4+0x298>
1a001e60:	2e00      	cmp	r6, #0
1a001e62:	d069      	beq.n	1a001f38 <__udivmoddi4+0x2cc>
1a001e64:	ebb1 020e 	subs.w	r2, r1, lr
1a001e68:	eb64 0403 	sbc.w	r4, r4, r3
1a001e6c:	fa04 f505 	lsl.w	r5, r4, r5
1a001e70:	fa22 f307 	lsr.w	r3, r2, r7
1a001e74:	40fc      	lsrs	r4, r7
1a001e76:	431d      	orrs	r5, r3
1a001e78:	e9c6 5400 	strd	r5, r4, [r6]
1a001e7c:	2700      	movs	r7, #0
1a001e7e:	e746      	b.n	1a001d0e <__udivmoddi4+0xa2>
1a001e80:	4637      	mov	r7, r6
1a001e82:	4630      	mov	r0, r6
1a001e84:	e743      	b.n	1a001d0e <__udivmoddi4+0xa2>
1a001e86:	4618      	mov	r0, r3
1a001e88:	e737      	b.n	1a001cfa <__udivmoddi4+0x8e>
1a001e8a:	4607      	mov	r7, r0
1a001e8c:	e71f      	b.n	1a001cce <__udivmoddi4+0x62>
1a001e8e:	f1c2 0320 	rsb	r3, r2, #32
1a001e92:	fa20 f703 	lsr.w	r7, r0, r3
1a001e96:	4095      	lsls	r5, r2
1a001e98:	fa01 f002 	lsl.w	r0, r1, r2
1a001e9c:	fa21 f303 	lsr.w	r3, r1, r3
1a001ea0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001ea4:	4338      	orrs	r0, r7
1a001ea6:	0c01      	lsrs	r1, r0, #16
1a001ea8:	fbb3 f7fe 	udiv	r7, r3, lr
1a001eac:	fa1f f885 	uxth.w	r8, r5
1a001eb0:	fb0e 3317 	mls	r3, lr, r7, r3
1a001eb4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a001eb8:	fb07 f308 	mul.w	r3, r7, r8
1a001ebc:	428b      	cmp	r3, r1
1a001ebe:	fa04 f402 	lsl.w	r4, r4, r2
1a001ec2:	d907      	bls.n	1a001ed4 <__udivmoddi4+0x268>
1a001ec4:	1869      	adds	r1, r5, r1
1a001ec6:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a001eca:	d228      	bcs.n	1a001f1e <__udivmoddi4+0x2b2>
1a001ecc:	428b      	cmp	r3, r1
1a001ece:	d926      	bls.n	1a001f1e <__udivmoddi4+0x2b2>
1a001ed0:	3f02      	subs	r7, #2
1a001ed2:	4429      	add	r1, r5
1a001ed4:	1acb      	subs	r3, r1, r3
1a001ed6:	b281      	uxth	r1, r0
1a001ed8:	fbb3 f0fe 	udiv	r0, r3, lr
1a001edc:	fb0e 3310 	mls	r3, lr, r0, r3
1a001ee0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a001ee4:	fb00 f308 	mul.w	r3, r0, r8
1a001ee8:	428b      	cmp	r3, r1
1a001eea:	d907      	bls.n	1a001efc <__udivmoddi4+0x290>
1a001eec:	1869      	adds	r1, r5, r1
1a001eee:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a001ef2:	d210      	bcs.n	1a001f16 <__udivmoddi4+0x2aa>
1a001ef4:	428b      	cmp	r3, r1
1a001ef6:	d90e      	bls.n	1a001f16 <__udivmoddi4+0x2aa>
1a001ef8:	3802      	subs	r0, #2
1a001efa:	4429      	add	r1, r5
1a001efc:	1ac9      	subs	r1, r1, r3
1a001efe:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a001f02:	e714      	b.n	1a001d2e <__udivmoddi4+0xc2>
1a001f04:	4541      	cmp	r1, r8
1a001f06:	d2ab      	bcs.n	1a001e60 <__udivmoddi4+0x1f4>
1a001f08:	ebb8 0e02 	subs.w	lr, r8, r2
1a001f0c:	eb69 020c 	sbc.w	r2, r9, ip
1a001f10:	3801      	subs	r0, #1
1a001f12:	4613      	mov	r3, r2
1a001f14:	e7a4      	b.n	1a001e60 <__udivmoddi4+0x1f4>
1a001f16:	4660      	mov	r0, ip
1a001f18:	e7f0      	b.n	1a001efc <__udivmoddi4+0x290>
1a001f1a:	4618      	mov	r0, r3
1a001f1c:	e795      	b.n	1a001e4a <__udivmoddi4+0x1de>
1a001f1e:	4667      	mov	r7, ip
1a001f20:	e7d8      	b.n	1a001ed4 <__udivmoddi4+0x268>
1a001f22:	4681      	mov	r9, r0
1a001f24:	e77b      	b.n	1a001e1e <__udivmoddi4+0x1b2>
1a001f26:	4638      	mov	r0, r7
1a001f28:	e745      	b.n	1a001db6 <__udivmoddi4+0x14a>
1a001f2a:	f1ac 0c02 	sub.w	ip, ip, #2
1a001f2e:	442b      	add	r3, r5
1a001f30:	e710      	b.n	1a001d54 <__udivmoddi4+0xe8>
1a001f32:	3802      	subs	r0, #2
1a001f34:	442c      	add	r4, r5
1a001f36:	e721      	b.n	1a001d7c <__udivmoddi4+0x110>
1a001f38:	4637      	mov	r7, r6
1a001f3a:	e6e8      	b.n	1a001d0e <__udivmoddi4+0xa2>

1a001f3c <__aeabi_idiv0>:
1a001f3c:	4770      	bx	lr
1a001f3e:	bf00      	nop

1a001f40 <__sflush_r>:
1a001f40:	898a      	ldrh	r2, [r1, #12]
1a001f42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a001f46:	4605      	mov	r5, r0
1a001f48:	0710      	lsls	r0, r2, #28
1a001f4a:	460c      	mov	r4, r1
1a001f4c:	d458      	bmi.n	1a002000 <__sflush_r+0xc0>
1a001f4e:	684b      	ldr	r3, [r1, #4]
1a001f50:	2b00      	cmp	r3, #0
1a001f52:	dc05      	bgt.n	1a001f60 <__sflush_r+0x20>
1a001f54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
1a001f56:	2b00      	cmp	r3, #0
1a001f58:	dc02      	bgt.n	1a001f60 <__sflush_r+0x20>
1a001f5a:	2000      	movs	r0, #0
1a001f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a001f60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a001f62:	2e00      	cmp	r6, #0
1a001f64:	d0f9      	beq.n	1a001f5a <__sflush_r+0x1a>
1a001f66:	2300      	movs	r3, #0
1a001f68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
1a001f6c:	682f      	ldr	r7, [r5, #0]
1a001f6e:	602b      	str	r3, [r5, #0]
1a001f70:	d032      	beq.n	1a001fd8 <__sflush_r+0x98>
1a001f72:	6d60      	ldr	r0, [r4, #84]	; 0x54
1a001f74:	89a3      	ldrh	r3, [r4, #12]
1a001f76:	075a      	lsls	r2, r3, #29
1a001f78:	d505      	bpl.n	1a001f86 <__sflush_r+0x46>
1a001f7a:	6863      	ldr	r3, [r4, #4]
1a001f7c:	1ac0      	subs	r0, r0, r3
1a001f7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
1a001f80:	b10b      	cbz	r3, 1a001f86 <__sflush_r+0x46>
1a001f82:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a001f84:	1ac0      	subs	r0, r0, r3
1a001f86:	2300      	movs	r3, #0
1a001f88:	4602      	mov	r2, r0
1a001f8a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a001f8c:	6a21      	ldr	r1, [r4, #32]
1a001f8e:	4628      	mov	r0, r5
1a001f90:	47b0      	blx	r6
1a001f92:	1c43      	adds	r3, r0, #1
1a001f94:	89a3      	ldrh	r3, [r4, #12]
1a001f96:	d106      	bne.n	1a001fa6 <__sflush_r+0x66>
1a001f98:	6829      	ldr	r1, [r5, #0]
1a001f9a:	291d      	cmp	r1, #29
1a001f9c:	d849      	bhi.n	1a002032 <__sflush_r+0xf2>
1a001f9e:	4a2a      	ldr	r2, [pc, #168]	; (1a002048 <__sflush_r+0x108>)
1a001fa0:	40ca      	lsrs	r2, r1
1a001fa2:	07d6      	lsls	r6, r2, #31
1a001fa4:	d545      	bpl.n	1a002032 <__sflush_r+0xf2>
1a001fa6:	2200      	movs	r2, #0
1a001fa8:	6062      	str	r2, [r4, #4]
1a001faa:	04d9      	lsls	r1, r3, #19
1a001fac:	6922      	ldr	r2, [r4, #16]
1a001fae:	6022      	str	r2, [r4, #0]
1a001fb0:	d504      	bpl.n	1a001fbc <__sflush_r+0x7c>
1a001fb2:	1c42      	adds	r2, r0, #1
1a001fb4:	d101      	bne.n	1a001fba <__sflush_r+0x7a>
1a001fb6:	682b      	ldr	r3, [r5, #0]
1a001fb8:	b903      	cbnz	r3, 1a001fbc <__sflush_r+0x7c>
1a001fba:	6560      	str	r0, [r4, #84]	; 0x54
1a001fbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a001fbe:	602f      	str	r7, [r5, #0]
1a001fc0:	2900      	cmp	r1, #0
1a001fc2:	d0ca      	beq.n	1a001f5a <__sflush_r+0x1a>
1a001fc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a001fc8:	4299      	cmp	r1, r3
1a001fca:	d002      	beq.n	1a001fd2 <__sflush_r+0x92>
1a001fcc:	4628      	mov	r0, r5
1a001fce:	f000 f99d 	bl	1a00230c <_free_r>
1a001fd2:	2000      	movs	r0, #0
1a001fd4:	6360      	str	r0, [r4, #52]	; 0x34
1a001fd6:	e7c1      	b.n	1a001f5c <__sflush_r+0x1c>
1a001fd8:	6a21      	ldr	r1, [r4, #32]
1a001fda:	2301      	movs	r3, #1
1a001fdc:	4628      	mov	r0, r5
1a001fde:	47b0      	blx	r6
1a001fe0:	1c41      	adds	r1, r0, #1
1a001fe2:	d1c7      	bne.n	1a001f74 <__sflush_r+0x34>
1a001fe4:	682b      	ldr	r3, [r5, #0]
1a001fe6:	2b00      	cmp	r3, #0
1a001fe8:	d0c4      	beq.n	1a001f74 <__sflush_r+0x34>
1a001fea:	2b1d      	cmp	r3, #29
1a001fec:	d001      	beq.n	1a001ff2 <__sflush_r+0xb2>
1a001fee:	2b16      	cmp	r3, #22
1a001ff0:	d101      	bne.n	1a001ff6 <__sflush_r+0xb6>
1a001ff2:	602f      	str	r7, [r5, #0]
1a001ff4:	e7b1      	b.n	1a001f5a <__sflush_r+0x1a>
1a001ff6:	89a3      	ldrh	r3, [r4, #12]
1a001ff8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a001ffc:	81a3      	strh	r3, [r4, #12]
1a001ffe:	e7ad      	b.n	1a001f5c <__sflush_r+0x1c>
1a002000:	690f      	ldr	r7, [r1, #16]
1a002002:	2f00      	cmp	r7, #0
1a002004:	d0a9      	beq.n	1a001f5a <__sflush_r+0x1a>
1a002006:	0793      	lsls	r3, r2, #30
1a002008:	680e      	ldr	r6, [r1, #0]
1a00200a:	bf08      	it	eq
1a00200c:	694b      	ldreq	r3, [r1, #20]
1a00200e:	600f      	str	r7, [r1, #0]
1a002010:	bf18      	it	ne
1a002012:	2300      	movne	r3, #0
1a002014:	eba6 0807 	sub.w	r8, r6, r7
1a002018:	608b      	str	r3, [r1, #8]
1a00201a:	f1b8 0f00 	cmp.w	r8, #0
1a00201e:	dd9c      	ble.n	1a001f5a <__sflush_r+0x1a>
1a002020:	4643      	mov	r3, r8
1a002022:	463a      	mov	r2, r7
1a002024:	6a21      	ldr	r1, [r4, #32]
1a002026:	6aa6      	ldr	r6, [r4, #40]	; 0x28
1a002028:	4628      	mov	r0, r5
1a00202a:	47b0      	blx	r6
1a00202c:	2800      	cmp	r0, #0
1a00202e:	dc06      	bgt.n	1a00203e <__sflush_r+0xfe>
1a002030:	89a3      	ldrh	r3, [r4, #12]
1a002032:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a002036:	81a3      	strh	r3, [r4, #12]
1a002038:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00203c:	e78e      	b.n	1a001f5c <__sflush_r+0x1c>
1a00203e:	4407      	add	r7, r0
1a002040:	eba8 0800 	sub.w	r8, r8, r0
1a002044:	e7e9      	b.n	1a00201a <__sflush_r+0xda>
1a002046:	bf00      	nop
1a002048:	20400001 	.word	0x20400001

1a00204c <_fflush_r>:
1a00204c:	b538      	push	{r3, r4, r5, lr}
1a00204e:	690b      	ldr	r3, [r1, #16]
1a002050:	4605      	mov	r5, r0
1a002052:	460c      	mov	r4, r1
1a002054:	b913      	cbnz	r3, 1a00205c <_fflush_r+0x10>
1a002056:	2500      	movs	r5, #0
1a002058:	4628      	mov	r0, r5
1a00205a:	bd38      	pop	{r3, r4, r5, pc}
1a00205c:	b118      	cbz	r0, 1a002066 <_fflush_r+0x1a>
1a00205e:	6983      	ldr	r3, [r0, #24]
1a002060:	b90b      	cbnz	r3, 1a002066 <_fflush_r+0x1a>
1a002062:	f000 f887 	bl	1a002174 <__sinit>
1a002066:	4b14      	ldr	r3, [pc, #80]	; (1a0020b8 <_fflush_r+0x6c>)
1a002068:	429c      	cmp	r4, r3
1a00206a:	d11b      	bne.n	1a0020a4 <_fflush_r+0x58>
1a00206c:	686c      	ldr	r4, [r5, #4]
1a00206e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a002072:	2b00      	cmp	r3, #0
1a002074:	d0ef      	beq.n	1a002056 <_fflush_r+0xa>
1a002076:	6e62      	ldr	r2, [r4, #100]	; 0x64
1a002078:	07d0      	lsls	r0, r2, #31
1a00207a:	d404      	bmi.n	1a002086 <_fflush_r+0x3a>
1a00207c:	0599      	lsls	r1, r3, #22
1a00207e:	d402      	bmi.n	1a002086 <_fflush_r+0x3a>
1a002080:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a002082:	f000 f938 	bl	1a0022f6 <__retarget_lock_acquire_recursive>
1a002086:	4628      	mov	r0, r5
1a002088:	4621      	mov	r1, r4
1a00208a:	f7ff ff59 	bl	1a001f40 <__sflush_r>
1a00208e:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a002090:	07da      	lsls	r2, r3, #31
1a002092:	4605      	mov	r5, r0
1a002094:	d4e0      	bmi.n	1a002058 <_fflush_r+0xc>
1a002096:	89a3      	ldrh	r3, [r4, #12]
1a002098:	059b      	lsls	r3, r3, #22
1a00209a:	d4dd      	bmi.n	1a002058 <_fflush_r+0xc>
1a00209c:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a00209e:	f000 f92b 	bl	1a0022f8 <__retarget_lock_release_recursive>
1a0020a2:	e7d9      	b.n	1a002058 <_fflush_r+0xc>
1a0020a4:	4b05      	ldr	r3, [pc, #20]	; (1a0020bc <_fflush_r+0x70>)
1a0020a6:	429c      	cmp	r4, r3
1a0020a8:	d101      	bne.n	1a0020ae <_fflush_r+0x62>
1a0020aa:	68ac      	ldr	r4, [r5, #8]
1a0020ac:	e7df      	b.n	1a00206e <_fflush_r+0x22>
1a0020ae:	4b04      	ldr	r3, [pc, #16]	; (1a0020c0 <_fflush_r+0x74>)
1a0020b0:	429c      	cmp	r4, r3
1a0020b2:	bf08      	it	eq
1a0020b4:	68ec      	ldreq	r4, [r5, #12]
1a0020b6:	e7da      	b.n	1a00206e <_fflush_r+0x22>
1a0020b8:	1a002b40 	.word	0x1a002b40
1a0020bc:	1a002b60 	.word	0x1a002b60
1a0020c0:	1a002b20 	.word	0x1a002b20

1a0020c4 <std>:
1a0020c4:	2300      	movs	r3, #0
1a0020c6:	b510      	push	{r4, lr}
1a0020c8:	4604      	mov	r4, r0
1a0020ca:	e9c0 3300 	strd	r3, r3, [r0]
1a0020ce:	6083      	str	r3, [r0, #8]
1a0020d0:	8181      	strh	r1, [r0, #12]
1a0020d2:	6643      	str	r3, [r0, #100]	; 0x64
1a0020d4:	81c2      	strh	r2, [r0, #14]
1a0020d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
1a0020da:	6183      	str	r3, [r0, #24]
1a0020dc:	4619      	mov	r1, r3
1a0020de:	2208      	movs	r2, #8
1a0020e0:	305c      	adds	r0, #92	; 0x5c
1a0020e2:	f000 f90a 	bl	1a0022fa <memset>
1a0020e6:	4b05      	ldr	r3, [pc, #20]	; (1a0020fc <std+0x38>)
1a0020e8:	6263      	str	r3, [r4, #36]	; 0x24
1a0020ea:	4b05      	ldr	r3, [pc, #20]	; (1a002100 <std+0x3c>)
1a0020ec:	62a3      	str	r3, [r4, #40]	; 0x28
1a0020ee:	4b05      	ldr	r3, [pc, #20]	; (1a002104 <std+0x40>)
1a0020f0:	62e3      	str	r3, [r4, #44]	; 0x2c
1a0020f2:	4b05      	ldr	r3, [pc, #20]	; (1a002108 <std+0x44>)
1a0020f4:	6224      	str	r4, [r4, #32]
1a0020f6:	6323      	str	r3, [r4, #48]	; 0x30
1a0020f8:	bd10      	pop	{r4, pc}
1a0020fa:	bf00      	nop
1a0020fc:	1a002549 	.word	0x1a002549
1a002100:	1a00256b 	.word	0x1a00256b
1a002104:	1a0025a3 	.word	0x1a0025a3
1a002108:	1a0025c7 	.word	0x1a0025c7

1a00210c <_cleanup_r>:
1a00210c:	4901      	ldr	r1, [pc, #4]	; (1a002114 <_cleanup_r+0x8>)
1a00210e:	f000 b8af 	b.w	1a002270 <_fwalk_reent>
1a002112:	bf00      	nop
1a002114:	1a00204d 	.word	0x1a00204d

1a002118 <__sfmoreglue>:
1a002118:	b570      	push	{r4, r5, r6, lr}
1a00211a:	1e4a      	subs	r2, r1, #1
1a00211c:	2568      	movs	r5, #104	; 0x68
1a00211e:	4355      	muls	r5, r2
1a002120:	460e      	mov	r6, r1
1a002122:	f105 0174 	add.w	r1, r5, #116	; 0x74
1a002126:	f000 f93f 	bl	1a0023a8 <_malloc_r>
1a00212a:	4604      	mov	r4, r0
1a00212c:	b140      	cbz	r0, 1a002140 <__sfmoreglue+0x28>
1a00212e:	2100      	movs	r1, #0
1a002130:	e9c0 1600 	strd	r1, r6, [r0]
1a002134:	300c      	adds	r0, #12
1a002136:	60a0      	str	r0, [r4, #8]
1a002138:	f105 0268 	add.w	r2, r5, #104	; 0x68
1a00213c:	f000 f8dd 	bl	1a0022fa <memset>
1a002140:	4620      	mov	r0, r4
1a002142:	bd70      	pop	{r4, r5, r6, pc}

1a002144 <__sfp_lock_acquire>:
1a002144:	4801      	ldr	r0, [pc, #4]	; (1a00214c <__sfp_lock_acquire+0x8>)
1a002146:	f000 b8d6 	b.w	1a0022f6 <__retarget_lock_acquire_recursive>
1a00214a:	bf00      	nop
1a00214c:	1000018c 	.word	0x1000018c

1a002150 <__sfp_lock_release>:
1a002150:	4801      	ldr	r0, [pc, #4]	; (1a002158 <__sfp_lock_release+0x8>)
1a002152:	f000 b8d1 	b.w	1a0022f8 <__retarget_lock_release_recursive>
1a002156:	bf00      	nop
1a002158:	1000018c 	.word	0x1000018c

1a00215c <__sinit_lock_acquire>:
1a00215c:	4801      	ldr	r0, [pc, #4]	; (1a002164 <__sinit_lock_acquire+0x8>)
1a00215e:	f000 b8ca 	b.w	1a0022f6 <__retarget_lock_acquire_recursive>
1a002162:	bf00      	nop
1a002164:	10000187 	.word	0x10000187

1a002168 <__sinit_lock_release>:
1a002168:	4801      	ldr	r0, [pc, #4]	; (1a002170 <__sinit_lock_release+0x8>)
1a00216a:	f000 b8c5 	b.w	1a0022f8 <__retarget_lock_release_recursive>
1a00216e:	bf00      	nop
1a002170:	10000187 	.word	0x10000187

1a002174 <__sinit>:
1a002174:	b510      	push	{r4, lr}
1a002176:	4604      	mov	r4, r0
1a002178:	f7ff fff0 	bl	1a00215c <__sinit_lock_acquire>
1a00217c:	69a3      	ldr	r3, [r4, #24]
1a00217e:	b11b      	cbz	r3, 1a002188 <__sinit+0x14>
1a002180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a002184:	f7ff bff0 	b.w	1a002168 <__sinit_lock_release>
1a002188:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
1a00218c:	6523      	str	r3, [r4, #80]	; 0x50
1a00218e:	4b13      	ldr	r3, [pc, #76]	; (1a0021dc <__sinit+0x68>)
1a002190:	4a13      	ldr	r2, [pc, #76]	; (1a0021e0 <__sinit+0x6c>)
1a002192:	681b      	ldr	r3, [r3, #0]
1a002194:	62a2      	str	r2, [r4, #40]	; 0x28
1a002196:	42a3      	cmp	r3, r4
1a002198:	bf04      	itt	eq
1a00219a:	2301      	moveq	r3, #1
1a00219c:	61a3      	streq	r3, [r4, #24]
1a00219e:	4620      	mov	r0, r4
1a0021a0:	f000 f820 	bl	1a0021e4 <__sfp>
1a0021a4:	6060      	str	r0, [r4, #4]
1a0021a6:	4620      	mov	r0, r4
1a0021a8:	f000 f81c 	bl	1a0021e4 <__sfp>
1a0021ac:	60a0      	str	r0, [r4, #8]
1a0021ae:	4620      	mov	r0, r4
1a0021b0:	f000 f818 	bl	1a0021e4 <__sfp>
1a0021b4:	2200      	movs	r2, #0
1a0021b6:	60e0      	str	r0, [r4, #12]
1a0021b8:	2104      	movs	r1, #4
1a0021ba:	6860      	ldr	r0, [r4, #4]
1a0021bc:	f7ff ff82 	bl	1a0020c4 <std>
1a0021c0:	2201      	movs	r2, #1
1a0021c2:	2109      	movs	r1, #9
1a0021c4:	68a0      	ldr	r0, [r4, #8]
1a0021c6:	f7ff ff7d 	bl	1a0020c4 <std>
1a0021ca:	2202      	movs	r2, #2
1a0021cc:	2112      	movs	r1, #18
1a0021ce:	68e0      	ldr	r0, [r4, #12]
1a0021d0:	f7ff ff78 	bl	1a0020c4 <std>
1a0021d4:	2301      	movs	r3, #1
1a0021d6:	61a3      	str	r3, [r4, #24]
1a0021d8:	e7d2      	b.n	1a002180 <__sinit+0xc>
1a0021da:	bf00      	nop
1a0021dc:	1a002b80 	.word	0x1a002b80
1a0021e0:	1a00210d 	.word	0x1a00210d

1a0021e4 <__sfp>:
1a0021e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0021e6:	4607      	mov	r7, r0
1a0021e8:	f7ff ffac 	bl	1a002144 <__sfp_lock_acquire>
1a0021ec:	4b1e      	ldr	r3, [pc, #120]	; (1a002268 <__sfp+0x84>)
1a0021ee:	681e      	ldr	r6, [r3, #0]
1a0021f0:	69b3      	ldr	r3, [r6, #24]
1a0021f2:	b913      	cbnz	r3, 1a0021fa <__sfp+0x16>
1a0021f4:	4630      	mov	r0, r6
1a0021f6:	f7ff ffbd 	bl	1a002174 <__sinit>
1a0021fa:	3648      	adds	r6, #72	; 0x48
1a0021fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
1a002200:	3b01      	subs	r3, #1
1a002202:	d503      	bpl.n	1a00220c <__sfp+0x28>
1a002204:	6833      	ldr	r3, [r6, #0]
1a002206:	b30b      	cbz	r3, 1a00224c <__sfp+0x68>
1a002208:	6836      	ldr	r6, [r6, #0]
1a00220a:	e7f7      	b.n	1a0021fc <__sfp+0x18>
1a00220c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
1a002210:	b9d5      	cbnz	r5, 1a002248 <__sfp+0x64>
1a002212:	4b16      	ldr	r3, [pc, #88]	; (1a00226c <__sfp+0x88>)
1a002214:	60e3      	str	r3, [r4, #12]
1a002216:	f104 0058 	add.w	r0, r4, #88	; 0x58
1a00221a:	6665      	str	r5, [r4, #100]	; 0x64
1a00221c:	f000 f86a 	bl	1a0022f4 <__retarget_lock_init_recursive>
1a002220:	f7ff ff96 	bl	1a002150 <__sfp_lock_release>
1a002224:	6025      	str	r5, [r4, #0]
1a002226:	e9c4 5501 	strd	r5, r5, [r4, #4]
1a00222a:	e9c4 5504 	strd	r5, r5, [r4, #16]
1a00222e:	61a5      	str	r5, [r4, #24]
1a002230:	2208      	movs	r2, #8
1a002232:	4629      	mov	r1, r5
1a002234:	f104 005c 	add.w	r0, r4, #92	; 0x5c
1a002238:	f000 f85f 	bl	1a0022fa <memset>
1a00223c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
1a002240:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
1a002244:	4620      	mov	r0, r4
1a002246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a002248:	3468      	adds	r4, #104	; 0x68
1a00224a:	e7d9      	b.n	1a002200 <__sfp+0x1c>
1a00224c:	2104      	movs	r1, #4
1a00224e:	4638      	mov	r0, r7
1a002250:	f7ff ff62 	bl	1a002118 <__sfmoreglue>
1a002254:	4604      	mov	r4, r0
1a002256:	6030      	str	r0, [r6, #0]
1a002258:	2800      	cmp	r0, #0
1a00225a:	d1d5      	bne.n	1a002208 <__sfp+0x24>
1a00225c:	f7ff ff78 	bl	1a002150 <__sfp_lock_release>
1a002260:	230c      	movs	r3, #12
1a002262:	603b      	str	r3, [r7, #0]
1a002264:	e7ee      	b.n	1a002244 <__sfp+0x60>
1a002266:	bf00      	nop
1a002268:	1a002b80 	.word	0x1a002b80
1a00226c:	ffff0001 	.word	0xffff0001

1a002270 <_fwalk_reent>:
1a002270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a002274:	4680      	mov	r8, r0
1a002276:	4689      	mov	r9, r1
1a002278:	f100 0448 	add.w	r4, r0, #72	; 0x48
1a00227c:	2600      	movs	r6, #0
1a00227e:	b914      	cbnz	r4, 1a002286 <_fwalk_reent+0x16>
1a002280:	4630      	mov	r0, r6
1a002282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a002286:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
1a00228a:	3f01      	subs	r7, #1
1a00228c:	d501      	bpl.n	1a002292 <_fwalk_reent+0x22>
1a00228e:	6824      	ldr	r4, [r4, #0]
1a002290:	e7f5      	b.n	1a00227e <_fwalk_reent+0xe>
1a002292:	89ab      	ldrh	r3, [r5, #12]
1a002294:	2b01      	cmp	r3, #1
1a002296:	d907      	bls.n	1a0022a8 <_fwalk_reent+0x38>
1a002298:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
1a00229c:	3301      	adds	r3, #1
1a00229e:	d003      	beq.n	1a0022a8 <_fwalk_reent+0x38>
1a0022a0:	4629      	mov	r1, r5
1a0022a2:	4640      	mov	r0, r8
1a0022a4:	47c8      	blx	r9
1a0022a6:	4306      	orrs	r6, r0
1a0022a8:	3568      	adds	r5, #104	; 0x68
1a0022aa:	e7ee      	b.n	1a00228a <_fwalk_reent+0x1a>

1a0022ac <__libc_init_array>:
1a0022ac:	b570      	push	{r4, r5, r6, lr}
1a0022ae:	4d0d      	ldr	r5, [pc, #52]	; (1a0022e4 <__libc_init_array+0x38>)
1a0022b0:	4c0d      	ldr	r4, [pc, #52]	; (1a0022e8 <__libc_init_array+0x3c>)
1a0022b2:	1b64      	subs	r4, r4, r5
1a0022b4:	10a4      	asrs	r4, r4, #2
1a0022b6:	2600      	movs	r6, #0
1a0022b8:	42a6      	cmp	r6, r4
1a0022ba:	d109      	bne.n	1a0022d0 <__libc_init_array+0x24>
1a0022bc:	4d0b      	ldr	r5, [pc, #44]	; (1a0022ec <__libc_init_array+0x40>)
1a0022be:	4c0c      	ldr	r4, [pc, #48]	; (1a0022f0 <__libc_init_array+0x44>)
1a0022c0:	f7fe f9a5 	bl	1a00060e <_init>
1a0022c4:	1b64      	subs	r4, r4, r5
1a0022c6:	10a4      	asrs	r4, r4, #2
1a0022c8:	2600      	movs	r6, #0
1a0022ca:	42a6      	cmp	r6, r4
1a0022cc:	d105      	bne.n	1a0022da <__libc_init_array+0x2e>
1a0022ce:	bd70      	pop	{r4, r5, r6, pc}
1a0022d0:	f855 3b04 	ldr.w	r3, [r5], #4
1a0022d4:	4798      	blx	r3
1a0022d6:	3601      	adds	r6, #1
1a0022d8:	e7ee      	b.n	1a0022b8 <__libc_init_array+0xc>
1a0022da:	f855 3b04 	ldr.w	r3, [r5], #4
1a0022de:	4798      	blx	r3
1a0022e0:	3601      	adds	r6, #1
1a0022e2:	e7f2      	b.n	1a0022ca <__libc_init_array+0x1e>
1a0022e4:	1a002b84 	.word	0x1a002b84
1a0022e8:	1a002b84 	.word	0x1a002b84
1a0022ec:	1a002b84 	.word	0x1a002b84
1a0022f0:	1a002b88 	.word	0x1a002b88

1a0022f4 <__retarget_lock_init_recursive>:
1a0022f4:	4770      	bx	lr

1a0022f6 <__retarget_lock_acquire_recursive>:
1a0022f6:	4770      	bx	lr

1a0022f8 <__retarget_lock_release_recursive>:
1a0022f8:	4770      	bx	lr

1a0022fa <memset>:
1a0022fa:	4402      	add	r2, r0
1a0022fc:	4603      	mov	r3, r0
1a0022fe:	4293      	cmp	r3, r2
1a002300:	d100      	bne.n	1a002304 <memset+0xa>
1a002302:	4770      	bx	lr
1a002304:	f803 1b01 	strb.w	r1, [r3], #1
1a002308:	e7f9      	b.n	1a0022fe <memset+0x4>
1a00230a:	Address 0x000000001a00230a is out of bounds.


1a00230c <_free_r>:
1a00230c:	b538      	push	{r3, r4, r5, lr}
1a00230e:	4605      	mov	r5, r0
1a002310:	2900      	cmp	r1, #0
1a002312:	d045      	beq.n	1a0023a0 <_free_r+0x94>
1a002314:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a002318:	1f0c      	subs	r4, r1, #4
1a00231a:	2b00      	cmp	r3, #0
1a00231c:	bfb8      	it	lt
1a00231e:	18e4      	addlt	r4, r4, r3
1a002320:	f000 fa7a 	bl	1a002818 <__malloc_lock>
1a002324:	4a1f      	ldr	r2, [pc, #124]	; (1a0023a4 <_free_r+0x98>)
1a002326:	6813      	ldr	r3, [r2, #0]
1a002328:	4610      	mov	r0, r2
1a00232a:	b933      	cbnz	r3, 1a00233a <_free_r+0x2e>
1a00232c:	6063      	str	r3, [r4, #4]
1a00232e:	6014      	str	r4, [r2, #0]
1a002330:	4628      	mov	r0, r5
1a002332:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a002336:	f000 ba75 	b.w	1a002824 <__malloc_unlock>
1a00233a:	42a3      	cmp	r3, r4
1a00233c:	d90c      	bls.n	1a002358 <_free_r+0x4c>
1a00233e:	6821      	ldr	r1, [r4, #0]
1a002340:	1862      	adds	r2, r4, r1
1a002342:	4293      	cmp	r3, r2
1a002344:	bf04      	itt	eq
1a002346:	681a      	ldreq	r2, [r3, #0]
1a002348:	685b      	ldreq	r3, [r3, #4]
1a00234a:	6063      	str	r3, [r4, #4]
1a00234c:	bf04      	itt	eq
1a00234e:	1852      	addeq	r2, r2, r1
1a002350:	6022      	streq	r2, [r4, #0]
1a002352:	6004      	str	r4, [r0, #0]
1a002354:	e7ec      	b.n	1a002330 <_free_r+0x24>
1a002356:	4613      	mov	r3, r2
1a002358:	685a      	ldr	r2, [r3, #4]
1a00235a:	b10a      	cbz	r2, 1a002360 <_free_r+0x54>
1a00235c:	42a2      	cmp	r2, r4
1a00235e:	d9fa      	bls.n	1a002356 <_free_r+0x4a>
1a002360:	6819      	ldr	r1, [r3, #0]
1a002362:	1858      	adds	r0, r3, r1
1a002364:	42a0      	cmp	r0, r4
1a002366:	d10b      	bne.n	1a002380 <_free_r+0x74>
1a002368:	6820      	ldr	r0, [r4, #0]
1a00236a:	4401      	add	r1, r0
1a00236c:	1858      	adds	r0, r3, r1
1a00236e:	4282      	cmp	r2, r0
1a002370:	6019      	str	r1, [r3, #0]
1a002372:	d1dd      	bne.n	1a002330 <_free_r+0x24>
1a002374:	6810      	ldr	r0, [r2, #0]
1a002376:	6852      	ldr	r2, [r2, #4]
1a002378:	605a      	str	r2, [r3, #4]
1a00237a:	4401      	add	r1, r0
1a00237c:	6019      	str	r1, [r3, #0]
1a00237e:	e7d7      	b.n	1a002330 <_free_r+0x24>
1a002380:	d902      	bls.n	1a002388 <_free_r+0x7c>
1a002382:	230c      	movs	r3, #12
1a002384:	602b      	str	r3, [r5, #0]
1a002386:	e7d3      	b.n	1a002330 <_free_r+0x24>
1a002388:	6820      	ldr	r0, [r4, #0]
1a00238a:	1821      	adds	r1, r4, r0
1a00238c:	428a      	cmp	r2, r1
1a00238e:	bf04      	itt	eq
1a002390:	6811      	ldreq	r1, [r2, #0]
1a002392:	6852      	ldreq	r2, [r2, #4]
1a002394:	6062      	str	r2, [r4, #4]
1a002396:	bf04      	itt	eq
1a002398:	1809      	addeq	r1, r1, r0
1a00239a:	6021      	streq	r1, [r4, #0]
1a00239c:	605c      	str	r4, [r3, #4]
1a00239e:	e7c7      	b.n	1a002330 <_free_r+0x24>
1a0023a0:	bd38      	pop	{r3, r4, r5, pc}
1a0023a2:	bf00      	nop
1a0023a4:	10000170 	.word	0x10000170

1a0023a8 <_malloc_r>:
1a0023a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0023aa:	1ccd      	adds	r5, r1, #3
1a0023ac:	f025 0503 	bic.w	r5, r5, #3
1a0023b0:	3508      	adds	r5, #8
1a0023b2:	2d0c      	cmp	r5, #12
1a0023b4:	bf38      	it	cc
1a0023b6:	250c      	movcc	r5, #12
1a0023b8:	2d00      	cmp	r5, #0
1a0023ba:	4606      	mov	r6, r0
1a0023bc:	db01      	blt.n	1a0023c2 <_malloc_r+0x1a>
1a0023be:	42a9      	cmp	r1, r5
1a0023c0:	d903      	bls.n	1a0023ca <_malloc_r+0x22>
1a0023c2:	230c      	movs	r3, #12
1a0023c4:	6033      	str	r3, [r6, #0]
1a0023c6:	2000      	movs	r0, #0
1a0023c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0023ca:	f000 fa25 	bl	1a002818 <__malloc_lock>
1a0023ce:	4921      	ldr	r1, [pc, #132]	; (1a002454 <_malloc_r+0xac>)
1a0023d0:	680a      	ldr	r2, [r1, #0]
1a0023d2:	4614      	mov	r4, r2
1a0023d4:	b99c      	cbnz	r4, 1a0023fe <_malloc_r+0x56>
1a0023d6:	4f20      	ldr	r7, [pc, #128]	; (1a002458 <_malloc_r+0xb0>)
1a0023d8:	683b      	ldr	r3, [r7, #0]
1a0023da:	b923      	cbnz	r3, 1a0023e6 <_malloc_r+0x3e>
1a0023dc:	4621      	mov	r1, r4
1a0023de:	4630      	mov	r0, r6
1a0023e0:	f7fe f96a 	bl	1a0006b8 <_sbrk_r>
1a0023e4:	6038      	str	r0, [r7, #0]
1a0023e6:	4629      	mov	r1, r5
1a0023e8:	4630      	mov	r0, r6
1a0023ea:	f7fe f965 	bl	1a0006b8 <_sbrk_r>
1a0023ee:	1c43      	adds	r3, r0, #1
1a0023f0:	d123      	bne.n	1a00243a <_malloc_r+0x92>
1a0023f2:	230c      	movs	r3, #12
1a0023f4:	6033      	str	r3, [r6, #0]
1a0023f6:	4630      	mov	r0, r6
1a0023f8:	f000 fa14 	bl	1a002824 <__malloc_unlock>
1a0023fc:	e7e3      	b.n	1a0023c6 <_malloc_r+0x1e>
1a0023fe:	6823      	ldr	r3, [r4, #0]
1a002400:	1b5b      	subs	r3, r3, r5
1a002402:	d417      	bmi.n	1a002434 <_malloc_r+0x8c>
1a002404:	2b0b      	cmp	r3, #11
1a002406:	d903      	bls.n	1a002410 <_malloc_r+0x68>
1a002408:	6023      	str	r3, [r4, #0]
1a00240a:	441c      	add	r4, r3
1a00240c:	6025      	str	r5, [r4, #0]
1a00240e:	e004      	b.n	1a00241a <_malloc_r+0x72>
1a002410:	6863      	ldr	r3, [r4, #4]
1a002412:	42a2      	cmp	r2, r4
1a002414:	bf0c      	ite	eq
1a002416:	600b      	streq	r3, [r1, #0]
1a002418:	6053      	strne	r3, [r2, #4]
1a00241a:	4630      	mov	r0, r6
1a00241c:	f000 fa02 	bl	1a002824 <__malloc_unlock>
1a002420:	f104 000b 	add.w	r0, r4, #11
1a002424:	1d23      	adds	r3, r4, #4
1a002426:	f020 0007 	bic.w	r0, r0, #7
1a00242a:	1ac2      	subs	r2, r0, r3
1a00242c:	d0cc      	beq.n	1a0023c8 <_malloc_r+0x20>
1a00242e:	1a1b      	subs	r3, r3, r0
1a002430:	50a3      	str	r3, [r4, r2]
1a002432:	e7c9      	b.n	1a0023c8 <_malloc_r+0x20>
1a002434:	4622      	mov	r2, r4
1a002436:	6864      	ldr	r4, [r4, #4]
1a002438:	e7cc      	b.n	1a0023d4 <_malloc_r+0x2c>
1a00243a:	1cc4      	adds	r4, r0, #3
1a00243c:	f024 0403 	bic.w	r4, r4, #3
1a002440:	42a0      	cmp	r0, r4
1a002442:	d0e3      	beq.n	1a00240c <_malloc_r+0x64>
1a002444:	1a21      	subs	r1, r4, r0
1a002446:	4630      	mov	r0, r6
1a002448:	f7fe f936 	bl	1a0006b8 <_sbrk_r>
1a00244c:	3001      	adds	r0, #1
1a00244e:	d1dd      	bne.n	1a00240c <_malloc_r+0x64>
1a002450:	e7cf      	b.n	1a0023f2 <_malloc_r+0x4a>
1a002452:	bf00      	nop
1a002454:	10000170 	.word	0x10000170
1a002458:	10000174 	.word	0x10000174

1a00245c <_puts_r>:
1a00245c:	b570      	push	{r4, r5, r6, lr}
1a00245e:	460e      	mov	r6, r1
1a002460:	4605      	mov	r5, r0
1a002462:	b118      	cbz	r0, 1a00246c <_puts_r+0x10>
1a002464:	6983      	ldr	r3, [r0, #24]
1a002466:	b90b      	cbnz	r3, 1a00246c <_puts_r+0x10>
1a002468:	f7ff fe84 	bl	1a002174 <__sinit>
1a00246c:	69ab      	ldr	r3, [r5, #24]
1a00246e:	68ac      	ldr	r4, [r5, #8]
1a002470:	b913      	cbnz	r3, 1a002478 <_puts_r+0x1c>
1a002472:	4628      	mov	r0, r5
1a002474:	f7ff fe7e 	bl	1a002174 <__sinit>
1a002478:	4b2c      	ldr	r3, [pc, #176]	; (1a00252c <_puts_r+0xd0>)
1a00247a:	429c      	cmp	r4, r3
1a00247c:	d120      	bne.n	1a0024c0 <_puts_r+0x64>
1a00247e:	686c      	ldr	r4, [r5, #4]
1a002480:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a002482:	07db      	lsls	r3, r3, #31
1a002484:	d405      	bmi.n	1a002492 <_puts_r+0x36>
1a002486:	89a3      	ldrh	r3, [r4, #12]
1a002488:	0598      	lsls	r0, r3, #22
1a00248a:	d402      	bmi.n	1a002492 <_puts_r+0x36>
1a00248c:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a00248e:	f7ff ff32 	bl	1a0022f6 <__retarget_lock_acquire_recursive>
1a002492:	89a3      	ldrh	r3, [r4, #12]
1a002494:	0719      	lsls	r1, r3, #28
1a002496:	d51d      	bpl.n	1a0024d4 <_puts_r+0x78>
1a002498:	6923      	ldr	r3, [r4, #16]
1a00249a:	b1db      	cbz	r3, 1a0024d4 <_puts_r+0x78>
1a00249c:	3e01      	subs	r6, #1
1a00249e:	68a3      	ldr	r3, [r4, #8]
1a0024a0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
1a0024a4:	3b01      	subs	r3, #1
1a0024a6:	60a3      	str	r3, [r4, #8]
1a0024a8:	bb39      	cbnz	r1, 1a0024fa <_puts_r+0x9e>
1a0024aa:	2b00      	cmp	r3, #0
1a0024ac:	da38      	bge.n	1a002520 <_puts_r+0xc4>
1a0024ae:	4622      	mov	r2, r4
1a0024b0:	210a      	movs	r1, #10
1a0024b2:	4628      	mov	r0, r5
1a0024b4:	f000 f88c 	bl	1a0025d0 <__swbuf_r>
1a0024b8:	3001      	adds	r0, #1
1a0024ba:	d011      	beq.n	1a0024e0 <_puts_r+0x84>
1a0024bc:	250a      	movs	r5, #10
1a0024be:	e011      	b.n	1a0024e4 <_puts_r+0x88>
1a0024c0:	4b1b      	ldr	r3, [pc, #108]	; (1a002530 <_puts_r+0xd4>)
1a0024c2:	429c      	cmp	r4, r3
1a0024c4:	d101      	bne.n	1a0024ca <_puts_r+0x6e>
1a0024c6:	68ac      	ldr	r4, [r5, #8]
1a0024c8:	e7da      	b.n	1a002480 <_puts_r+0x24>
1a0024ca:	4b1a      	ldr	r3, [pc, #104]	; (1a002534 <_puts_r+0xd8>)
1a0024cc:	429c      	cmp	r4, r3
1a0024ce:	bf08      	it	eq
1a0024d0:	68ec      	ldreq	r4, [r5, #12]
1a0024d2:	e7d5      	b.n	1a002480 <_puts_r+0x24>
1a0024d4:	4621      	mov	r1, r4
1a0024d6:	4628      	mov	r0, r5
1a0024d8:	f000 f8cc 	bl	1a002674 <__swsetup_r>
1a0024dc:	2800      	cmp	r0, #0
1a0024de:	d0dd      	beq.n	1a00249c <_puts_r+0x40>
1a0024e0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
1a0024e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a0024e6:	07da      	lsls	r2, r3, #31
1a0024e8:	d405      	bmi.n	1a0024f6 <_puts_r+0x9a>
1a0024ea:	89a3      	ldrh	r3, [r4, #12]
1a0024ec:	059b      	lsls	r3, r3, #22
1a0024ee:	d402      	bmi.n	1a0024f6 <_puts_r+0x9a>
1a0024f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a0024f2:	f7ff ff01 	bl	1a0022f8 <__retarget_lock_release_recursive>
1a0024f6:	4628      	mov	r0, r5
1a0024f8:	bd70      	pop	{r4, r5, r6, pc}
1a0024fa:	2b00      	cmp	r3, #0
1a0024fc:	da04      	bge.n	1a002508 <_puts_r+0xac>
1a0024fe:	69a2      	ldr	r2, [r4, #24]
1a002500:	429a      	cmp	r2, r3
1a002502:	dc06      	bgt.n	1a002512 <_puts_r+0xb6>
1a002504:	290a      	cmp	r1, #10
1a002506:	d004      	beq.n	1a002512 <_puts_r+0xb6>
1a002508:	6823      	ldr	r3, [r4, #0]
1a00250a:	1c5a      	adds	r2, r3, #1
1a00250c:	6022      	str	r2, [r4, #0]
1a00250e:	7019      	strb	r1, [r3, #0]
1a002510:	e7c5      	b.n	1a00249e <_puts_r+0x42>
1a002512:	4622      	mov	r2, r4
1a002514:	4628      	mov	r0, r5
1a002516:	f000 f85b 	bl	1a0025d0 <__swbuf_r>
1a00251a:	3001      	adds	r0, #1
1a00251c:	d1bf      	bne.n	1a00249e <_puts_r+0x42>
1a00251e:	e7df      	b.n	1a0024e0 <_puts_r+0x84>
1a002520:	6823      	ldr	r3, [r4, #0]
1a002522:	250a      	movs	r5, #10
1a002524:	1c5a      	adds	r2, r3, #1
1a002526:	6022      	str	r2, [r4, #0]
1a002528:	701d      	strb	r5, [r3, #0]
1a00252a:	e7db      	b.n	1a0024e4 <_puts_r+0x88>
1a00252c:	1a002b40 	.word	0x1a002b40
1a002530:	1a002b60 	.word	0x1a002b60
1a002534:	1a002b20 	.word	0x1a002b20

1a002538 <puts>:
1a002538:	4b02      	ldr	r3, [pc, #8]	; (1a002544 <puts+0xc>)
1a00253a:	4601      	mov	r1, r0
1a00253c:	6818      	ldr	r0, [r3, #0]
1a00253e:	f7ff bf8d 	b.w	1a00245c <_puts_r>
1a002542:	bf00      	nop
1a002544:	100000d0 	.word	0x100000d0

1a002548 <__sread>:
1a002548:	b510      	push	{r4, lr}
1a00254a:	460c      	mov	r4, r1
1a00254c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a002550:	f7fe f876 	bl	1a000640 <_read_r>
1a002554:	2800      	cmp	r0, #0
1a002556:	bfab      	itete	ge
1a002558:	6d63      	ldrge	r3, [r4, #84]	; 0x54
1a00255a:	89a3      	ldrhlt	r3, [r4, #12]
1a00255c:	181b      	addge	r3, r3, r0
1a00255e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
1a002562:	bfac      	ite	ge
1a002564:	6563      	strge	r3, [r4, #84]	; 0x54
1a002566:	81a3      	strhlt	r3, [r4, #12]
1a002568:	bd10      	pop	{r4, pc}

1a00256a <__swrite>:
1a00256a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00256e:	461f      	mov	r7, r3
1a002570:	898b      	ldrh	r3, [r1, #12]
1a002572:	05db      	lsls	r3, r3, #23
1a002574:	4605      	mov	r5, r0
1a002576:	460c      	mov	r4, r1
1a002578:	4616      	mov	r6, r2
1a00257a:	d505      	bpl.n	1a002588 <__swrite+0x1e>
1a00257c:	2302      	movs	r3, #2
1a00257e:	2200      	movs	r2, #0
1a002580:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a002584:	f7fe f857 	bl	1a000636 <_lseek_r>
1a002588:	89a3      	ldrh	r3, [r4, #12]
1a00258a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a00258e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a002592:	81a3      	strh	r3, [r4, #12]
1a002594:	4632      	mov	r2, r6
1a002596:	463b      	mov	r3, r7
1a002598:	4628      	mov	r0, r5
1a00259a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a00259e:	f7fe b876 	b.w	1a00068e <_write_r>

1a0025a2 <__sseek>:
1a0025a2:	b510      	push	{r4, lr}
1a0025a4:	460c      	mov	r4, r1
1a0025a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0025aa:	f7fe f844 	bl	1a000636 <_lseek_r>
1a0025ae:	1c43      	adds	r3, r0, #1
1a0025b0:	89a3      	ldrh	r3, [r4, #12]
1a0025b2:	bf15      	itete	ne
1a0025b4:	6560      	strne	r0, [r4, #84]	; 0x54
1a0025b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a0025ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a0025be:	81a3      	strheq	r3, [r4, #12]
1a0025c0:	bf18      	it	ne
1a0025c2:	81a3      	strhne	r3, [r4, #12]
1a0025c4:	bd10      	pop	{r4, pc}

1a0025c6 <__sclose>:
1a0025c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0025ca:	f7fe b821 	b.w	1a000610 <_close_r>
1a0025ce:	Address 0x000000001a0025ce is out of bounds.


1a0025d0 <__swbuf_r>:
1a0025d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0025d2:	460e      	mov	r6, r1
1a0025d4:	4614      	mov	r4, r2
1a0025d6:	4605      	mov	r5, r0
1a0025d8:	b118      	cbz	r0, 1a0025e2 <__swbuf_r+0x12>
1a0025da:	6983      	ldr	r3, [r0, #24]
1a0025dc:	b90b      	cbnz	r3, 1a0025e2 <__swbuf_r+0x12>
1a0025de:	f7ff fdc9 	bl	1a002174 <__sinit>
1a0025e2:	4b21      	ldr	r3, [pc, #132]	; (1a002668 <__swbuf_r+0x98>)
1a0025e4:	429c      	cmp	r4, r3
1a0025e6:	d12b      	bne.n	1a002640 <__swbuf_r+0x70>
1a0025e8:	686c      	ldr	r4, [r5, #4]
1a0025ea:	69a3      	ldr	r3, [r4, #24]
1a0025ec:	60a3      	str	r3, [r4, #8]
1a0025ee:	89a3      	ldrh	r3, [r4, #12]
1a0025f0:	071a      	lsls	r2, r3, #28
1a0025f2:	d52f      	bpl.n	1a002654 <__swbuf_r+0x84>
1a0025f4:	6923      	ldr	r3, [r4, #16]
1a0025f6:	b36b      	cbz	r3, 1a002654 <__swbuf_r+0x84>
1a0025f8:	6923      	ldr	r3, [r4, #16]
1a0025fa:	6820      	ldr	r0, [r4, #0]
1a0025fc:	1ac0      	subs	r0, r0, r3
1a0025fe:	6963      	ldr	r3, [r4, #20]
1a002600:	b2f6      	uxtb	r6, r6
1a002602:	4283      	cmp	r3, r0
1a002604:	4637      	mov	r7, r6
1a002606:	dc04      	bgt.n	1a002612 <__swbuf_r+0x42>
1a002608:	4621      	mov	r1, r4
1a00260a:	4628      	mov	r0, r5
1a00260c:	f7ff fd1e 	bl	1a00204c <_fflush_r>
1a002610:	bb30      	cbnz	r0, 1a002660 <__swbuf_r+0x90>
1a002612:	68a3      	ldr	r3, [r4, #8]
1a002614:	3b01      	subs	r3, #1
1a002616:	60a3      	str	r3, [r4, #8]
1a002618:	6823      	ldr	r3, [r4, #0]
1a00261a:	1c5a      	adds	r2, r3, #1
1a00261c:	6022      	str	r2, [r4, #0]
1a00261e:	701e      	strb	r6, [r3, #0]
1a002620:	6963      	ldr	r3, [r4, #20]
1a002622:	3001      	adds	r0, #1
1a002624:	4283      	cmp	r3, r0
1a002626:	d004      	beq.n	1a002632 <__swbuf_r+0x62>
1a002628:	89a3      	ldrh	r3, [r4, #12]
1a00262a:	07db      	lsls	r3, r3, #31
1a00262c:	d506      	bpl.n	1a00263c <__swbuf_r+0x6c>
1a00262e:	2e0a      	cmp	r6, #10
1a002630:	d104      	bne.n	1a00263c <__swbuf_r+0x6c>
1a002632:	4621      	mov	r1, r4
1a002634:	4628      	mov	r0, r5
1a002636:	f7ff fd09 	bl	1a00204c <_fflush_r>
1a00263a:	b988      	cbnz	r0, 1a002660 <__swbuf_r+0x90>
1a00263c:	4638      	mov	r0, r7
1a00263e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a002640:	4b0a      	ldr	r3, [pc, #40]	; (1a00266c <__swbuf_r+0x9c>)
1a002642:	429c      	cmp	r4, r3
1a002644:	d101      	bne.n	1a00264a <__swbuf_r+0x7a>
1a002646:	68ac      	ldr	r4, [r5, #8]
1a002648:	e7cf      	b.n	1a0025ea <__swbuf_r+0x1a>
1a00264a:	4b09      	ldr	r3, [pc, #36]	; (1a002670 <__swbuf_r+0xa0>)
1a00264c:	429c      	cmp	r4, r3
1a00264e:	bf08      	it	eq
1a002650:	68ec      	ldreq	r4, [r5, #12]
1a002652:	e7ca      	b.n	1a0025ea <__swbuf_r+0x1a>
1a002654:	4621      	mov	r1, r4
1a002656:	4628      	mov	r0, r5
1a002658:	f000 f80c 	bl	1a002674 <__swsetup_r>
1a00265c:	2800      	cmp	r0, #0
1a00265e:	d0cb      	beq.n	1a0025f8 <__swbuf_r+0x28>
1a002660:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a002664:	e7ea      	b.n	1a00263c <__swbuf_r+0x6c>
1a002666:	bf00      	nop
1a002668:	1a002b40 	.word	0x1a002b40
1a00266c:	1a002b60 	.word	0x1a002b60
1a002670:	1a002b20 	.word	0x1a002b20

1a002674 <__swsetup_r>:
1a002674:	4b32      	ldr	r3, [pc, #200]	; (1a002740 <__swsetup_r+0xcc>)
1a002676:	b570      	push	{r4, r5, r6, lr}
1a002678:	681d      	ldr	r5, [r3, #0]
1a00267a:	4606      	mov	r6, r0
1a00267c:	460c      	mov	r4, r1
1a00267e:	b125      	cbz	r5, 1a00268a <__swsetup_r+0x16>
1a002680:	69ab      	ldr	r3, [r5, #24]
1a002682:	b913      	cbnz	r3, 1a00268a <__swsetup_r+0x16>
1a002684:	4628      	mov	r0, r5
1a002686:	f7ff fd75 	bl	1a002174 <__sinit>
1a00268a:	4b2e      	ldr	r3, [pc, #184]	; (1a002744 <__swsetup_r+0xd0>)
1a00268c:	429c      	cmp	r4, r3
1a00268e:	d10f      	bne.n	1a0026b0 <__swsetup_r+0x3c>
1a002690:	686c      	ldr	r4, [r5, #4]
1a002692:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a002696:	b29a      	uxth	r2, r3
1a002698:	0715      	lsls	r5, r2, #28
1a00269a:	d42c      	bmi.n	1a0026f6 <__swsetup_r+0x82>
1a00269c:	06d0      	lsls	r0, r2, #27
1a00269e:	d411      	bmi.n	1a0026c4 <__swsetup_r+0x50>
1a0026a0:	2209      	movs	r2, #9
1a0026a2:	6032      	str	r2, [r6, #0]
1a0026a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a0026a8:	81a3      	strh	r3, [r4, #12]
1a0026aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0026ae:	e03e      	b.n	1a00272e <__swsetup_r+0xba>
1a0026b0:	4b25      	ldr	r3, [pc, #148]	; (1a002748 <__swsetup_r+0xd4>)
1a0026b2:	429c      	cmp	r4, r3
1a0026b4:	d101      	bne.n	1a0026ba <__swsetup_r+0x46>
1a0026b6:	68ac      	ldr	r4, [r5, #8]
1a0026b8:	e7eb      	b.n	1a002692 <__swsetup_r+0x1e>
1a0026ba:	4b24      	ldr	r3, [pc, #144]	; (1a00274c <__swsetup_r+0xd8>)
1a0026bc:	429c      	cmp	r4, r3
1a0026be:	bf08      	it	eq
1a0026c0:	68ec      	ldreq	r4, [r5, #12]
1a0026c2:	e7e6      	b.n	1a002692 <__swsetup_r+0x1e>
1a0026c4:	0751      	lsls	r1, r2, #29
1a0026c6:	d512      	bpl.n	1a0026ee <__swsetup_r+0x7a>
1a0026c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a0026ca:	b141      	cbz	r1, 1a0026de <__swsetup_r+0x6a>
1a0026cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a0026d0:	4299      	cmp	r1, r3
1a0026d2:	d002      	beq.n	1a0026da <__swsetup_r+0x66>
1a0026d4:	4630      	mov	r0, r6
1a0026d6:	f7ff fe19 	bl	1a00230c <_free_r>
1a0026da:	2300      	movs	r3, #0
1a0026dc:	6363      	str	r3, [r4, #52]	; 0x34
1a0026de:	89a3      	ldrh	r3, [r4, #12]
1a0026e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
1a0026e4:	81a3      	strh	r3, [r4, #12]
1a0026e6:	2300      	movs	r3, #0
1a0026e8:	6063      	str	r3, [r4, #4]
1a0026ea:	6923      	ldr	r3, [r4, #16]
1a0026ec:	6023      	str	r3, [r4, #0]
1a0026ee:	89a3      	ldrh	r3, [r4, #12]
1a0026f0:	f043 0308 	orr.w	r3, r3, #8
1a0026f4:	81a3      	strh	r3, [r4, #12]
1a0026f6:	6923      	ldr	r3, [r4, #16]
1a0026f8:	b94b      	cbnz	r3, 1a00270e <__swsetup_r+0x9a>
1a0026fa:	89a3      	ldrh	r3, [r4, #12]
1a0026fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
1a002700:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a002704:	d003      	beq.n	1a00270e <__swsetup_r+0x9a>
1a002706:	4621      	mov	r1, r4
1a002708:	4630      	mov	r0, r6
1a00270a:	f000 f845 	bl	1a002798 <__smakebuf_r>
1a00270e:	89a2      	ldrh	r2, [r4, #12]
1a002710:	f012 0301 	ands.w	r3, r2, #1
1a002714:	d00c      	beq.n	1a002730 <__swsetup_r+0xbc>
1a002716:	2300      	movs	r3, #0
1a002718:	60a3      	str	r3, [r4, #8]
1a00271a:	6963      	ldr	r3, [r4, #20]
1a00271c:	425b      	negs	r3, r3
1a00271e:	61a3      	str	r3, [r4, #24]
1a002720:	6923      	ldr	r3, [r4, #16]
1a002722:	b953      	cbnz	r3, 1a00273a <__swsetup_r+0xc6>
1a002724:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a002728:	f013 0080 	ands.w	r0, r3, #128	; 0x80
1a00272c:	d1ba      	bne.n	1a0026a4 <__swsetup_r+0x30>
1a00272e:	bd70      	pop	{r4, r5, r6, pc}
1a002730:	0792      	lsls	r2, r2, #30
1a002732:	bf58      	it	pl
1a002734:	6963      	ldrpl	r3, [r4, #20]
1a002736:	60a3      	str	r3, [r4, #8]
1a002738:	e7f2      	b.n	1a002720 <__swsetup_r+0xac>
1a00273a:	2000      	movs	r0, #0
1a00273c:	e7f7      	b.n	1a00272e <__swsetup_r+0xba>
1a00273e:	bf00      	nop
1a002740:	100000d0 	.word	0x100000d0
1a002744:	1a002b40 	.word	0x1a002b40
1a002748:	1a002b60 	.word	0x1a002b60
1a00274c:	1a002b20 	.word	0x1a002b20

1a002750 <__swhatbuf_r>:
1a002750:	b570      	push	{r4, r5, r6, lr}
1a002752:	460e      	mov	r6, r1
1a002754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a002758:	2900      	cmp	r1, #0
1a00275a:	b096      	sub	sp, #88	; 0x58
1a00275c:	4614      	mov	r4, r2
1a00275e:	461d      	mov	r5, r3
1a002760:	da07      	bge.n	1a002772 <__swhatbuf_r+0x22>
1a002762:	2300      	movs	r3, #0
1a002764:	602b      	str	r3, [r5, #0]
1a002766:	89b3      	ldrh	r3, [r6, #12]
1a002768:	061a      	lsls	r2, r3, #24
1a00276a:	d410      	bmi.n	1a00278e <__swhatbuf_r+0x3e>
1a00276c:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a002770:	e00e      	b.n	1a002790 <__swhatbuf_r+0x40>
1a002772:	466a      	mov	r2, sp
1a002774:	f7fd ff51 	bl	1a00061a <_fstat_r>
1a002778:	2800      	cmp	r0, #0
1a00277a:	dbf2      	blt.n	1a002762 <__swhatbuf_r+0x12>
1a00277c:	9a01      	ldr	r2, [sp, #4]
1a00277e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
1a002782:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
1a002786:	425a      	negs	r2, r3
1a002788:	415a      	adcs	r2, r3
1a00278a:	602a      	str	r2, [r5, #0]
1a00278c:	e7ee      	b.n	1a00276c <__swhatbuf_r+0x1c>
1a00278e:	2340      	movs	r3, #64	; 0x40
1a002790:	2000      	movs	r0, #0
1a002792:	6023      	str	r3, [r4, #0]
1a002794:	b016      	add	sp, #88	; 0x58
1a002796:	bd70      	pop	{r4, r5, r6, pc}

1a002798 <__smakebuf_r>:
1a002798:	898b      	ldrh	r3, [r1, #12]
1a00279a:	b573      	push	{r0, r1, r4, r5, r6, lr}
1a00279c:	079d      	lsls	r5, r3, #30
1a00279e:	4606      	mov	r6, r0
1a0027a0:	460c      	mov	r4, r1
1a0027a2:	d507      	bpl.n	1a0027b4 <__smakebuf_r+0x1c>
1a0027a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
1a0027a8:	6023      	str	r3, [r4, #0]
1a0027aa:	6123      	str	r3, [r4, #16]
1a0027ac:	2301      	movs	r3, #1
1a0027ae:	6163      	str	r3, [r4, #20]
1a0027b0:	b002      	add	sp, #8
1a0027b2:	bd70      	pop	{r4, r5, r6, pc}
1a0027b4:	ab01      	add	r3, sp, #4
1a0027b6:	466a      	mov	r2, sp
1a0027b8:	f7ff ffca 	bl	1a002750 <__swhatbuf_r>
1a0027bc:	9900      	ldr	r1, [sp, #0]
1a0027be:	4605      	mov	r5, r0
1a0027c0:	4630      	mov	r0, r6
1a0027c2:	f7ff fdf1 	bl	1a0023a8 <_malloc_r>
1a0027c6:	b948      	cbnz	r0, 1a0027dc <__smakebuf_r+0x44>
1a0027c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0027cc:	059a      	lsls	r2, r3, #22
1a0027ce:	d4ef      	bmi.n	1a0027b0 <__smakebuf_r+0x18>
1a0027d0:	f023 0303 	bic.w	r3, r3, #3
1a0027d4:	f043 0302 	orr.w	r3, r3, #2
1a0027d8:	81a3      	strh	r3, [r4, #12]
1a0027da:	e7e3      	b.n	1a0027a4 <__smakebuf_r+0xc>
1a0027dc:	4b0d      	ldr	r3, [pc, #52]	; (1a002814 <__smakebuf_r+0x7c>)
1a0027de:	62b3      	str	r3, [r6, #40]	; 0x28
1a0027e0:	89a3      	ldrh	r3, [r4, #12]
1a0027e2:	6020      	str	r0, [r4, #0]
1a0027e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0027e8:	81a3      	strh	r3, [r4, #12]
1a0027ea:	9b00      	ldr	r3, [sp, #0]
1a0027ec:	6163      	str	r3, [r4, #20]
1a0027ee:	9b01      	ldr	r3, [sp, #4]
1a0027f0:	6120      	str	r0, [r4, #16]
1a0027f2:	b15b      	cbz	r3, 1a00280c <__smakebuf_r+0x74>
1a0027f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a0027f8:	4630      	mov	r0, r6
1a0027fa:	f7fd ff13 	bl	1a000624 <_isatty_r>
1a0027fe:	b128      	cbz	r0, 1a00280c <__smakebuf_r+0x74>
1a002800:	89a3      	ldrh	r3, [r4, #12]
1a002802:	f023 0303 	bic.w	r3, r3, #3
1a002806:	f043 0301 	orr.w	r3, r3, #1
1a00280a:	81a3      	strh	r3, [r4, #12]
1a00280c:	89a3      	ldrh	r3, [r4, #12]
1a00280e:	431d      	orrs	r5, r3
1a002810:	81a5      	strh	r5, [r4, #12]
1a002812:	e7cd      	b.n	1a0027b0 <__smakebuf_r+0x18>
1a002814:	1a00210d 	.word	0x1a00210d

1a002818 <__malloc_lock>:
1a002818:	4801      	ldr	r0, [pc, #4]	; (1a002820 <__malloc_lock+0x8>)
1a00281a:	f7ff bd6c 	b.w	1a0022f6 <__retarget_lock_acquire_recursive>
1a00281e:	bf00      	nop
1a002820:	10000188 	.word	0x10000188

1a002824 <__malloc_unlock>:
1a002824:	4801      	ldr	r0, [pc, #4]	; (1a00282c <__malloc_unlock+0x8>)
1a002826:	f7ff bd67 	b.w	1a0022f8 <__retarget_lock_release_recursive>
1a00282a:	bf00      	nop
1a00282c:	10000188 	.word	0x10000188

1a002830 <gpio_pins_init>:
1a002830:	0e000a02 010b0200 0c02000b 02000c01     ................
1a002840:	04000500 01050102 05020204 00010402     ................
1a002850:	01000400 00080001 09000201 01060100     ................
1a002860:	01060009 06000003 00030304 6f727245     ............Erro
1a002870:	00202e72                                r. .

1a002874 <ExtRateIn>:
1a002874:	00000000                                ....

1a002878 <GpioButtons>:
1a002878:	08000400 09010900                       ........

1a002880 <GpioLeds>:
1a002880:	01050005 0e000205 0c010b01              ............

1a00288c <GpioPorts>:
1a00288c:	03030003 0f050403 05031005 07030603     ................
1a00289c:	ffff0802                                ....

1a0028a0 <OscRateIn>:
1a0028a0:	00b71b00                                ....

1a0028a4 <InitClkStates>:
1a0028a4:	01010f01                                ....

1a0028a8 <pinmuxing>:
1a0028a8:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a0028b8:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a0028c8:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a0028d8:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a0028e8:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a0028f8:	00d50301 00d50401 00160107 00560207     ..............V.
1a002908:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a002918:	00570206                                ..W.

1a00291c <UART_BClock>:
1a00291c:	01a201c2 01620182                       ......b.

1a002924 <UART_PClock>:
1a002924:	00820081 00a200a1 08040201 0f0f0f03     ................
1a002934:	000000ff                                ....

1a002938 <periph_to_base>:
1a002938:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a002948:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a002958:	000100e0 01000100 01200003 00060120     .......... . ...
1a002968:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a002978:	01820013 00120182 01a201a2 01c20011     ................
1a002988:	001001c2 01e201e2 0202000f 000e0202     ................
1a002998:	02220222 0223000d 001c0223              "."...#.#...

1a0029a4 <InitClkStates>:
1a0029a4:	00010100 00010909 0001090a 01010701     ................
1a0029b4:	00010902 00010906 0101090c 0001090d     ................
1a0029c4:	0001090e 0001090f 00010910 00010911     ................
1a0029d4:	00010912 00010913 00011114 00011119     ................
1a0029e4:	0001111a 0001111b                       ........

1a0029ec <lpcUarts>:
1a0029ec:	40081000 06020406 00180205 40081000     ...@...........@
1a0029fc:	09070509 00180706 40082000 00000000     ......... .@....
1a002a0c:	00190000 400c1000 07060107 001a0602     .......@........
1a002a1c:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a002a2c:	02020302 001b0204                       ........

1a002a34 <gpioPinsInit>:
1a002a34:	02000104 00050701 05010d03 04080100     ................
1a002a44:	02020002 02000304 00000403 04070002     ................
1a002a54:	030c0300 09050402 05040103 04030208     ................
1a002a64:	04020305 06040504 0802000c 03000b06     ................
1a002a74:	00090607 07060503 060f0504 03030004     ................
1a002a84:	02000404 00050404 06040502 04060200     ................
1a002a94:	0c050408 05040a04 0003010e 14010a00     ................
1a002aa4:	010f0000 0d000012 00001101 0010010c     ................
1a002ab4:	07070300 000f0300 01000001 00000000     ................
1a002ac4:	000a0600 08060603 06100504 04030005     ................
1a002ad4:	03000106 04090400 04010d05 010b0000     ................
1a002ae4:	0200000f 00000001 00010104 02010800     ................
1a002af4:	01090000 09010006 05040002 04010200     ................
1a002b04:	02020105 02020504 0e00000a 01000b02     ................
1a002b14:	000c020b ffff0c01                       ........

1a002b1c <ultrasonicSensorsIrqMap>:
1a002b1c:	ff020100                                ....

1a002b20 <__sf_fake_stderr>:
	...

1a002b40 <__sf_fake_stdin>:
	...

1a002b60 <__sf_fake_stdout>:
	...

1a002b80 <_global_impure_ptr>:
1a002b80:	100000d4                                ....
